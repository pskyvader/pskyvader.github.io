{"version":3,"sources":["components/SudokuNumberBox.jsx","components/SudokuBox.jsx","pages/Home.jsx"],"names":["SudokuPopover","lazy","SudokuOptions","useStyles","makeStyles","theme","palette","primary","getContrastText","background","grey","light","type","button","height","width","fontSize","fontWeight","minWidth","borderRadius","padding","color","paper","backgroundColor","error","main","contrastText","selected","disabled","popper","zIndex","SudokuNumber","field","OptionsActive","setOptionsActive","classes","anchorRef","React","useRef","useState","open","setOpen","ChangeOption","SetChangeOption","handleClose","number","locked","options","FinalNumber","SetFinalNumber","FinalError","SetError","Options","SetOptions","className","clsx","Button","root","fallback","Fragment","ref","onClick","event","prev","Popper","anchorEl","current","role","undefined","transition","TransitionProps","placement","parentOptions","SudokuNumberBox","props","fontsize","Box","display","alignItems","justifyContent","mainbordercolor","info","dark","subbox","textAlign","grid","borderRight","spacing","subgrid","borderBottom","SudokuSubBox","matrix","box","submatrix","key","x","y","Grid","container","justify","map","row","keyx","item","xs","column","keyy","SudokuBox","subheight","Modal","Typography","DifficultyButtons","mainborder","border","maxWidth","mixins","toolbar","minHeight","margin","flexGrow","borderLeft","borderTop","top","left","position","boxShadow","shadows","transform","outline","Home","board","canvas","LocalStorage","get","setHeight","success","Success","setSuccess","Save","set","CloneBoard","debouncedHandleResize","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","debounce","BoxHeight","clientWidth","useLayoutEffect","useEffect","window","addEventListener","removeEventListener","modal","onClose","aria-labelledby","aria-describedby","Text","id","variant","gutterBottom","Math","round","random"],"mappings":"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","file":"static/js/14.c61139f5.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\r\nimport clsx from 'clsx';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Popper from '@material-ui/core/Popper';\r\n\r\nconst SudokuPopover = lazy(() => import('./SudokuPopover'));\r\nconst SudokuOptions = lazy(() => import('./SudokuOptions'));\r\n\r\nconst renderLoader = () => null;\r\n\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const { primary, getContrastText, background, grey } = theme.palette;\r\n    const light = theme.palette.type === \"light\";\r\n    return {\r\n        button: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontSize: \"1em\",\r\n            fontWeight: \"normal\",\r\n            minWidth: 0,\r\n            borderRadius: 0,\r\n            padding: 0,\r\n            color: light ? \"\" : getContrastText(background.paper),\r\n            '&$disabled': {\r\n                color: light ? grey[500] : grey[300],\r\n                backgroundColor: light ? grey[200] : grey[800],\r\n            },\r\n        },\r\n        error: {\r\n            color: theme.palette.error.main,\r\n            '&$disabled': {\r\n                color: theme.palette.error.contrastText,\r\n                backgroundColor: theme.palette.error.main\r\n            },\r\n        },\r\n        selected: {\r\n            backgroundColor: primary.light,\r\n            color: getContrastText(primary.light),\r\n            \"&:hover\": {\r\n                backgroundColor: primary.main,\r\n            }\r\n        },\r\n        disabled: {},\r\n        popper: {\r\n            zIndex: 1300\r\n        },\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nconst SudokuNumber = ({ field, OptionsActive, setOptionsActive }) => {\r\n    const classes = useStyles();\r\n    const anchorRef = React.useRef(null);\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const [ChangeOption, SetChangeOption] = React.useState(false);\r\n\r\n\r\n    const handleClick = (event) => {\r\n        setOpen((prev) => !prev);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    let { number, locked, error, options } = field;\r\n\r\n    const [FinalNumber, SetFinalNumber] = React.useState(number);\r\n    field.SetFinalNumber = SetFinalNumber;\r\n    field.number = FinalNumber;\r\n\r\n    const [FinalError, SetError] = React.useState(error);\r\n    field.SetError = SetError;\r\n    field.error = FinalError;\r\n\r\n    const [Options, SetOptions] = React.useState(options);\r\n    field.SetOptions = SetOptions;\r\n    field.options = Options;\r\n\r\n    const className = clsx(classes.button, FinalError && classes.error, open && classes.selected, ChangeOption);\r\n\r\n    if (locked) {\r\n        return (\r\n            <Button disabled classes={{ root: className, disabled: classes.disabled, }}  >\r\n                <Suspense fallback={renderLoader()}>\r\n                    <SudokuOptions options={Options}> {FinalNumber}</SudokuOptions>\r\n                </Suspense>\r\n            </Button>\r\n        )\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <Button ref={anchorRef} className={className} onClick={handleClick}>\r\n                    <Suspense fallback={renderLoader()}>\r\n                        <SudokuOptions options={Options}> {FinalNumber}</SudokuOptions>\r\n                    </Suspense>\r\n                </Button>\r\n                <Suspense fallback={renderLoader()}>\r\n                    <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition className={classes.popper}>\r\n                        {({ TransitionProps, placement }) => (\r\n                            <SudokuPopover\r\n                                TransitionProps={TransitionProps}\r\n                                placement={placement}\r\n                                handleClose={handleClose}\r\n                                field={field}\r\n                                OptionsActive={OptionsActive}\r\n                                setOptionsActive={setOptionsActive}\r\n                                parentOptions={SetChangeOption}\r\n                            />\r\n                        )}\r\n                    </Popper>\r\n\r\n                </Suspense>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst SudokuNumberBox = (props) => {\r\n    const { height } = props;\r\n    let fontsize = height * .75;\r\n    if (fontsize > 50) {\r\n        fontsize = 50;\r\n    }\r\n\r\n    return <Box height={height} width=\"100%\" fontSize={fontsize} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n        <SudokuNumber {...props} />\r\n    </Box>\r\n}\r\n\r\nexport default SudokuNumberBox;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport SudokuNumberBox from \"./SudokuNumberBox\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const light = theme.palette.type === \"light\";\r\n    const mainbordercolor = light ? theme.palette.info.dark : theme.palette.primary.light;\r\n    return {\r\n        subbox: { textAlign: \"center\", height: \"100%\" },\r\n        grid: { borderRight: theme.spacing(0.125) + \" solid \" + mainbordercolor },\r\n        subgrid: { borderBottom: theme.spacing(0.125) + \" solid \" + mainbordercolor }\r\n    }\r\n});\r\n\r\n\r\nconst SudokuSubBox = ({ matrix, height, OptionsActive, setOptionsActive }) => {\r\n    const classes = useStyles();\r\n    const box = matrix.submatrix;\r\n    const key = matrix.x + \",\" + matrix.y;\r\n\r\n    return <Grid container justify=\"center\" className={classes.subbox}>\r\n        {box.map((row, x) => {\r\n            const keyx = key + \"-\" + x;\r\n            return <Grid key={keyx} item xs={4} className={classes.grid}>\r\n                {row.map((column, y) => {\r\n                    const keyy = keyx + \",\" + y;\r\n                    return <Grid key={keyy} item xs={12} className={classes.subgrid}>\r\n                        <SudokuNumberBox field={column} height={height} OptionsActive={OptionsActive} setOptionsActive={setOptionsActive} />\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        })}\r\n    </Grid>\r\n}\r\n\r\nconst SudokuBox = (props) => {\r\n    const { height } = props;\r\n    const subheight = height / 3 - 1; // x / 3 (3 squares) -1 (1px borders ) \r\n    return <Box height={height} width=\"100%\">\r\n        <SudokuSubBox {...props} height={subheight} />\r\n    </Box>;\r\n}\r\n\r\nexport default SudokuBox;","import React, { lazy, Suspense } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nimport SudokuBox from \"../components/SudokuBox\";\r\nimport LocalStorage from \"../logic/LocalStorage\";\r\nimport Text from '../languages/Language';\r\n\r\n\r\n// import Modal from '@material-ui/core/Modal';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import { DifficultyButtons } from \"../components/Buttons\";\r\n\r\nconst Modal = lazy(() => import('@material-ui/core/Modal'));\r\nconst Typography = lazy(() => import('@material-ui/core/Typography'));\r\nconst DifficultyButtons = lazy(() => import('../components/buttons/DifficultyButtons'));\r\n\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const light = theme.palette.type === \"light\";\r\n    const mainbordercolor = light ? theme.palette.info.dark : theme.palette.primary.light;\r\n    const mainborder = theme.spacing(0.25 + 0.125) + \" solid \" + mainbordercolor;\r\n    const border = theme.spacing(0.25) + \" solid \" + mainbordercolor;\r\n    return {\r\n        box: {\r\n            maxWidth: \"calc(100vh - \" + theme.mixins.toolbar.minHeight * 2 + \"px)\",\r\n            margin: theme.spacing(1, \"auto\"),\r\n        },\r\n        root: {\r\n            flexGrow: 1,\r\n            borderLeft: mainborder,\r\n            borderTop: mainborder,\r\n        },\r\n        grid: {\r\n            borderRight: border,\r\n        },\r\n        subgrid: {\r\n            borderBottom: border,\r\n        },\r\n        paper: {\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            position: 'absolute',\r\n            backgroundColor: theme.palette.background.paper,\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(8),\r\n            transform: `translate(-50%, -50%)`,\r\n            outline: \"none\",\r\n        },\r\n    }\r\n});\r\n\r\nfunction debounce(fn, ms) {\r\n    let timer;\r\n    return _ => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(_ => {\r\n            timer = null\r\n            fn.apply(this, arguments)\r\n        }, ms)\r\n    };\r\n}\r\n\r\n\r\nconst Home = (props) => {\r\n    const { board } = props;\r\n    const classes = useStyles();\r\n    const canvas = React.useRef(null);\r\n    const [height, setHeight] = React.useState(LocalStorage.get(\"box_height\", 100));\r\n    const [OptionsActive, setOptionsActive] = React.useState(LocalStorage.get(\"options_active\", false));\r\n\r\n    const [Success, setSuccess] = React.useState(board.success);\r\n    board.setSuccess = setSuccess;\r\n    board.success = Success;\r\n\r\n\r\n    const handleClose = () => {\r\n        setSuccess(false);\r\n    };\r\n\r\n    const BoxHeight = () => {\r\n        if(canvas.current.clientWidth>0){\r\n            setHeight(canvas.current.clientWidth / 3 - 3);// x / 3 (3 squares) -3 (3px borders ) \r\n        }else{\r\n            setTimeout(BoxHeight, 100);\r\n        }\r\n    }\r\n    const Save = () => {\r\n        LocalStorage.set(\"box_height\", height);\r\n        LocalStorage.set(\"sudoku_board\", board.CloneBoard());\r\n        LocalStorage.set(\"options_active\", OptionsActive);\r\n    }\r\n\r\n    const debouncedHandleResize = debounce(BoxHeight, 100);\r\n    React.useLayoutEffect(debouncedHandleResize, []);\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"resize\", debouncedHandleResize);\r\n        return () => window.removeEventListener(\"resize\", debouncedHandleResize);\r\n    });\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"beforeunload\", Save);\r\n        return () => window.removeEventListener(\"beforeunload\", Save);\r\n    });\r\n\r\n\r\n    const renderLoader = () => Text(\"loading\");\r\n    const modal = (\r\n        <Modal\r\n            open={Success}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n        >\r\n            <Suspense fallback={renderLoader()}>\r\n                <div className={classes.paper}>\r\n                    <Typography id=\"modal-title\" variant=\"h4\" gutterBottom> {Text(\"victory\"+(Math.round(Math.random()*9)+1))}</Typography>\r\n                    <Typography id=\"modal-description\" variant=\"h5\" gutterBottom> {Text(\"newgame\")} </Typography>\r\n                    <DifficultyButtons {...props} />\r\n                    <p> ... {Text(\"victorycomment\"+(Math.round(Math.random()*9)+1))}</p>\r\n                </div>\r\n            </Suspense>\r\n        </Modal>\r\n    );\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Box className={classes.box} ref={canvas}>\r\n            {modal}\r\n            <Grid container justify=\"center\" className={classes.root} >\r\n                {board.matrix.map((row, x) => (\r\n                    <Grid key={x} item xs={4} className={classes.grid}>\r\n                        {row.map((column, y) => (\r\n                            <Grid key={x + \",\" + y} item xs={12} className={classes.subgrid}>\r\n                                <SudokuBox matrix={column} height={height} OptionsActive={OptionsActive} setOptionsActive={setOptionsActive} />\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Home;"],"sourceRoot":""}