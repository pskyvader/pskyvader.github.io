{"version":3,"sources":["components/SudokuPopover.jsx"],"names":["useStyles","makeStyles","theme","palette","primary","secondary","getContrastText","background","light","mode","button","height","width","fontSize","fontWeight","minWidth","borderRadius","padding","spacing","breakpoints","up","backgroundColor","main","color","contrastText","paper","options","margin","label","optioncolor","optionbackground","OptionsActiveoption","SudokuPopover","props","handleClose","field","useContext","BoardContext","OptionsActive","setOptionsActive","HelpActive","handleChange","LocalStorage","set","React","useEffect","callback","Focused","x","y","i","j","CleanFocused","classes","Clear","clear","SetValueOptions","Set","SetNumber","setNumber","number","changeOptions","has","delete","add","pressNumber","event","key","pressednumber","parseInt","isNaN","document","addEventListener","removeEventListener","container","justify","className","clsx","map","row","valuex","keyx","item","xs","valuey","keyy","classname","onClick","edge","size","disableRipple","onChange","checked","Text","SudokuPopoverContainer","TransitionProps","placement","style","transformOrigin","onClickAway"],"mappings":"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","file":"static/js/24.05b7b32c.chunk.js","sourcesContent":["import React, { useContext } from 'react';\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nimport Text from '../languages/Language';\r\nimport { BoardContext } from '../ContextProviders/BoardContext';\r\nimport LocalStorage from '../logic/LocalStorage';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const { primary, secondary, getContrastText, background } = theme.palette;\r\n    const light = theme.palette.mode === \"light\";\r\n\r\n    return {\r\n        button: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontSize: \"1em\",\r\n            fontWeight: \"normal\",\r\n            minWidth: 0,\r\n            borderRadius: 0,\r\n            padding: theme.spacing(1.5),\r\n            [theme.breakpoints.up('md')]: {\r\n                padding: theme.spacing(2.5)\r\n            },\r\n            \"&:hover\": {\r\n                backgroundColor: light ? primary.main : primary.light,\r\n                color: primary.contrastText\r\n            },\r\n            color: light ? primary.main : getContrastText(background.paper)\r\n        },\r\n        options: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontWeight: \"normal\",\r\n            margin: 0,\r\n            borderRadius: 0,\r\n            color: light ? primary.main : getContrastText(background.paper),\r\n            \"&:hover\": {\r\n                backgroundColor: light ? primary.main : primary.light,\r\n                color: primary.contrastText\r\n            }\r\n        },\r\n        label: {\r\n            width: 0,\r\n        },\r\n        optioncolor: {\r\n            color: getContrastText(primary.main),\r\n            \"&:hover\": {\r\n                backgroundColor: primary.light,\r\n            }\r\n        },\r\n        optionbackground: {\r\n            backgroundColor: primary.main\r\n        },\r\n        OptionsActiveoption: {\r\n            backgroundColor: secondary.main,\r\n            \"&:hover\": {\r\n                backgroundColor: secondary.light,\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst SudokuPopover = (props) => {\r\n    const { handleClose, field } = props;\r\n    const { OptionsActive, setOptionsActive,HelpActive } = useContext(BoardContext);\r\n    const handleChange = () => {\r\n        LocalStorage.set(\"options_active\", !OptionsActive, 365);\r\n        setOptionsActive(!OptionsActive);\r\n    };\r\n\r\n    React.useEffect(()=>{\r\n        if(HelpActive){\r\n            field.callback.Focused(field.x,field.y,field.i,field.j);\r\n        }else{\r\n            field.callback.CleanFocused();\r\n        }\r\n    },[field,HelpActive]);\r\n    \r\n\r\n    const classes = useStyles();\r\n    const optioncolor = OptionsActive ? classes.optioncolor : \"\";\r\n    const box = [[1, 4, 7], [2, 5, 8], [3, 6, 9]];\r\n    const key = \"popover\";\r\n\r\n    const Clear = () => {\r\n        field.options.clear();\r\n        field.SetValueOptions(new Set(field.options));\r\n        field.SetNumber(\"\");\r\n        field.callback.CleanFocused();\r\n        handleClose();\r\n    }\r\n\r\n    const setNumber = (number) => {\r\n        field.options.clear();\r\n        field.SetValueOptions(new Set(field.options));\r\n        field.SetNumber(number);\r\n        field.callback.CleanFocused();\r\n        handleClose();\r\n    };\r\n\r\n    const changeOptions = (number) => {\r\n        if (field.options.has(number)) {\r\n            field.options.delete(number);\r\n        } else {\r\n            field.options.add(number);\r\n        }\r\n        field.SetValueOptions(new Set(field.options));\r\n    };\r\n\r\n    const pressNumber = (event) => {\r\n        if (event.key === \"Backspace\" || event.key === \"Delete\") {\r\n            Clear();\r\n        } else {\r\n            const pressednumber = parseInt(event.key);\r\n            if (!isNaN(pressednumber)) {\r\n                if (OptionsActive) {\r\n                    changeOptions(pressednumber);\r\n                } else {\r\n                    setNumber(pressednumber);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener(\"keydown\", pressNumber, false);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", pressNumber, false);\r\n        };\r\n    });\r\n\r\n\r\n    return <Grid container justify=\"center\" className={clsx(OptionsActive && classes.optionbackground)} >\r\n        {box.map((row, valuex) => {\r\n            const keyx = key + \"-\" + valuex;\r\n            return <Grid key={keyx} item xs={4}>\r\n                {row.map((number, valuey) => {\r\n                    const keyy = keyx + \",\" + valuey;\r\n                    const classname = clsx(classes.button, optioncolor, OptionsActive && field.options.has(number) ? classes.OptionsActiveoption : \"\");\r\n                    return <Grid key={keyy}>\r\n                        <Button className={classname} onClick={() => OptionsActive ? changeOptions(number) : setNumber(number)}>\r\n                            {number}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        })}\r\n\r\n        <Grid item xs={12}>\r\n            <Grid item xs={12}>\r\n                <Button classes={{ label: classes.label }} className={clsx(classes.options, optioncolor)} onClick={handleChange}>\r\n                    <Switch\r\n                        edge=\"start\"\r\n                        size=\"small\"\r\n                        disableRipple\r\n                        onChange={handleChange}\r\n                        checked={OptionsActive}\r\n                    />\r\n                    {Text('options')}\r\n                </Button>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Button className={clsx(classes.options, optioncolor)} onClick={() => Clear()}>{Text('clear')}</Button>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    </Grid>\r\n}\r\n\r\nconst SudokuPopoverContainer = (props) => {\r\n    const { TransitionProps, placement, handleClose } = props;\r\n    return (\r\n        <Grow {...TransitionProps} style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }} >\r\n            <div>\r\n                <Paper>\r\n                    <ClickAwayListener onClickAway={handleClose}>\r\n                        <div>\r\n                            <SudokuPopover {...props} />\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                </Paper>\r\n            </div>\r\n        </Grow>\r\n    )\r\n}\r\nexport default SudokuPopoverContainer;\r\n"],"sourceRoot":""}