{"version":3,"sources":["logic/LocalStorage.js","logic/SudokuValue.js","logic/SudokuNumber.js","logic/SudokuResolver.js","logic/Sudoku.js","components/header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["LocalStorage","key","default_value","expiration_time","value","JSON","parse","localStorage","getItem","this","set","Date","now","data","setItem","stringify","SudokuValue","x","y","i","j","callback","SetNumber","number","SetValue","Duplicates","undefined","SetFinalNumber","SetValueError","error","SetError","SetValueOptions","options","SetOptions","Set","locked","SudokuNumber","CleanDuplicated","CheckDuplicates","submatrix","checklist","rows","push","verticallines","horizontallines","list","SudokuResolver","n","cacheboard","RandomNumbers","t","console","emptyspaces","index","pos","Math","floor","random","length","current","field","matrix","clear","splice","CreateBoard","deep","Error","Resolve","errorcount","log","message","CreateEmptyBoard","CleanBoard","changes","FillSingleOption","FillByLine","CheckCompleteBoard","clonelist","CloneBoard","randomtry","Random","randomoptions","last","RestoreBoard","e","element","min","CheckOptions","size","values","next","CheckUnique","unique","UniqueList","arr","difference","filter","has","DuplicatesList","delete","t0","performance","t1","EmptySpaces","count","square","MarkDuplicates","vertical","horizontal","duplicated","search","reduce","buttoncolor","pallete","getContrastText","backgroundColor","main","color","border","dark","useStyles","makeStyles","theme","palette","info","success","warning","root","flexGrow","menuButton","marginRight","spacing","title","buttonstar","position","bottom","right","fontSize","borderRadius","light","button1","button2","button3","button4","ButtonAppBar","props","classes","React","useState","get","Difficulty","setDifficulty","board","ResetBoard","newboard","Save","useEffect","window","addEventListener","removeEventListener","className","AppBar","Toolbar","Typography","variant","ButtonGroup","Button","onClick","Container","children","Home","lazy","baseboard","App","fallback","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.920680c5.chunk.js","sourcesContent":["class LocalStorage {\r\n    // 1 day default \r\n    static get(key, default_value = null, expiration_time = 1) {\r\n        var value = JSON.parse(localStorage.getItem(key));\r\n        if (value == null) {\r\n            this.set(key, default_value, expiration_time);\r\n        } else {\r\n            if (value.expiration_time < Date.now()) {\r\n                this.set(key, default_value, expiration_time);\r\n            } else {\r\n                return value.data;\r\n            }\r\n        }\r\n\r\n        return default_value;\r\n    }\r\n    static set(key, value, expiration_time = 1) {\r\n        if (value != null) {\r\n            expiration_time = Date.now() + expiration_time * 24 * 60 * 60 * 1000;\r\n            localStorage.setItem(key, JSON.stringify({\r\n                data: value,\r\n                expiration_time: expiration_time\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default LocalStorage;","class SudokuValue {\r\n    constructor(x, y, i, j, callback) {\r\n        this.number = \"\";\r\n        this.options = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        this.x = x;\r\n        this.y = y;\r\n        this.i = i;\r\n        this.j = j;\r\n        this.locked = false;\r\n        this.callback = callback;\r\n        this.error = false;\r\n    }\r\n\r\n    SetNumber = (number) => {\r\n        this.SetValue(number);\r\n        //this.options.clear();\r\n        this.callback.Duplicates();\r\n    }\r\n    SetValue = (number) => {\r\n        if (this.SetFinalNumber !== undefined) {\r\n            this.SetFinalNumber(number);\r\n        }\r\n        this.number = number;\r\n    }\r\n    SetValueError = (error) => {\r\n        if (this.SetError !== undefined) {\r\n            this.SetError(error);\r\n        }\r\n        this.error = error;\r\n    }\r\n    SetValueOptions = (options) => {\r\n        if (this.SetOptions !== undefined) {\r\n            this.SetOptions(options);\r\n        }\r\n        this.options = options;\r\n    }\r\n}\r\n\r\nexport default SudokuValue;","import SudokuValue from './SudokuValue';\r\n\r\nclass SudokuNumber {\r\n    constructor(x, y, callback) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.callback = callback;\r\n        this.submatrix = [];\r\n        this.checklist = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            let rows = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                rows[j] = new SudokuValue(x, y, i, j, this);\r\n                this.checklist.push(rows[j]);\r\n                this.callback.verticallines[x][i].push(rows[j]);\r\n                this.callback.horizontallines[y][j].push(rows[j]);\r\n                this.callback.list.push(rows[j]);\r\n            }\r\n            this.submatrix[i] = rows;\r\n        }\r\n    }\r\n    Duplicates = () => {\r\n        this.callback.CleanDuplicated();\r\n        this.callback.CheckDuplicates();\r\n    }\r\n}\r\n\r\nexport default SudokuNumber;","import Sudoku from './Sudoku';\r\n\r\nclass SudokuResolver extends Sudoku {\r\n    constructor(n, cacheboard = null) {\r\n        super();\r\n        this.errorcount = 0;\r\n        if (cacheboard === null) {\r\n            var t0 = performance.now();\r\n            this.CreateBoard(n);\r\n            var t1 = performance.now();\r\n            console.log(\"Call to CreateSudoku took \" + (t1 - t0) + \" milliseconds.\");\r\n        } else {\r\n            this.RestoreBoard(cacheboard);\r\n        }\r\n    }\r\n    RandomNumbers = (number) => {\r\n        const t = this;\r\n        if (number > 81 || number < 1) {\r\n            throw console.error(\"number out of range\");\r\n        }\r\n        const emptyspaces = [...t.emptyspaces];\r\n        for (let index = 0; index < number; index++) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.SetValue(Math.floor(1 + Math.random() * 8));\r\n            t.CleanDuplicated();\r\n            const duplicated = t.CheckDuplicates();\r\n            if (duplicated > 0) {\r\n                field.number = \"\";\r\n                index--;\r\n                continue;\r\n            }\r\n\r\n            field.locked = true;\r\n            field.options.clear();\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n    }\r\n\r\n    CreateBoard = (n, deep = 0) => {\r\n        const t = this;\r\n        if (n > 81 || n < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        t.RandomNumbers(27);\r\n\r\n        try {\r\n            t.Resolve();\r\n        } catch (error) {\r\n            t.errorcount += 1;\r\n            console.log(error.message, t.errorcount, \"deep:\", deep);\r\n            t.CreateEmptyBoard();\r\n            t.CreateBoard(n, deep + 1);\r\n        }\r\n        if (deep === 0) {\r\n            t.CleanBoard(n);\r\n        }\r\n    }\r\n    CleanBoard = (n) => {\r\n        const t = this;\r\n        if (n > 81 || n < 1) {\r\n            throw console.error(\"number out of range\");\r\n        }\r\n        const emptyspaces = t.emptyspaces;\r\n        for (let index = 0; index < n; index++) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.locked = true;\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n\r\n        for (let index = 0; index < emptyspaces.length; index++) {\r\n            const current = emptyspaces[index];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.locked = false;\r\n            field.number = \"\";\r\n        }\r\n\r\n    }\r\n\r\n    Resolve = (deep = 0) => {\r\n        const t = this;\r\n        let changes = 1;\r\n        while (changes > 0) {\r\n            changes = 0;\r\n            changes += t.FillSingleOption(); // check if there are any field with only one option and use it\r\n            if (changes === 0) {\r\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\r\n            }\r\n        }\r\n\r\n        if (!t.CheckCompleteBoard()) {\r\n            const clonelist = t.CloneBoard();\r\n            const randomtry = t.Random();\r\n            let randomoptions = [...randomtry.options];\r\n            randomtry.number = randomoptions[0];\r\n            let last = 0;\r\n            let i = 0;\r\n            while (!t.CheckCompleteBoard() && randomtry.number !== last && randomtry.number !== undefined) {\r\n                last = randomtry.number;\r\n                t.RestoreBoard(clonelist);\r\n                randomtry.number = last;\r\n                try {\r\n                    t.Resolve(deep + 1);\r\n                } catch (error) {\r\n                    console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\r\n                } finally {\r\n                    if (randomoptions !== randomtry.options) {\r\n                        randomoptions = [...randomtry.options];\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                    randomtry.number = randomoptions[i];\r\n                }\r\n            }\r\n            if (!t.CheckCompleteBoard()) {\r\n                t.Resolve();\r\n            } else {\r\n                randomtry.SetValue(randomtry.number);\r\n                randomtry.options.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    CloneBoard = () => {\r\n        const t = this;\r\n        let clonelist = [];\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const e = t.list[i];\r\n            clonelist.push({ x: e.x, y: e.y, i: e.i, j: e.j, number: e.number, options: [...e.options], locked: e.locked, error: e.error });\r\n        }\r\n        return clonelist;\r\n    }\r\n    RestoreBoard = (clonelist) => {\r\n        const t = this;\r\n        for (let index = 0; index < clonelist.length; index++) {\r\n            const e = clonelist[index];\r\n            const element = t.matrix[e.x][e.y].submatrix[e.i][e.j];\r\n            element.SetValue(e.number);\r\n            element.SetValueOptions(new Set(e.options));\r\n            element.locked = e.locked;\r\n            element.SetValueError(e.error);\r\n        }\r\n    }\r\n\r\n    CheckCompleteBoard = () => {\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    Random = (min = 3) => {\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                t.CheckOptions(element);\r\n                if (element.options.size < min) {\r\n                    return element;\r\n                }\r\n            }\r\n        }\r\n        return t.Random(min + 1);\r\n    }\r\n\r\n\r\n    FillSingleOption = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                t.CheckOptions(element);\r\n                if (element.options.size === 1) {\r\n                    element.SetValue(element.options.values().next().value);\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    FillByLine = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                if (t.CheckUnique(element)) {\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    CheckUnique = (number) => {\r\n        const t = this;\r\n        let unique = 0;\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        unique = t.UniqueList(t.matrix[x][y].checklist, number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.verticallines[x][i], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.horizontallines[y][j], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    UniqueList = (arr, number) => {\r\n        const t = this;\r\n        let options = new Set();\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number === \"\" && element !== number) {\r\n                t.CheckOptions(element);\r\n                options = new Set([...options, ...element.options]);\r\n            }\r\n        }\r\n        t.CheckOptions(number);\r\n        let difference = new Set([...number.options].filter(x => !options.has(x)));\r\n        if (difference.size === 1) {\r\n            return difference.values().next().value;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    CheckOptions = (number) => {\r\n        const t = this;\r\n        let list = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        t.DuplicatesList(t.matrix[x][y].checklist, list);\r\n        t.DuplicatesList(t.verticallines[x][i], list);\r\n        t.DuplicatesList(t.horizontallines[y][j], list);\r\n        number.options = list;\r\n    }\r\n\r\n    DuplicatesList = (arr, list) => {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number !== \"\") {\r\n                list.delete(element.number);\r\n            }\r\n        }\r\n        if (list.size === 0) {\r\n            throw Error(\"Empty options\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default SudokuResolver;","import SudokuNumber from './SudokuNumber';\r\n\r\n\r\n\r\nclass Sudoku {\r\n    constructor() { //creates an empty sudoku board\r\n        this.CreateEmptyBoard();\r\n    }\r\n\r\n    CreateEmptyBoard = () => {\r\n        this.matrix = [];\r\n        this.emptyspaces = [];\r\n        this.verticallines = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ]; //3x3 vertical lines\r\n        this.horizontallines = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ]; //3x3 horizontal lines\r\n        this.list = []; //complete list\r\n        for (let x = 0; x < 3; x++) {\r\n            let rows = [];\r\n            for (let y = 0; y < 3; y++) {\r\n                rows[y] = new SudokuNumber(x, y, this);\r\n                this.EmptySpaces(x, y);\r\n            }\r\n            this.matrix[x] = rows;\r\n        }\r\n    }\r\n\r\n\r\n    CleanDuplicated = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            element.SetValueError(false);\r\n        }\r\n    }\r\n\r\n\r\n    CheckDuplicates = () => {\r\n        let count = 0;\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                const square = this.matrix[i][j].checklist;\r\n                count += this.MarkDuplicates(square);\r\n\r\n                const vertical = this.verticallines[i][j];\r\n                count += this.MarkDuplicates(vertical);\r\n\r\n                const horizontal = this.horizontallines[i][j];\r\n                count += this.MarkDuplicates(horizontal);\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n\r\n    MarkDuplicates = (arr) => {\r\n        let count = 0;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (this.duplicated(arr, element.number)) {\r\n                element.SetValueError(true);\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    duplicated = (arr, search) => {\r\n        let count = arr.reduce(function(n, element) {\r\n            return n + (search !== \"\" && element.number === search);\r\n        }, 0);\r\n        return (count > 1);\r\n    }\r\n\r\n    EmptySpaces = (x, y) => {\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                this.emptyspaces.push([x, y, i, j]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sudoku;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\n\r\n\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\nimport SudokuResolver from \"../logic/SudokuResolver\";\r\nimport LocalStorage from \"../logic/LocalStorage\";\r\n\r\n\r\nconst buttoncolor = (pallete, getContrastText) => {\r\n    return {\r\n        backgroundColor: pallete.main,\r\n        color: getContrastText(pallete.main),\r\n        border: \"none\",\r\n        '&:hover': {\r\n            backgroundColor: pallete.dark,\r\n            color: getContrastText(pallete.dark),\r\n            border: \"none\",\r\n        },\r\n    }\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const { info, success, warning, error, getContrastText } = theme.palette;\r\n\r\n    return {\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        buttonstar: {\r\n            position: \"absolute\",\r\n            bottom: theme.spacing(0.25),\r\n            right: theme.spacing(0.25),\r\n            fontSize: \"0.75rem\",\r\n            borderRadius:\"100%\",\r\n            backgroundColor:\"white\",\r\n            color:warning.light\r\n        },\r\n        button1: buttoncolor(info, getContrastText),\r\n        button2: buttoncolor(success, getContrastText),\r\n        button3: buttoncolor(warning, getContrastText),\r\n        button4: buttoncolor(error, getContrastText)\r\n    }\r\n\r\n}\r\n\r\n\r\n);\r\n\r\nexport default function ButtonAppBar(props) {\r\n    const classes = useStyles();\r\n    const [Difficulty, setDifficulty] = React.useState(LocalStorage.get(\"difficulty\", 45));\r\n    const { board } = props;\r\n    console.log(board);\r\n    function ResetBoard(n) {\r\n        const newboard = new SudokuResolver(n);\r\n        setDifficulty(n);\r\n        board.RestoreBoard(newboard.CloneBoard());\r\n    }\r\n    const Save = () => {\r\n        LocalStorage.set(\"difficulty\", Difficulty);\r\n    }\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"beforeunload\", Save);\r\n        return () => window.removeEventListener(\"beforeunload\", Save);\r\n    });\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton> */}\r\n                    <Typography variant=\"h6\" className={classes.title}> Sudoku </Typography>\r\n\r\n                    <ButtonGroup size=\"small\">\r\n                        <Button className={classes.button1} onClick={() => ResetBoard(63)}>\r\n                            <EmojiEmotionsIcon />\r\n                            {Difficulty === 63 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                        </Button>\r\n                        <Button className={classes.button2} onClick={() => ResetBoard(45)}>\r\n                            <InsertEmoticonIcon />\r\n                            {Difficulty === 45 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                        </Button>\r\n                        <Button className={classes.button3} onClick={() => ResetBoard(36)}>\r\n                            <FaceIcon />\r\n                            {Difficulty === 36 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                        </Button>\r\n                        <Button className={classes.button4} onClick={() => ResetBoard(27)}>\r\n                            <MoodBadIcon />\r\n                            {Difficulty === 27 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                        </Button>\r\n                    </ButtonGroup>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n            <Container>\r\n                {props.children}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","// import React from 'react';\nimport Header from './components/header';\n// import Home from './pages/Home';\n\nimport SudokuResolver from \"./logic/SudokuResolver\";\nimport LocalStorage from \"./logic/LocalStorage\";\n\n\n\nimport React, { lazy, Suspense } from 'react';\nconst Home = lazy(() => import('./pages/Home'));\nconst renderLoader = () => null;\n\n\nconst cacheboard = LocalStorage.get(\"sudoku_board\", null);\nconst baseboard = new SudokuResolver(45, cacheboard);\n\n\nfunction App() {\n    return (\n        <Header board={baseboard}>\n            <Suspense fallback={renderLoader()}>\n                <Home board={baseboard} />\n            </Suspense>\n        </Header>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: {\n                'Service-Worker': 'script'\n            },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n\nserviceWorker.register();"],"sourceRoot":""}