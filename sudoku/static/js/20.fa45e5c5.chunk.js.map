{"version":3,"sources":["../node_modules/@material-ui/core/List/ListContext.js","../node_modules/@material-ui/core/transitions/utils.js","../node_modules/react-transition-group/esm/config.js","../node_modules/react-transition-group/esm/Transition.js","components/buttons/ServiceWorker.jsx","../node_modules/@material-ui/core/Slide/Slide.js"],"names":["ListContext","React","reflow","node","scrollTop","getTransitionProps","props","options","timeout","style","duration","transitionDuration","mode","delay","transitionDelay","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","Transition","_React$Component","context","_this","call","this","initialStatus","appear","isMounting","enter","appearStatus","in","unmountOnExit","mountOnEnter","state","status","nextCallback","_inheritsLoose","getDerivedStateFromProps","_ref","prevState","_proto","prototype","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","exit","undefined","mounting","performEnter","performExit","setState","_this2","appearing","_ref2","nodeRef","ReactDOM","findDOMNode","maybeNode","maybeAppearing","timeouts","enterTimeout","config","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExit","onExiting","onExited","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","current","doesNotHaveTimeoutOrListener","addEndListener","_ref3","maybeNextCallback","setTimeout","render","_this$props","children","childProps","_objectWithoutPropertiesLoose","createElement","TransitionGroupContext","Provider","value","cloneElement","Children","only","Component","noop","contextType","propTypes","defaultProps","useStyles","makeStyles","theme","update","backgroundColor","palette","info","main","color","contrastText","light","install","success","handleUpdate","setMessage","waitingServiceWorker","postMessage","type","ServiceWorkerSnackbar","useContext","ServiceWorkerContext","Message","useState","open","setOpen","handleClose","reason","alertmessage","severity","action","button","Text","text","onClose","anchorOrigin","vertical","horizontal","TransitionComponent","direction","elevation","variant","Fragment","size","onClick","fontSize","ServiceWorkerList","classes","installPrompt","prompt","userChoice","then","choiceResult","outcome","console","log","handleInstall","icon","GetAppIcon","RefreshIcon","className","primary","ServiceWorker","setTranslateValue","transform","rect","getBoundingClientRect","containerWindow","ownerWindow","fakeTransform","computedStyle","getComputedStyle","getPropertyValue","offsetX","offsetY","transformValues","split","parseInt","innerWidth","left","width","innerHeight","top","height","getTranslateValue","webkitTransform","defaultTimeout","enteringScreen","leavingScreen","Slide","ref","inProp","other","useTheme","childrenRef","handleRefIntermediary","useForkRef","handleRef","normalizedTransitionCallback","isAppearing","handleEnter","handleEntering","transitionProps","webkitTransition","transitions","create","_extends","easing","easeOut","transition","handleEntered","handleExiting","handleExit","sharp","handleExited","updatePosition","handleResize","debounce","addEventListener","clear","removeEventListener","visibility"],"mappings":"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","file":"static/js/20.fa45e5c5.chunk.js","sourcesContent":["import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nconst ListContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  ListContext.displayName = 'ListContext';\n}\n\nexport default ListContext;","export const reflow = node => node.scrollTop;\nexport function getTransitionProps(props, options) {\n  const {\n    timeout,\n    style = {}\n  } = props;\n  return {\n    duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,\n    delay: style.transitionDelay\n  };\n}","export default {\n  disabled: false\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : PropTypes.instanceOf(Element)\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","import React from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/core/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\n\r\nimport Text from '../../languages/Language';\r\nimport { ServiceWorkerContext } from '../../ContextProviders/ServiceWorkerContext';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    update: {\r\n        backgroundColor:theme.palette.info.main,\r\n        color:theme.palette.info.contrastText,\r\n        \"&:hover\":{\r\n            backgroundColor:theme.palette.info.light,\r\n        }\r\n    },\r\n    install: {\r\n        backgroundColor:theme.palette.success.main,\r\n        color:theme.palette.success.contrastText,\r\n        \"&:hover\":{\r\n            backgroundColor:theme.palette.success.light,\r\n        }\r\n    },\r\n}\r\n));\r\n\r\n\r\n\r\nconst handleUpdate = (props) => {\r\n    const { setMessage, waitingServiceWorker } = props;\r\n    if (waitingServiceWorker) {\r\n        // We send the SKIP_WAITING message to tell the Service Worker\r\n        // to update its cache and flush the old one\r\n        waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\r\n    }\r\n    setMessage(\"\");\r\n};\r\n\r\nconst handleInstall = (props) => {\r\n    const { setMessage, installPrompt } = props;\r\n    if (installPrompt) {\r\n        installPrompt.prompt();\r\n        // Wait for the user to respond to the prompt\r\n        installPrompt.userChoice.then((choiceResult) => {\r\n            if (choiceResult.outcome === 'accepted') {\r\n                console.log('User accepted the install prompt');\r\n            } else {\r\n                console.log('User dismissed the install prompt');\r\n            }\r\n        });\r\n    }\r\n    setMessage(\"\");\r\n};\r\n\r\n\r\nconst ServiceWorkerSnackbar = () => {\r\n    const context = React.useContext(ServiceWorkerContext);\r\n    const { Message } = context;\r\n    const [open, setOpen] = React.useState(true);\r\n    if(Message===\"\" || Message===\"INSTALL\") return null;\r\n\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    let alertmessage = {};\r\n    // if (Message === \"INSTALL\") {\r\n        // alertmessage = {\r\n        //     severity: \"success\",\r\n        //     action: () => handleInstall(context),\r\n        //     button: Text(\"install\"),\r\n        //     text: Text(\"app-available\")\r\n        // }\r\n    // }\r\n    if (Message === \"UPDATE\") {\r\n        alertmessage = {\r\n            severity: \"info\",\r\n            action: () => handleUpdate(context),\r\n            button: Text(\"update\"),\r\n            text: Text(\"update-available\")\r\n        }\r\n    } else if (Message === \"OFFLINE\") {\r\n        alertmessage = {\r\n            severity: \"success\",\r\n            action: null,\r\n            button: null,\r\n            text: Text(\"offline-available\")\r\n        }\r\n    }\r\n\r\n    const transition = (props) => <Slide {...props} direction=\"up\" />;\r\n    return <Snackbar\r\n        open={open}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n        TransitionComponent={transition}\r\n    >\r\n        <Alert elevation={6} variant=\"filled\" severity={alertmessage.severity}\r\n            action={alertmessage.action !== null &&\r\n                <React.Fragment>\r\n                    <Button color=\"inherit\" size=\"small\" onClick={alertmessage.action}>  {alertmessage.button} </Button>\r\n                    <IconButton color=\"inherit\" size=\"small\" onClick={handleClose}>\r\n                        <CloseIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                </React.Fragment>\r\n            } >\r\n            {alertmessage.text}\r\n        </Alert>\r\n    </Snackbar>\r\n}\r\n\r\n\r\n\r\nconst ServiceWorkerList = () => {\r\n    const classes = useStyles();\r\n    const context = React.useContext(ServiceWorkerContext);\r\n    const { Message } = context;\r\n    let alertmessage = {};\r\n\r\n    if (Message === \"INSTALL\") {\r\n        alertmessage = {\r\n            action: () => handleInstall(context),\r\n            text: Text(\"install\"),\r\n            icon: GetAppIcon,\r\n            color: classes.install\r\n        }\r\n    } else if (Message === \"UPDATE\") {\r\n        alertmessage = {\r\n            action: () => handleUpdate(context),\r\n            text: Text(\"update\"),\r\n            icon: RefreshIcon,\r\n            color: classes.update\r\n        }\r\n    }\r\n\r\n    return (Message !== \"OFFLINE\" && Message !== \"\") ?\r\n        (\r\n            <ListItem button key={alertmessage.text} onClick={alertmessage.action} className={alertmessage.color} >\r\n                <ListItemIcon> <alertmessage.icon /> </ListItemIcon>\r\n                <ListItemText primary={alertmessage.text} />\r\n            </ListItem>\r\n        )\r\n        : null\r\n}\r\n\r\n\r\n\r\nconst ServiceWorker = ({ mode = \"snackbar\" }) => {\r\n    if (mode === \"snackbar\") {\r\n        return <ServiceWorkerSnackbar />;\r\n    } else {\r\n        return <ServiceWorkerList />;\r\n    }\r\n};\r\n\r\nexport default ServiceWorker;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { elementAcceptingRef } from '@material-ui/utils';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\nimport useTheme from '../styles/useTheme';\nimport { duration } from '../styles/transitions';\nimport { reflow, getTransitionProps } from '../transitions/utils';\nimport { ownerWindow } from '../utils'; // Translate the node so he can't be seen on the screen.\n// Later, we gonna translate back the node to his original location\n// with `none`.`\n\nfunction getTranslateValue(direction, node) {\n  const rect = node.getBoundingClientRect();\n  const containerWindow = ownerWindow(node);\n  let transform;\n\n  if (node.fakeTransform) {\n    transform = node.fakeTransform;\n  } else {\n    const computedStyle = containerWindow.getComputedStyle(node);\n    transform = computedStyle.getPropertyValue('-webkit-transform') || computedStyle.getPropertyValue('transform');\n  }\n\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (transform && transform !== 'none' && typeof transform === 'string') {\n    const transformValues = transform.split('(')[1].split(')')[0].split(',');\n    offsetX = parseInt(transformValues[4], 10);\n    offsetY = parseInt(transformValues[5], 10);\n  }\n\n  if (direction === 'left') {\n    return `translateX(${containerWindow.innerWidth}px) translateX(${offsetX - rect.left}px)`;\n  }\n\n  if (direction === 'right') {\n    return `translateX(-${rect.left + rect.width - offsetX}px)`;\n  }\n\n  if (direction === 'up') {\n    return `translateY(${containerWindow.innerHeight}px) translateY(${offsetY - rect.top}px)`;\n  } // direction === 'down'\n\n\n  return `translateY(-${rect.top + rect.height - offsetY}px)`;\n}\n\nexport function setTranslateValue(direction, node) {\n  const transform = getTranslateValue(direction, node);\n\n  if (transform) {\n    node.style.webkitTransform = transform;\n    node.style.transform = transform;\n  }\n}\nconst defaultTimeout = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\n/**\n * The Slide transition is used by the [Drawer](/components/drawers/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nconst Slide = /*#__PURE__*/React.forwardRef(function Slide(props, ref) {\n  const {\n    appear = true,\n    children,\n    direction = 'down',\n    in: inProp,\n    onEnter,\n    onEntered,\n    onEntering,\n    onExit,\n    onExited,\n    onExiting,\n    style,\n    timeout = defaultTimeout,\n    // eslint-disable-next-line react/prop-types\n    TransitionComponent = Transition\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"appear\", \"children\", \"direction\", \"in\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"style\", \"timeout\", \"TransitionComponent\"]);\n\n  const theme = useTheme();\n  const childrenRef = React.useRef(null);\n  const handleRefIntermediary = useForkRef(children.ref, childrenRef);\n  const handleRef = useForkRef(handleRefIntermediary, ref);\n\n  const normalizedTransitionCallback = callback => isAppearing => {\n    if (callback) {\n      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.\n      if (isAppearing === undefined) {\n        callback(childrenRef.current);\n      } else {\n        callback(childrenRef.current, isAppearing);\n      }\n    }\n  };\n\n  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {\n    setTranslateValue(direction, node);\n    reflow(node);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  });\n  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {\n    const transitionProps = getTransitionProps({\n      timeout,\n      style\n    }, {\n      mode: 'enter'\n    });\n    node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends({}, transitionProps, {\n      easing: theme.transitions.easing.easeOut\n    }));\n    node.style.transition = theme.transitions.create('transform', _extends({}, transitionProps, {\n      easing: theme.transitions.easing.easeOut\n    }));\n    node.style.webkitTransform = 'none';\n    node.style.transform = 'none';\n\n    if (onEntering) {\n      onEntering(node, isAppearing);\n    }\n  });\n  const handleEntered = normalizedTransitionCallback(onEntered);\n  const handleExiting = normalizedTransitionCallback(onExiting);\n  const handleExit = normalizedTransitionCallback(node => {\n    const transitionProps = getTransitionProps({\n      timeout,\n      style\n    }, {\n      mode: 'exit'\n    });\n    node.style.webkitTransition = theme.transitions.create('-webkit-transform', _extends({}, transitionProps, {\n      easing: theme.transitions.easing.sharp\n    }));\n    node.style.transition = theme.transitions.create('transform', _extends({}, transitionProps, {\n      easing: theme.transitions.easing.sharp\n    }));\n    setTranslateValue(direction, node);\n\n    if (onExit) {\n      onExit(node);\n    }\n  });\n  const handleExited = normalizedTransitionCallback(node => {\n    // No need for transitions when the component is hidden\n    node.style.webkitTransition = '';\n    node.style.transition = '';\n\n    if (onExited) {\n      onExited(node);\n    }\n  });\n  const updatePosition = React.useCallback(() => {\n    if (childrenRef.current) {\n      setTranslateValue(direction, childrenRef.current);\n    }\n  }, [direction]);\n  React.useEffect(() => {\n    // Skip configuration where the position is screen size invariant.\n    if (inProp || direction === 'down' || direction === 'right') {\n      return undefined;\n    }\n\n    const handleResize = debounce(() => {\n      if (childrenRef.current) {\n        setTranslateValue(direction, childrenRef.current);\n      }\n    });\n    const containerWindow = ownerWindow(childrenRef.current);\n    containerWindow.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n    };\n  }, [direction, inProp]);\n  React.useEffect(() => {\n    if (!inProp) {\n      // We need to update the position of the drawer when the direction change and\n      // when it's hidden.\n      updatePosition();\n    }\n  }, [inProp, updatePosition]);\n  return /*#__PURE__*/React.createElement(TransitionComponent, _extends({\n    nodeRef: childrenRef,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: handleExited,\n    onExiting: handleExiting,\n    appear: appear,\n    in: inProp,\n    timeout: timeout\n  }, other), (state, childProps) => {\n    return /*#__PURE__*/React.cloneElement(children, _extends({\n      ref: handleRef,\n      style: _extends({\n        visibility: state === 'exited' && !inProp ? 'hidden' : undefined\n      }, style, children.props.style)\n    }, childProps));\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Slide.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef,\n\n  /**\n   * Direction the child node will enter from.\n   * @default 'down'\n   */\n  direction: PropTypes.oneOf(['down', 'left', 'right', 'up']),\n\n  /**\n   * If `true`, show the component; triggers the enter or exit animation.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: duration.enteringScreen,\n   *   exit: duration.leavingScreen,\n   * }\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })])\n} : void 0;\nexport default Slide;"],"sourceRoot":""}