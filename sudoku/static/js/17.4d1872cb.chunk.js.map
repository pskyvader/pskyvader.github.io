{"version":3,"sources":["../node_modules/@material-ui/core/List/ListContext.js","components/buttons/DifficultyButtons.jsx","../node_modules/@material-ui/core/List/List.js"],"names":["ListContext","React","buttoncolor","pallete","getContrastText","backgroundColor","main","color","border","dark","useStyles","makeStyles","theme","palette","info","success","warning","error","buttonstar","position","bottom","spacing","right","fontSize","borderRadius","light","button1","button2","button3","button4","DifficultyButtons","props","mode","useContext","BoardContext","Difficulty","ResetBoard","setDifficulty","Reset","number","classes","difficultylist","text","Text","class","icon","EmojiEmotionsIcon","InsertEmoticonIcon","FaceIcon","MoodBadIcon","size","map","e","title","className","onClick","button","selected","primary","edge","disableRipple","checked","List","ref","children","component","Component","dense","disablePadding","subheader","other","_objectWithoutPropertiesLoose","context","Provider","value","_extends","clsx","root","padding","withStyles","listStyle","margin","paddingTop","paddingBottom","name"],"mappings":"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","file":"static/js/17.4d1872cb.chunk.js","sourcesContent":["import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nconst ListContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  ListContext.displayName = 'ListContext';\n}\n\nexport default ListContext;","import React, { useContext } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Radio from \"@material-ui/core/Radio\";\r\n\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\n\r\n\r\nimport Text from '../../languages/Language';\r\n\r\nimport { BoardContext } from '../../ContextProviders/BoardContext';\r\n\r\nconst buttoncolor = (pallete, getContrastText) => {\r\n    return {\r\n        backgroundColor: pallete.main,\r\n        color: getContrastText(pallete.main),\r\n        border: \"none\",\r\n        '&:hover': {\r\n            backgroundColor: pallete.dark,\r\n            color: getContrastText(pallete.dark),\r\n            border: \"none\",\r\n        },\r\n    }\r\n}\r\nconst useStyles = makeStyles((theme) => {\r\n    const { info, success, warning, error, getContrastText } = theme.palette;\r\n    return {\r\n        buttonstar: {\r\n            position: \"absolute\",\r\n            bottom: theme.spacing(0.25),\r\n            right: theme.spacing(0.25),\r\n            fontSize: \"0.75rem\",\r\n            borderRadius: \"100%\",\r\n            backgroundColor: \"white\",\r\n            color: warning.light\r\n        },\r\n        button1: buttoncolor(info, getContrastText),\r\n        button2: buttoncolor(success, getContrastText),\r\n        button3: buttoncolor(warning, getContrastText),\r\n        button4: buttoncolor(error, getContrastText)\r\n    }\r\n});\r\n\r\nconst DifficultyButtons = (props) => {\r\n    const { mode = \"button\" } = props;\r\n    const { Difficulty, ResetBoard,setDifficulty } = useContext(BoardContext);\r\n\r\n    const Reset = (number) => {\r\n        setDifficulty(0);\r\n        ResetBoard(number);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const difficultylist = [\r\n        { number: 1, text: Text('veryeasymode'), class: classes.button1, icon: EmojiEmotionsIcon },\r\n        { number: 2, text: Text('easymode'), class: classes.button2, icon: InsertEmoticonIcon },\r\n        { number: 3, text: Text('mediummode'), class: classes.button3, icon: FaceIcon },\r\n        { number: 4, text: Text('hardmode'), class: classes.button4, icon: MoodBadIcon }\r\n    ]\r\n\r\n\r\n    // const textloading = Text('loading');\r\n    // if (Loading && Difficulty <= 20) {\r\n    //     return textloading\r\n    // }\r\n    if (mode === \"button\") {\r\n        return <ButtonGroup size=\"small\">\r\n            {difficultylist.map((e) => (\r\n                <Tooltip key={e.text} title={e.text}>\r\n                    <Button className={e.class} onClick={() => Reset(e.number)}>\r\n                        <e.icon />\r\n                        {Difficulty === e.number ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                    </Button>\r\n                </Tooltip>\r\n            ))}\r\n        </ButtonGroup>\r\n    } else {\r\n        return <List>\r\n            {difficultylist.map((e) => (\r\n                <ListItem button key={e.text} onClick={() => Reset(e.number)} selected={Difficulty === e.number}>\r\n                    <ListItemIcon> <e.icon /></ListItemIcon>\r\n                    <ListItemText primary={e.text} />\r\n                    <Radio\r\n                        edge=\"end\"\r\n                        size=\"small\"\r\n                        disableRipple checked={Difficulty === e.number} />\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default DifficultyButtons;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from './ListContext';\nexport const styles = {\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative'\n  },\n\n  /* Styles applied to the root element unless `disablePadding={true}`. */\n  padding: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n\n  /* Styles applied to the root element if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if a `subheader` is provided. */\n  subheader: {\n    paddingTop: 0\n  }\n};\nconst List = /*#__PURE__*/React.forwardRef(function List(props, ref) {\n  const {\n    children,\n    classes,\n    className,\n    component: Component = 'ul',\n    dense = false,\n    disablePadding = false,\n    subheader\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"component\", \"dense\", \"disablePadding\", \"subheader\"]);\n\n  const context = React.useMemo(() => ({\n    dense\n  }), [dense]);\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),\n    ref: ref\n  }, other), subheader, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, vertical padding is removed from the list.\n   * @default false\n   */\n  disablePadding: PropTypes.bool,\n\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiList'\n})(List);"],"sourceRoot":""}