{"version":3,"sources":["languages/Language.jsx","logic/SudokuValue.js","logic/SudokuNumber.js","logic/SudokuResolver.js","logic/Sudoku.js","ContextProviders/BoardContext.jsx","ContextProviders/ThemeContext.jsx","serviceWorker.js","ContextProviders/ServiceWorkerContext.jsx","logic/LocalStorage.js","languages lazy /^/.*/.json$/ groupOptions: {} namespace object","components/Header.jsx","App.jsx","index.js"],"names":["languageOptions","en","es","dictionaryList","browserlanguage","navigator","language","userLanguage","substring","userLang","LocalStorage","get","defaultlanguage","loadlanguage","lang","a","then","l","default","LanguageContext","createContext","dictionary","LanguageProvider","children","useState","setUserLanguage","dictionaryloaded","setdictionaryloaded","selectedLanguage","React","useEffect","provider","userLanguageChange","selected","newLanguage","set","Provider","value","Text","tid","useContext","SudokuValue","x","y","i","j","callback","SetNumber","number","SetValue","Duplicates","undefined","SetFinalNumber","SetValueError","error","SetError","SetValueOptions","options","SetOptions","this","Set","locked","SudokuNumber","CleanDuplicated","CheckDuplicates","CheckEmpty","CheckSuccess","submatrix","checklist","rows","push","verticallines","horizontallines","list","SudokuResolver","n","cacheboard","newboard","RandomNumbers","t","Error","emptyspaces","index","pos","Math","floor","random","length","current","field","matrix","clear","splice","CreateBoard","deep","t0","performance","now","Resolve","errorcount","CreateEmptyBoard","fullboard","CloneBoard","CleanBoard","t1","console","log","difficultycount","removed","tmp","clonelist","solutions","ResolveUnique","RestoreBoard","changes","FillSingleOption","FillByLine","CheckCompleteBoard","randomtry","Random","randomoptions","last","sol","arrayEquals","min","element","CheckOptions","size","values","next","CheckUnique","unique","UniqueList","arr","difference","filter","has","success","EmptySpaces","SetSuccessValue","setSuccess","count","square","MarkDuplicates","vertical","horizontal","isDuplicated","search","reduce","b","Array","isArray","every","val","e","DuplicatesList","delete","BoardContext","BoardContextProvider","Difficulty","setDifficulty","Loading","setLoading","OptionsActive","setOptionsActive","board","Success","Save","SaveBoard","fn","ms","timer","clearTimeout","setTimeout","apply","arguments","debounce","ResetBoard","depth","best_solution","remaining","worst","ThemeContext","DefaultColor","primary","light","indigo","dark","secondary","purple","ThemeContextProvider","useMediaQuery","DarkMode","SetDarkMode","SelectedColor","SetSelectedColor","theme","useMemo","createMuiTheme","palette","main","type","components","MuiListItem","styleOverrides","button","backgroundColor","Grey","SwitchDarkMode","SetColor","color","newcolor","ResetColor","isLocalhost","Boolean","window","location","hostname","match","register","config","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ServiceWorkerContext","ServiceWorkerProvider","Message","setMessage","waitingServiceWorker","setWaitingServiceWorker","installPrompt","setinstallPrompt","onOpen","waiting","localStorage","preventDefault","event","target","key","default_value","expiration_time","JSON","parse","getItem","Date","data","setItem","stringify","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","code","ids","id","keys","Object","module","exports","DifficultyButtons","lazy","DarkModeButton","Drawer","Container","useStyles","makeStyles","root","flexGrow","margin","marginRight","spacing","breakpoints","down","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","up","width","marginLeft","easeOut","enteringScreen","ButtonAppBar","props","classes","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","desktopOpen","setdesktopOpen","handleDesktopDrawerToggle","dispatchEvent","Event","className","AppBar","position","clsx","Toolbar","Hidden","smUp","IconButton","edge","aria-label","onClick","xsDown","mdUp","smDown","Typography","variant","fallback","Home","ServiceWorker","renderLoader","App","Language","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4673885.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport LocalStorage from '../logic/LocalStorage';\r\n\r\nexport const languageOptions = {\r\n    en: 'English',\r\n    es: 'Español',\r\n};\r\nlet dictionaryList = {};\r\n\r\n// create the language context with default selected language\r\nconst browserlanguage = (navigator.language || navigator.userLanguage).substring(0, 2);\r\nconst userLang = LocalStorage.get(\"rcml-lang\", browserlanguage);\r\nconst defaultlanguage = languageOptions[userLang] ? userLang : 'en';\r\n\r\nasync function loadlanguage(lang) {\r\n    if (!dictionaryList[lang]) {\r\n        return import('./' + lang + '.json').then(({ default: l }) => {\r\n            dictionaryList[lang] = l;\r\n        });\r\n    }\r\n}\r\n\r\nexport const LanguageContext = createContext({\r\n    userLanguage: defaultlanguage,\r\n    dictionary: {}\r\n});\r\n\r\n\r\nexport function LanguageProvider({ children }) {\r\n    const [userLanguage, setUserLanguage] = useState(defaultlanguage);\r\n    const [dictionaryloaded, setdictionaryloaded] = useState(false);\r\n    const selectedLanguage = dictionaryList[userLanguage] ? dictionaryList[userLanguage] : {};\r\n\r\n    React.useEffect(() => {\r\n        if (!dictionaryList[userLanguage]) {\r\n            loadlanguage(userLanguage).then(() => {\r\n                setdictionaryloaded(!dictionaryloaded);\r\n            });\r\n        }\r\n    });\r\n\r\n    const ChangeLanguage = async (selected) => {\r\n        const newLanguage = languageOptions[selected] ? selected : defaultlanguage;\r\n        LocalStorage.set(\"rcml-lang\", newLanguage);\r\n        if (!dictionaryList[newLanguage]) {\r\n            await loadlanguage(newLanguage).then(() => {\r\n                setUserLanguage(newLanguage);\r\n            });\r\n        } else {\r\n            setUserLanguage(newLanguage);\r\n        }\r\n    }\r\n\r\n    const provider = {\r\n        userLanguage,\r\n        dictionary: selectedLanguage,\r\n        userLanguageChange: ChangeLanguage\r\n    };\r\n\r\n    return (\r\n        <LanguageContext.Provider value={provider}>\r\n            {children}\r\n        </LanguageContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n// get text according to id & current language\r\nexport default function Text(tid) {\r\n    const languageContext = useContext(LanguageContext);\r\n    return languageContext.dictionary[tid] || tid + \"-TEXT\";\r\n}","class SudokuValue {\r\n    constructor(x, y, i, j, callback) {\r\n        this.number = \"\";\r\n        this.options = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        this.x = x;\r\n        this.y = y;\r\n        this.i = i;\r\n        this.j = j;\r\n        this.locked = false;\r\n        this.callback = callback;\r\n        this.error = false;\r\n    }\r\n\r\n    SetNumber = (number) => {\r\n        this.SetValue(number);\r\n        this.callback.Duplicates();\r\n    }\r\n    SetValue = (number) => {\r\n        if (this.SetFinalNumber !== undefined) {\r\n            this.SetFinalNumber(number);\r\n        }\r\n        this.number = number;\r\n    }\r\n    SetValueError = (error) => {\r\n        if (this.SetError !== undefined) {\r\n            this.SetError(error);\r\n        }\r\n        this.error = error;\r\n    }\r\n    SetValueOptions = (options) => {\r\n        if (this.SetOptions !== undefined) {\r\n            this.SetOptions(options);\r\n        }\r\n        this.options = options;\r\n    }\r\n}\r\n\r\nexport default SudokuValue;","import SudokuValue from './SudokuValue';\r\n\r\nclass SudokuNumber {\r\n    constructor(x, y, callback) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.callback = callback;\r\n        this.submatrix = [];\r\n        this.checklist = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            let rows = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                rows[j] = new SudokuValue(x, y, i, j, this);\r\n                this.checklist.push(rows[j]);\r\n                this.callback.verticallines[x][i].push(rows[j]);\r\n                this.callback.horizontallines[y][j].push(rows[j]);\r\n                this.callback.list.push(rows[j]);\r\n            }\r\n            this.submatrix[i] = rows;\r\n        }\r\n    }\r\n    Duplicates = () => {\r\n        this.callback.CleanDuplicated();\r\n        this.callback.CheckDuplicates();\r\n        this.callback.CheckEmpty();\r\n        this.callback.CheckSuccess();\r\n    }\r\n}\r\n\r\nexport default SudokuNumber;","import Sudoku from './Sudoku';\r\n\r\nclass SudokuResolver extends Sudoku {\r\n    constructor(n, cacheboard = null, newboard = false) {\r\n        super();\r\n        this.errorcount = 0;\r\n        this.difficultycount=0;\r\n        if (cacheboard !== null) {\r\n            this.RestoreBoard(cacheboard);\r\n        } else if (!newboard) {\r\n            this.CreateBoard(n);\r\n        }\r\n    }\r\n    RandomNumbers = (number) => {\r\n        const t = this;\r\n        if (number > 81 || number < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        const emptyspaces = [...t.emptyspaces];\r\n        for (let index = 0; index < number; index++) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.SetValue(Math.floor(1 + Math.random() * 8));\r\n            t.CleanDuplicated();\r\n            const duplicated = t.CheckDuplicates();\r\n            if (duplicated > 0) {\r\n                field.number = \"\";\r\n                index--;\r\n                continue;\r\n            }\r\n            field.options.clear();\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n    }\r\n\r\n    CreateBoard = (n, deep = 0) => {\r\n        var t0 = performance.now();\r\n        const t = this;\r\n        if (n > 81 || n < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        t.RandomNumbers(27);\r\n\r\n        try {\r\n            t.Resolve();\r\n        } catch (error) {\r\n            t.errorcount += 1;\r\n            //console.log(error.message, t.errorcount, \"deep:\", deep);\r\n            t.CreateEmptyBoard();\r\n            t.CreateBoard(n, deep + 1);\r\n        }\r\n        t.fullboard=t.CloneBoard();\r\n        if (deep === 0) {\r\n            t.CleanBoard(n);\r\n        }\r\n        var t1 = performance.now();\r\n        if(deep===0){\r\n            console.log(\"CreateSudoku took \" + (t1 - t0) + \" milliseconds.\");\r\n        }\r\n    }\r\n    CleanBoard = (n) => {\r\n        const t = this;\r\n        t.difficultycount=0;\r\n        if (n > 81 || n < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        const emptyspaces = [...t.emptyspaces];\r\n        t.removed = 0;\r\n\r\n        while (t.removed < 81 - n && emptyspaces.length > 0) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            const tmp = field.number;\r\n            // field.number = \"\";\r\n            field.SetValue(\"\");\r\n            // const tmpdifficultycount=t.difficultycount;\r\n            const clonelist = t.CloneBoard();\r\n            const solutions = t.ResolveUnique();\r\n            t.RestoreBoard(clonelist);\r\n            if (solutions === 0) {\r\n                console.log(solutions, \"solutions\");\r\n            }\r\n            if (solutions === 1) {\r\n                t.difficultycount++;\r\n                t.removed++;\r\n                // console.log(tmpdifficultycount,t.difficultycount);\r\n            } else {\r\n                // field.number = tmp;\r\n                field.SetValue(tmp);\r\n            }\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n        for (let index = 0; index < t.emptyspaces.length; index++) {\r\n            const current = t.emptyspaces[index];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            if (field.number !== \"\") {\r\n                field.locked = true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    ResolveUnique = (deep = 0, solutions = 0) => {\r\n        const t = this;\r\n        if (solutions > 1) {\r\n            return solutions;\r\n        }\r\n        let changes = 1;\r\n        while (changes > 0) {\r\n            changes = 0;\r\n            try {\r\n                changes += t.FillSingleOption(); // check if there are any field with only one option and use it\r\n            } catch (error) { //if 0 options, no solution\r\n                t.difficultycount--;\r\n                return 0;\r\n            }\r\n            \r\n            if (changes === 0) {\r\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\r\n            }\r\n            t.difficultycount+=changes;\r\n        }\r\n\r\n        if (!t.CheckCompleteBoard()) {\r\n            const clonelist = t.CloneBoard();\r\n            const randomtry = t.Random();\r\n            let randomoptions = [...randomtry.options];\r\n            randomtry.number = randomoptions[0];\r\n            let last = 0;\r\n            let i = 0;\r\n            //let solutions = 0;\r\n            while (randomtry.number !== last && randomtry.number !== undefined) {\r\n                t.difficultycount++;\r\n                last = randomtry.number;\r\n                t.RestoreBoard(clonelist);\r\n                randomtry.number = last;\r\n                try {\r\n                    let sol = solutions;\r\n                    solutions = t.ResolveUnique(deep + 1, solutions);\r\n                    if (solutions > sol) {\r\n                        solutions++;\r\n                    }\r\n                } catch (error) {\r\n                    //console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\r\n                } finally {\r\n                    if (!t.arrayEquals(randomoptions, [...randomtry.options])) {\r\n                        randomoptions = [...randomtry.options];\r\n                        i = 0;\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                    randomtry.number = randomoptions[i];\r\n                }\r\n            }\r\n            randomtry.number = \"\";\r\n            if (solutions > 1) {\r\n                return solutions;\r\n            }\r\n\r\n            if (!t.CheckCompleteBoard()) {\r\n                return t.ResolveUnique(deep + 1, solutions);\r\n            } else {\r\n                solutions++;\r\n                return solutions;\r\n            }\r\n        } else {\r\n            solutions++;\r\n            return solutions;\r\n        }\r\n    }\r\n\r\n\r\n    Resolve = (deep = 0) => {\r\n        const t = this;\r\n        let changes = 1;\r\n        while (changes > 0) {\r\n            changes = 0;\r\n            changes += t.FillSingleOption(); // check if there are any field with only one option and use it\r\n            if (changes === 0) {\r\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\r\n            }\r\n        }\r\n\r\n        if (!t.CheckCompleteBoard()) {\r\n            const clonelist = t.CloneBoard();\r\n            const randomtry = t.Random();\r\n            let randomoptions = [...randomtry.options];\r\n            randomtry.number = randomoptions[0];\r\n            let last = 0;\r\n            let i = 0;\r\n            while (!t.CheckCompleteBoard() && randomtry.number !== last && randomtry.number !== undefined) {\r\n                last = randomtry.number;\r\n                t.RestoreBoard(clonelist);\r\n                randomtry.number = last;\r\n                try {\r\n                    t.Resolve(deep + 1);\r\n                } catch (error) {\r\n                    //console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\r\n                } finally {\r\n                    if (!t.arrayEquals(randomoptions, [...randomtry.options])) {\r\n                        randomoptions = [...randomtry.options];\r\n                        i = 0;\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                    randomtry.number = randomoptions[i];\r\n                }\r\n            }\r\n            randomtry.number = \"\";\r\n\r\n\r\n            if (!t.CheckCompleteBoard()) {\r\n                t.Resolve();\r\n            } else {\r\n                randomtry.SetValue(randomtry.number);\r\n                randomtry.options.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    CheckCompleteBoard = () => {\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    Random = (min = 3) => { //returns a cell with less options than MIN\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                element.SetValueOptions(t.CheckOptions(element));\r\n                if (element.options.size < min) {\r\n                    return element;\r\n                }\r\n            }\r\n        }\r\n        return t.Random(min + 1);\r\n    }\r\n\r\n    // check if there are any field with only one option and use it\r\n    FillSingleOption = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                element.SetValueOptions(t.CheckOptions(element));\r\n                if (element.options.size === 1) {\r\n                    element.SetValue(element.options.values().next().value);\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    // check if there are any line or square with a unique number in its options and use it\r\n    FillByLine = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                if (t.CheckUnique(element)) {\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    //Check if this element has an unique solution\r\n    CheckUnique = (number) => {\r\n        const t = this;\r\n        let unique = 0;\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        unique = t.UniqueList(t.matrix[x][y].checklist, number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.verticallines[x][i], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.horizontallines[y][j], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    // Check if this array has an unique solution\r\n    UniqueList = (arr, number) => {\r\n        const t = this;\r\n        let options = new Set();\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number === \"\" && element !== number) {\r\n                element.SetValueOptions(t.CheckOptions(element));\r\n                options = new Set([...options, ...element.options]);\r\n            }\r\n        }\r\n        number.SetValueOptions(t.CheckOptions(number));\r\n        let difference = new Set([...number.options].filter(x => !options.has(x)));\r\n        if (difference.size === 1) {\r\n            return difference.values().next().value;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default SudokuResolver;","import SudokuNumber from './SudokuNumber';\r\n\r\n\r\nclass HelperSudoku {\r\n\r\n    arrayEquals = (a, b) => {\r\n        return Array.isArray(a) &&\r\n            Array.isArray(b) &&\r\n            a.length === b.length &&\r\n            a.every((val, index) => val === b[index]);\r\n    }\r\n\r\n    CloneBoard = () => {\r\n        const t = this;\r\n        let clonelist = [];\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const e = t.list[i];\r\n            clonelist.push({\r\n                x: e.x,\r\n                y: e.y,\r\n                i: e.i,\r\n                j: e.j,\r\n                number: e.number,\r\n                options: [...e.options],\r\n                locked: e.locked,\r\n                error: e.error\r\n            });\r\n        }\r\n        return clonelist;\r\n    }\r\n\r\n    RestoreBoard = (clonelist) => {\r\n        const t = this;\r\n        for (let index = 0; index < clonelist.length; index++) {\r\n            const e = clonelist[index];\r\n            const element = t.matrix[e.x][e.y].submatrix[e.i][e.j];\r\n            element.SetValue(e.number);\r\n            element.SetValueOptions(new Set(e.options));\r\n            element.locked = e.locked;\r\n            element.SetValueError(e.error);\r\n        }\r\n        this.CheckSuccess();\r\n    }\r\n\r\n    // Add available options to the list\r\n    CheckOptions = (number) => {\r\n        const t = this;\r\n        let list = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        t.DuplicatesList(t.matrix[x][y].checklist, list);\r\n        t.DuplicatesList(t.verticallines[x][i], list);\r\n        t.DuplicatesList(t.horizontallines[y][j], list);\r\n        return list;\r\n    }\r\n\r\n    // Delete from list if element in arr\r\n    DuplicatesList = (arr, list) => {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number !== \"\") {\r\n                list.delete(element.number);\r\n            }\r\n        }\r\n        if (list.size === 0) {\r\n            throw Error(\"Empty options\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Sudoku extends HelperSudoku {\r\n    constructor() { //creates an empty sudoku board\r\n        super();\r\n        this.CreateEmptyBoard();\r\n    }\r\n\r\n    CreateEmptyBoard = () => {\r\n        this.success = false;\r\n        this.matrix = [];\r\n        this.emptyspaces = [];\r\n        this.verticallines = [\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ],\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ],\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ]\r\n        ]; //3x3 vertical lines\r\n        this.horizontallines = [\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ],\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ],\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ]\r\n        ]; //3x3 horizontal lines\r\n        this.list = []; //complete list\r\n        for (let x = 0; x < 3; x++) {\r\n            let rows = [];\r\n            for (let y = 0; y < 3; y++) {\r\n                rows[y] = new SudokuNumber(x, y, this);\r\n                this.EmptySpaces(x, y);\r\n            }\r\n            this.matrix[x] = rows;\r\n        }\r\n    }\r\n\r\n\r\n    EmptySpaces = (x, y) => {\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                this.emptyspaces.push([x, y, i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    SetSuccessValue = (value) => {\r\n        if (this.setSuccess !== undefined) {\r\n            this.setSuccess(value);\r\n        }\r\n        this.success = value;\r\n    }\r\n\r\n    CheckSuccess = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            if (element.number === \"\" || element.error) {\r\n                this.SetSuccessValue(false);\r\n                return;\r\n            }\r\n        }\r\n        this.SetSuccessValue(true);\r\n    }\r\n\r\n\r\n    CleanDuplicated = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            element.SetValueError(false);\r\n            if (element.number === \"X\") {\r\n                element.SetValue(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    CheckDuplicates = () => {\r\n        let count = 0;\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                const square = this.matrix[i][j].checklist;\r\n                count += this.MarkDuplicates(square);\r\n\r\n                const vertical = this.verticallines[i][j];\r\n                count += this.MarkDuplicates(vertical);\r\n\r\n                const horizontal = this.horizontallines[i][j];\r\n                count += this.MarkDuplicates(horizontal);\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n\r\n    MarkDuplicates = (arr) => {\r\n        let count = 0;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (this.isDuplicated(arr, element.number)) {\r\n                element.SetValueError(true);\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    isDuplicated = (arr, search) => {\r\n        let count = arr.reduce(function(n, element) {\r\n            return n + (search !== \"\" && element.number === search);\r\n        }, 0);\r\n        return (count > 1);\r\n    }\r\n\r\n    CheckEmpty = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            if (element.number === \"\") {\r\n                try {\r\n                    this.CheckOptions(element);\r\n                } catch (error) {\r\n                    element.SetValue(\"X\");\r\n                    element.SetValueError(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sudoku;","import React, { createContext } from 'react';\r\nimport SudokuResolver from '../logic/SudokuResolver';\r\nimport LocalStorage from '../logic/LocalStorage';\r\n\r\nexport const BoardContext = createContext({});\r\n\r\n\r\nfunction debounce(fn, ms) {\r\n    let timer;\r\n    return () => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            timer = null\r\n            fn.apply(this, arguments)\r\n        }, ms)\r\n    };\r\n}\r\n\r\nexport default function BoardContextProvider({ children }) {\r\n    const [Difficulty, setDifficulty] = React.useState(LocalStorage.get(\"difficulty\", 45));\r\n    const [Loading, setLoading] = React.useState(false);\r\n    const [OptionsActive, setOptionsActive] = React.useState(LocalStorage.get(\"options_active\", false));\r\n\r\n    const cacheboard = LocalStorage.get(\"sudoku_board\", null);\r\n    const board = new SudokuResolver(45, cacheboard, true);\r\n    const [Success, setSuccess] = React.useState(board.success);\r\n    board.setSuccess = setSuccess;\r\n    board.success = Success;\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (cacheboard === null) {\r\n            board.CreateBoard(45);\r\n            LocalStorage.set(\"sudoku_board\", board.CloneBoard());\r\n        }\r\n    }, [board, cacheboard]);\r\n\r\n\r\n\r\n\r\n    const ResetBoard = (n, depth = 0, best_solution = null, t1 = null) => {\r\n        if (n > 20) {\r\n            const newboard = new SudokuResolver(n);\r\n            board.RestoreBoard(newboard.CloneBoard());\r\n            Save();\r\n            LocalStorage.set(\"difficulty\", n);\r\n            setDifficulty(n);\r\n            return;\r\n        }\r\n        if (depth === 0) {\r\n            // t1 = performance.now();\r\n            board.CreateEmptyBoard();\r\n            board.CreateBoard(n);\r\n            LocalStorage.set(\"difficulty\", n);\r\n            setDifficulty(n);\r\n            best_solution = {\r\n                difficultycount: board.difficultycount,\r\n                remaining: 81 - board.removed,\r\n                board: board.CloneBoard(),\r\n                worst: board.difficultycount\r\n            }\r\n        }\r\n\r\n        if (best_solution.difficultycount < board.difficultycount) {\r\n            best_solution.difficultycount = board.difficultycount;\r\n            best_solution.remaining = 81 - board.removed;\r\n            best_solution.board = board.CloneBoard();\r\n        }\r\n\r\n        if (best_solution.worst > board.difficultycount) {\r\n            best_solution.worst = board.difficultycount;\r\n        }\r\n\r\n        if (depth < 5) {\r\n            board.RestoreBoard(board.fullboard);\r\n            board.CleanBoard(n);\r\n            // board.CreateBoard(n);\r\n            setTimeout(() => {\r\n                ResetBoard(n, depth + 1, best_solution, t1);\r\n            }, 0);\r\n        } else {\r\n            board.RestoreBoard(best_solution.board);\r\n            Save();\r\n            setLoading(false);\r\n            // var t2=performance.now();\r\n            // console.log(\"total\",t2-t1);\r\n        }\r\n\r\n        // console.log(board.difficultycount, 81 - board.removed, \"best\", best_solution);\r\n    }\r\n\r\n    const Save = () => {\r\n        LocalStorage.set(\"sudoku_board\", board.CloneBoard());\r\n    }\r\n    const SaveBoard = debounce(Save, 3000);\r\n\r\n    const provider = {\r\n        board,\r\n        Difficulty,\r\n        setDifficulty,\r\n        ResetBoard,\r\n        SaveBoard,\r\n        Success,\r\n        setSuccess,\r\n        OptionsActive,\r\n        setOptionsActive,\r\n        setLoading,\r\n        Loading\r\n    };\r\n\r\n    return (\r\n        <BoardContext.Provider value={provider}>\r\n            {children}\r\n        </BoardContext.Provider>\r\n    );\r\n}\r\n\r\n","import React, { createContext } from 'react';\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport Grey from '@material-ui/core/colors/grey';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\n\r\nimport LocalStorage from \"../logic/LocalStorage\";\r\n\r\n\r\nexport const ThemeContext = createContext({});\r\n\r\nconst DefaultColor = {\r\n    primary: { light: indigo[600], dark: indigo[800] },\r\n    secondary: { light: purple[600], dark: purple[900] },\r\n};\r\n\r\nexport default function ThemeContextProvider({ children }) {\r\n    const [DarkMode, SetDarkMode] = React.useState(LocalStorage.get(\"dark_mode\", useMediaQuery('(prefers-color-scheme: dark)')));\r\n    const [SelectedColor, SetSelectedColor] = React.useState(LocalStorage.get(\"selected_color\", DefaultColor));\r\n\r\n    const theme = React.useMemo(\r\n        () =>\r\n            createMuiTheme({\r\n                palette: {\r\n                    primary: {\r\n                        // main: DarkMode ? blueGrey[800] : indigo[800],\r\n                        main: DarkMode ? SelectedColor['primary']['dark'] : SelectedColor['primary']['light'],\r\n                    },\r\n                    secondary: {\r\n                        main: DarkMode ? SelectedColor['secondary']['dark'] : SelectedColor['secondary']['light'],\r\n                    },\r\n                    type: DarkMode ? 'dark' : 'light',\r\n                },\r\n                components: {\r\n                    MuiListItem: {\r\n                        styleOverrides: {\r\n                            button: {\r\n                                '&:hover': {\r\n                                    backgroundColor: DarkMode ? Grey[700] : Grey[200]\r\n                                },\r\n                                '&$selected': {\r\n                                    backgroundColor: DarkMode ? Grey[600] : Grey[300],\r\n                                    '&:hover': {\r\n                                        backgroundColor: DarkMode ? Grey[500] : Grey[400]\r\n                                    },\r\n                                },\r\n                            },\r\n                        }\r\n                    },\r\n                },\r\n            }),\r\n        [DarkMode, SelectedColor],\r\n    );\r\n\r\n\r\n    const SwitchDarkMode = () => {\r\n        SetDarkMode(!DarkMode);\r\n        LocalStorage.set(\"dark_mode\", !DarkMode);\r\n    }\r\n    const SetColor = (color, primary = true) => {\r\n        const newcolor = {};\r\n        if (primary) {\r\n            newcolor['primary'] = color;\r\n            newcolor['secondary'] = SelectedColor['secondary'];\r\n        } else {\r\n            newcolor['secondary'] = color;\r\n            newcolor['primary'] = SelectedColor['primary'];\r\n        }\r\n        SetSelectedColor(newcolor);\r\n        LocalStorage.set(\"selected_color\", newcolor);\r\n    }\r\n\r\n    const ResetColor=(primary = true)=>{\r\n        const newcolor = {};\r\n        if (primary) {\r\n            newcolor['secondary'] = SelectedColor['secondary'];\r\n            newcolor['primary'] = DefaultColor['primary'];\r\n        } else {\r\n            newcolor['primary'] = SelectedColor['primary'];\r\n            newcolor['secondary'] = DefaultColor['secondary'];\r\n        }\r\n        SetSelectedColor(newcolor);\r\n        LocalStorage.set(\"selected_color\", newcolor);\r\n    }\r\n\r\n\r\n    const provider = {\r\n        SetDarkMode,\r\n        DarkMode,\r\n        SwitchDarkMode,\r\n        SetColor,\r\n        ResetColor\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={provider}>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline />\r\n                {children}\r\n            </ThemeProvider>\r\n        </ThemeContext.Provider>\r\n    );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React, { createContext } from 'react';\r\nimport * as serviceWorker from '../serviceWorker';\r\n\r\n\r\nexport const ServiceWorkerContext = createContext({});\r\n\r\n\r\nexport default function ServiceWorkerProvider({ children }) {\r\n    const [Message, setMessage] = React.useState(\"\");\r\n    const [waitingServiceWorker, setWaitingServiceWorker] = React.useState(null);\r\n    const [installPrompt, setinstallPrompt] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        serviceWorker.register({\r\n            onOpen: () => {\r\n                if (Message === \"\") {\r\n                    setMessage(\"OFFLINE\");\r\n                }\r\n            },\r\n            onUpdate: registration => {\r\n                setWaitingServiceWorker(registration.waiting);\r\n                setMessage(\"UPDATE\");\r\n            },\r\n        });\r\n\r\n        window.addEventListener('beforeinstallprompt', (e) => {\r\n            if (localStorage) {\r\n                // Prevent the mini-infobar from appearing on mobile\r\n                e.preventDefault();\r\n                // Stash the event so it can be triggered later.\r\n                setinstallPrompt(e);\r\n                if (Message !== \"UPDATE\") {\r\n                    setMessage(\"INSTALL\");\r\n                }\r\n            }\r\n        });\r\n        // We setup an event listener to automatically reload the page\r\n        // after the Service Worker has been updated, this will trigger\r\n        // on all the open tabs of our application, so that we don't leave\r\n        // any tab in an incosistent state\r\n        if (waitingServiceWorker) {\r\n            waitingServiceWorker.addEventListener('statechange', event => {\r\n                if (event.target.state === 'activated') {\r\n                    window.location.reload();\r\n                }\r\n            });\r\n        }\r\n    }, [Message,setMessage,waitingServiceWorker]);\r\n\r\n\r\n    const provider = {\r\n        Message,\r\n        setMessage,\r\n        installPrompt,\r\n        waitingServiceWorker\r\n    };\r\n\r\n    return (\r\n        <ServiceWorkerContext.Provider value={provider}>\r\n            {children}\r\n        </ServiceWorkerContext.Provider>\r\n    );\r\n}","class LocalStorage {\r\n    // 1 day default \r\n    static get(key, default_value = null, expiration_time = 1) {\r\n        var value = JSON.parse(localStorage.getItem(key));\r\n        if (value == null) {\r\n            this.set(key, default_value, expiration_time);\r\n        } else {\r\n            if (value.expiration_time < Date.now()) {\r\n                this.set(key, default_value, expiration_time);\r\n            } else {\r\n                return value.data;\r\n            }\r\n        }\r\n\r\n        return default_value;\r\n    }\r\n    static set(key, value, expiration_time = 1) {\r\n        if (value != null) {\r\n            expiration_time = Date.now() + expiration_time * 24 * 60 * 60 * 1000;\r\n            localStorage.setItem(key, JSON.stringify({\r\n                data: value,\r\n                expiration_time: expiration_time\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default LocalStorage;","var map = {\n\t\"./en.json\": [\n\t\t118,\n\t\t25\n\t],\n\t\"./es.json\": [\n\t\t119,\n\t\t26\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 98;\nmodule.exports = webpackAsyncContext;","import React, { lazy, Suspense } from 'react';\r\nimport clsx from 'clsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nconst DifficultyButtons = lazy(() => import('./buttons/DifficultyButtons'));\r\nconst DarkModeButton = lazy(() => import('./buttons/DarkModeButton'));\r\n// const LanguageSelector = lazy(() => import('./buttons/LanguageSelector'));\r\nconst Drawer = lazy(() => import('./Drawer'));\r\n\r\nconst Container = lazy(() => import('@material-ui/core/Container'));\r\n\r\n// import Container from '@material-ui/core/Container';\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: { flexGrow: 1, },\r\n    margin: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginRight: theme.spacing(0.5),\r\n        },\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n    },\r\n}));\r\n\r\nconst renderLoader = () => null;\r\n\r\nexport default function ButtonAppBar(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n        if (desktopOpen) {\r\n            setdesktopOpen(!desktopOpen);\r\n        }\r\n    };\r\n    const [desktopOpen, setdesktopOpen] = React.useState(false);\r\n    const handleDesktopDrawerToggle = () => {\r\n        setdesktopOpen(!desktopOpen);\r\n        setTimeout( ()=> { window.dispatchEvent(new Event('resize')) }, theme.transitions.duration.enteringScreen);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: desktopOpen,\r\n            })}>\r\n                <Toolbar>\r\n                    <Hidden smUp >\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleDrawerToggle}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Hidden>\r\n                    <Hidden xsDown>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleDesktopDrawerToggle}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Hidden>\r\n                    <Hidden mdUp>\r\n                        <div className={classes.root}></div>\r\n                    </Hidden>\r\n                    <Hidden smDown>\r\n                        <Typography variant=\"h6\" className={classes.root}> Sudoku </Typography>\r\n                    </Hidden>\r\n                    {/* <Suspense fallback={renderLoader()}>\r\n                        <div className={classes.margin}>\r\n                            <LanguageSelector />\r\n                        </div>\r\n                    </Suspense> */}\r\n                    <Suspense fallback={renderLoader()}>\r\n                        <div className={classes.margin}>\r\n                            <DarkModeButton/>\r\n                        </div>\r\n                    </Suspense>\r\n                    <div className={classes.margin}>\r\n                        <Suspense fallback={renderLoader()}>\r\n                            <DifficultyButtons />\r\n                        </Suspense>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Suspense fallback={renderLoader()}>\r\n                <Drawer handleDrawerToggle={handleDrawerToggle} mobileOpen={mobileOpen} handleDesktopDrawerToggle={handleDesktopDrawerToggle} desktopOpen={desktopOpen}  {...props}>\r\n                    <Container>\r\n                        {props.children}\r\n                    </Container>\r\n                </Drawer>\r\n            </Suspense>\r\n        </div>\r\n    );\r\n}\r\n","import React, { lazy, Suspense } from 'react';\r\nimport Header from './components/Header';\r\nimport Text, { LanguageProvider } from './languages/Language';\r\nimport ServiceWorkerProvider from './ContextProviders/ServiceWorkerContext';\r\nimport ThemeProvider from './ContextProviders/ThemeContext';\r\nimport BoardProvider from './ContextProviders/BoardContext';\r\n\r\n\r\nconst Home = lazy(() => import('./pages/Home'));\r\nconst ServiceWorker = lazy(() => import('./components/buttons/ServiceWorker'));\r\n\r\nconst renderLoader = () => Text(\"loading\");\r\nfunction App() {\r\n    return (\r\n        <ThemeProvider>\r\n            <LanguageProvider>\r\n                <ServiceWorkerProvider>\r\n                    <BoardProvider>\r\n                        <Header>\r\n                            <Suspense fallback={renderLoader()}>\r\n                                <Home />\r\n                            </Suspense>\r\n                        </Header>\r\n                    </BoardProvider>\r\n                    <Suspense fallback={renderLoader()}>\r\n                        <ServiceWorker />\r\n                    </Suspense>\r\n                </ServiceWorkerProvider>\r\n            </LanguageProvider>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}