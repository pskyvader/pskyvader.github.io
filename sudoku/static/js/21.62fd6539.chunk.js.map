{"version":3,"sources":["components/SudokuPopover.jsx"],"names":["useStyles","makeStyles","theme","palette","primary","secondary","getContrastText","background","light","type","button","height","width","fontSize","fontWeight","minWidth","borderRadius","padding","spacing","breakpoints","up","backgroundColor","main","color","contrastText","paper","options","margin","label","optioncolor","optionbackground","OptionsActiveoption","SudokuPopover","props","handleClose","field","parentOptions","useContext","BoardContext","OptionsActive","setOptionsActive","React","useState","ChangeOption","SetChangeOption","handleChange","classes","Clear","clear","SetNumber","setNumber","number","changeOptions","has","delete","add","pressNumber","event","key","pressednumber","parseInt","isNaN","useEffect","document","addEventListener","removeEventListener","container","justify","className","clsx","map","row","valuex","keyx","item","xs","valuey","keyy","classname","onClick","edge","size","disableRipple","onChange","checked","Text","SudokuPopoverContainer","TransitionProps","placement","style","transformOrigin","onClickAway"],"mappings":"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","file":"static/js/21.62fd6539.chunk.js","sourcesContent":["import React,{useContext} from 'react';\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nimport Text from '../languages/Language';\r\n\r\nimport { BoardContext } from '../ContextProviders/BoardContext';\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const { primary, secondary, getContrastText, background } = theme.palette;\r\n    const light = theme.palette.type === \"light\";\r\n\r\n    return {\r\n        button: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontSize: \"1em\",\r\n            fontWeight: \"normal\",\r\n            minWidth: 0,\r\n            borderRadius: 0,\r\n            padding: theme.spacing(1),\r\n            [theme.breakpoints.up('md')]: {\r\n                padding: theme.spacing(1.5)\r\n            },\r\n            \"&:hover\": {\r\n                backgroundColor: light ? primary.main : primary.light,\r\n                color: primary.contrastText\r\n            },\r\n            color: light ? primary.main : getContrastText(background.paper)\r\n        },\r\n        options: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontWeight: \"normal\",\r\n            margin: 0,\r\n            borderRadius: 0,\r\n            color: light ? primary.main : getContrastText(background.paper),\r\n            \"&:hover\": {\r\n                backgroundColor: light ? primary.main : primary.light,\r\n                color: primary.contrastText\r\n            }\r\n        },\r\n        label: {\r\n            width: 0,\r\n        },\r\n        optioncolor: {\r\n            color: getContrastText(primary.main),\r\n            \"&:hover\": {\r\n                backgroundColor: primary.light,\r\n            }\r\n        },\r\n        optionbackground: {\r\n            backgroundColor: primary.main\r\n        },\r\n        OptionsActiveoption: {\r\n            backgroundColor: secondary.main,\r\n            \"&:hover\": {\r\n                backgroundColor: secondary.light,\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst SudokuPopover = (props) => {\r\n    const { handleClose, field, parentOptions } = props;\r\n    const {OptionsActive,setOptionsActive}=useContext(BoardContext);\r\n    const [ChangeOption, SetChangeOption] = React.useState(false);\r\n    const handleChange = () => {\r\n        setOptionsActive(!OptionsActive);\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const optioncolor = OptionsActive ? classes.optioncolor : \"\";\r\n    const box = [[1, 4, 7], [2, 5, 8], [3, 6, 9]];\r\n    const key = \"popover\";\r\n\r\n    const Clear = () => {\r\n        field.options.clear();\r\n        field.SetNumber(\"\");\r\n        handleClose();\r\n    }\r\n\r\n    const setNumber = (number) => {\r\n        field.options.clear();\r\n        field.SetNumber(number);\r\n        handleClose();\r\n    };\r\n\r\n    const changeOptions = (number) => {\r\n        if (field.options.has(number)) {\r\n            field.options.delete(number);\r\n        } else {\r\n            field.options.add(number);\r\n        }\r\n        parentOptions(!ChangeOption);\r\n        SetChangeOption(!ChangeOption);\r\n    };\r\n\r\n    const pressNumber = (event) => {\r\n        if (event.key === \"Backspace\" || event.key === \"Delete\") {\r\n            Clear();\r\n        } else {\r\n            const pressednumber = parseInt(event.key);\r\n            if (!isNaN(pressednumber)) {\r\n                if (OptionsActive) {\r\n                    changeOptions(pressednumber);\r\n                } else {\r\n                    setNumber(pressednumber);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        document.addEventListener(\"keydown\", pressNumber, false);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", pressNumber, false);\r\n        };\r\n    });\r\n\r\n\r\n    return <Grid container justify=\"center\" className={clsx(OptionsActive && classes.optionbackground )} >\r\n        {box.map((row, valuex) => {\r\n            const keyx = key + \"-\" + valuex;\r\n            return <Grid key={keyx} item xs={4}>\r\n                {row.map((number, valuey) => {\r\n                    const keyy = keyx + \",\" + valuey;\r\n                    const classname = clsx(classes.button, optioncolor, OptionsActive && field.options.has(number) ? classes.OptionsActiveoption : \"\");\r\n                    return <Grid key={keyy}>\r\n                        <Button className={classname} onClick={() => OptionsActive ? changeOptions(number) : setNumber(number)}>\r\n                            {number}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        })}\r\n\r\n        <Grid item xs={12}>\r\n            <Grid item xs={12}>\r\n                <Button classes={{ label: classes.label }} className={clsx(classes.options, optioncolor)} onClick={handleChange}>\r\n                    <Switch\r\n                        edge=\"start\"\r\n                        size=\"small\"\r\n                        disableRipple\r\n                        onChange={handleChange}\r\n                        checked={OptionsActive}\r\n                    />\r\n                    {Text('options')}\r\n                </Button>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Button className={clsx(classes.options, optioncolor)} onClick={() => Clear()}>{Text('clear')}</Button>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    </Grid>\r\n}\r\n\r\n// export default SudokuPopover;\r\n\r\n\r\nconst SudokuPopoverContainer = (props) => {\r\n    const { TransitionProps, placement, handleClose } = props;\r\n    return (\r\n        <Grow {...TransitionProps} style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }} >\r\n            <div>\r\n                <Paper>\r\n                    <ClickAwayListener onClickAway={handleClose}>\r\n                        <div>\r\n                            <SudokuPopover {...props} />\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                </Paper>\r\n            </div>\r\n        </Grow>\r\n    )\r\n}\r\nexport default SudokuPopoverContainer;\r\n"],"sourceRoot":""}