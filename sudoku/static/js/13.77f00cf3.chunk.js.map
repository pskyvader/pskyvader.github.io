{"version":3,"sources":["../node_modules/@material-ui/core/esm/List/ListContext.js","../node_modules/@material-ui/core/esm/transitions/utils.js","../node_modules/react-transition-group/esm/config.js","../node_modules/react-transition-group/esm/Transition.js","components/buttons/DifficultyButtons.jsx","../node_modules/@material-ui/core/esm/List/List.js"],"names":["ListContext","React","reflow","node","scrollTop","getTransitionProps","props","options","timeout","_props$style","style","duration","transitionDuration","mode","delay","transitionDelay","Transition","_React$Component","context","_this","call","this","initialStatus","appear","isMounting","enter","appearStatus","in","unmountOnExit","mountOnEnter","state","status","nextCallback","_inheritsLoose","getDerivedStateFromProps","_ref","prevState","_proto","prototype","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","exit","undefined","mounting","performEnter","performExit","setState","_this2","appearing","_ref2","nodeRef","ReactDOM","findDOMNode","maybeNode","maybeAppearing","timeouts","enterTimeout","config","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExit","onExiting","onExited","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","current","doesNotHaveTimeoutOrListener","addEndListener","_ref3","maybeNextCallback","setTimeout","render","_this$props","children","childProps","_objectWithoutPropertiesLoose","createElement","TransitionGroupContext","Provider","value","cloneElement","Children","only","Component","noop","contextType","propTypes","defaultProps","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","buttoncolor","pallete","getContrastText","backgroundColor","main","color","border","dark","useStyles","makeStyles","theme","palette","info","success","warning","error","buttonstar","position","bottom","spacing","right","fontSize","borderRadius","light","button1","button2","button3","button4","DifficultyButtons","board","setDifficulty","Difficulty","classes","ResetBoard","n","newboard","SudokuResolver","LocalStorage","set","newmatrix","CloneBoard","RestoreBoard","difficultylist","number","text","Text","class","icon","EmojiEmotionsIcon","InsertEmoticonIcon","FaceIcon","MoodBadIcon","size","map","e","key","title","className","onClick","button","selected","primary","edge","disableRipple","checked","List","ref","_props$component","component","_props$dense","dense","_props$disablePadding","disablePadding","subheader","other","_objectWithoutProperties","_extends","clsx","root","padding","withStyles","listStyle","margin","paddingTop","paddingBottom","name"],"mappings":"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","file":"static/js/13.77f00cf3.chunk.js","sourcesContent":["import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar ListContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  ListContext.displayName = 'ListContext';\n}\n\nexport default ListContext;","export var reflow = function reflow(node) {\n  return node.scrollTop;\n};\nexport function getTransitionProps(props, options) {\n  var timeout = props.timeout,\n      _props$style = props.style,\n      style = _props$style === void 0 ? {} : _props$style;\n  return {\n    duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,\n    delay: style.transitionDelay\n  };\n}","export default {\n  disabled: false\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : PropTypes.instanceOf(Element)\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Radio from \"@material-ui/core/Radio\";\r\n\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\n\r\n\r\nimport SudokuResolver from \"../../logic/SudokuResolver\";\r\nimport LocalStorage from \"../../logic/LocalStorage\";\r\nimport Text from '../../languages/Language';\r\n\r\nconst buttoncolor = (pallete, getContrastText) => {\r\n    return {\r\n        backgroundColor: pallete.main,\r\n        color: getContrastText(pallete.main),\r\n        border: \"none\",\r\n        '&:hover': {\r\n            backgroundColor: pallete.dark,\r\n            color: getContrastText(pallete.dark),\r\n            border: \"none\",\r\n        },\r\n    }\r\n}\r\nconst useStyles = makeStyles((theme) => {\r\n    const { info, success, warning, error, getContrastText } = theme.palette;\r\n    return {\r\n        buttonstar: {\r\n            position: \"absolute\",\r\n            bottom: theme.spacing(0.25),\r\n            right: theme.spacing(0.25),\r\n            fontSize: \"0.75rem\",\r\n            borderRadius: \"100%\",\r\n            backgroundColor: \"white\",\r\n            color: warning.light\r\n        },\r\n        button1: buttoncolor(info, getContrastText),\r\n        button2: buttoncolor(success, getContrastText),\r\n        button3: buttoncolor(warning, getContrastText),\r\n        button4: buttoncolor(error, getContrastText)\r\n    }\r\n});\r\n\r\nconst DifficultyButtons = (props) => {\r\n    const { board, setDifficulty, Difficulty, mode = \"button\" } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    function ResetBoard(n) {\r\n        const newboard = new SudokuResolver(n);\r\n        setDifficulty(n);\r\n        LocalStorage.set(\"difficulty\", n);\r\n        const newmatrix = newboard.CloneBoard();\r\n        board.RestoreBoard(newmatrix);\r\n        LocalStorage.set(\"sudoku_board\", newmatrix);\r\n    }\r\n\r\n    const difficultylist = [\r\n        { number: 63, text: Text('veryeasymode'), class: classes.button1, icon: EmojiEmotionsIcon },\r\n        { number: 45, text: Text('easymode'), class: classes.button2, icon: InsertEmoticonIcon },\r\n        { number: 36, text: Text('mediummode'), class: classes.button3, icon: FaceIcon },\r\n        { number: 20, text: Text('hardmode'), class: classes.button4, icon: MoodBadIcon },\r\n    ]\r\n\r\n\r\n\r\n    if (mode === \"button\") {\r\n        return <ButtonGroup size=\"small\">\r\n            {difficultylist.map((e) => (\r\n                <Tooltip key={e.text} title={e.text}>\r\n                    <Button className={e.class} onClick={() => ResetBoard(e.number)}>\r\n                        <e.icon />\r\n                        {Difficulty === e.number ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                    </Button>\r\n                </Tooltip>\r\n            ))}\r\n        </ButtonGroup>\r\n    } else {\r\n        return <List>\r\n            {difficultylist.map((e) => (\r\n                <ListItem button key={e.text} onClick={() => ResetBoard(e.number)} selected={Difficulty === e.number}>\r\n                    <ListItemIcon> <e.icon /></ListItemIcon>\r\n                    <ListItemText primary={e.text} />\r\n                    <Radio\r\n                        edge=\"end\"\r\n                        size=\"small\"\r\n                        disableRipple checked={Difficulty === e.number} />\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default DifficultyButtons;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from './ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative'\n  },\n\n  /* Styles applied to the root element if `disablePadding={false}`. */\n  padding: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n\n  /* Styles applied to the root element if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if a `subheader` is provided. */\n  subheader: {\n    paddingTop: 0\n  }\n};\nvar List = /*#__PURE__*/React.forwardRef(function List(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'ul' : _props$component,\n      _props$dense = props.dense,\n      dense = _props$dense === void 0 ? false : _props$dense,\n      _props$disablePadding = props.disablePadding,\n      disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,\n      subheader = props.subheader,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"dense\", \"disablePadding\", \"subheader\"]);\n\n  var context = React.useMemo(function () {\n    return {\n      dense: dense\n    };\n  }, [dense]);\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),\n    ref: ref\n  }, other), subheader, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, vertical padding will be removed from the list.\n   * @default false\n   */\n  disablePadding: PropTypes.bool,\n\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiList'\n})(List);"],"sourceRoot":""}