{"version":3,"sources":["logic/LocalStorage.js","logic/SudokuValue.js","logic/SudokuNumber.js","logic/SudokuResolver.js","logic/Sudoku.js","components/Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["LocalStorage","key","default_value","expiration_time","value","JSON","parse","localStorage","getItem","this","set","Date","now","data","setItem","stringify","SudokuValue","x","y","i","j","callback","SetNumber","number","SetValue","Duplicates","undefined","SetFinalNumber","SetValueError","error","SetError","SetValueOptions","options","SetOptions","Set","locked","SudokuNumber","CleanDuplicated","CheckDuplicates","CheckSuccess","submatrix","checklist","rows","push","verticallines","horizontallines","list","SudokuResolver","n","cacheboard","RandomNumbers","t","Error","emptyspaces","index","pos","Math","floor","random","length","current","field","matrix","clear","splice","CreateBoard","deep","Resolve","errorcount","CreateEmptyBoard","CleanBoard","removed","tmp","clonelist","CloneBoard","solutions","ResolveUnique","RestoreBoard","console","log","changes","FillSingleOption","FillByLine","CheckCompleteBoard","randomtry","Random","randomoptions","last","sol","arrayEquals","e","element","min","CheckOptions","size","values","next","CheckUnique","unique","UniqueList","arr","difference","filter","has","DuplicatesList","delete","a","b","Array","isArray","every","val","t0","performance","t1","success","EmptySpaces","SetSuccessValue","setSuccess","count","square","MarkDuplicates","vertical","horizontal","duplicated","search","reduce","DifficultyButtons","lazy","DarkModeButton","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","props","classes","className","AppBar","position","Toolbar","Typography","variant","fallback","Container","children","Home","get","baseboard","App","React","useState","Difficulty","setDifficulty","useMediaQuery","DarkMode","SetDarkMode","useMemo","createMuiTheme","palette","primary","main","blueGrey","indigo","secondary","purple","type","Save","useEffect","window","addEventListener","removeEventListener","ThemeProvider","CssBaseline","board","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e0cec08f.chunk.js","sourcesContent":["class LocalStorage {\r\n    // 1 day default \r\n    static get(key, default_value = null, expiration_time = 1) {\r\n        var value = JSON.parse(localStorage.getItem(key));\r\n        if (value == null) {\r\n            this.set(key, default_value, expiration_time);\r\n        } else {\r\n            if (value.expiration_time < Date.now()) {\r\n                this.set(key, default_value, expiration_time);\r\n            } else {\r\n                return value.data;\r\n            }\r\n        }\r\n\r\n        return default_value;\r\n    }\r\n    static set(key, value, expiration_time = 1) {\r\n        if (value != null) {\r\n            expiration_time = Date.now() + expiration_time * 24 * 60 * 60 * 1000;\r\n            localStorage.setItem(key, JSON.stringify({\r\n                data: value,\r\n                expiration_time: expiration_time\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default LocalStorage;","class SudokuValue {\r\n    constructor(x, y, i, j, callback) {\r\n        this.number = \"\";\r\n        this.options = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        this.x = x;\r\n        this.y = y;\r\n        this.i = i;\r\n        this.j = j;\r\n        this.locked = false;\r\n        this.callback = callback;\r\n        this.error = false;\r\n    }\r\n\r\n    SetNumber = (number) => {\r\n        this.SetValue(number);\r\n        this.callback.Duplicates();\r\n    }\r\n    SetValue = (number) => {\r\n        if (this.SetFinalNumber !== undefined) {\r\n            this.SetFinalNumber(number);\r\n        }\r\n        this.number = number;\r\n    }\r\n    SetValueError = (error) => {\r\n        if (this.SetError !== undefined) {\r\n            this.SetError(error);\r\n        }\r\n        this.error = error;\r\n    }\r\n    SetValueOptions = (options) => {\r\n        if (this.SetOptions !== undefined) {\r\n            this.SetOptions(options);\r\n        }\r\n        this.options = options;\r\n    }\r\n}\r\n\r\nexport default SudokuValue;","import SudokuValue from './SudokuValue';\r\n\r\nclass SudokuNumber {\r\n    constructor(x, y, callback) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.callback = callback;\r\n        this.submatrix = [];\r\n        this.checklist = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            let rows = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                rows[j] = new SudokuValue(x, y, i, j, this);\r\n                this.checklist.push(rows[j]);\r\n                this.callback.verticallines[x][i].push(rows[j]);\r\n                this.callback.horizontallines[y][j].push(rows[j]);\r\n                this.callback.list.push(rows[j]);\r\n            }\r\n            this.submatrix[i] = rows;\r\n        }\r\n    }\r\n    Duplicates = () => {\r\n        this.callback.CleanDuplicated();\r\n        this.callback.CheckDuplicates();\r\n        this.callback.CheckSuccess();\r\n    }\r\n}\r\n\r\nexport default SudokuNumber;","import Sudoku from './Sudoku';\r\n\r\nclass SudokuResolver extends Sudoku {\r\n    constructor(n, cacheboard = null) {\r\n        super();\r\n        this.errorcount = 0;\r\n        if (cacheboard === null) {\r\n            var t0 = performance.now();\r\n            this.CreateBoard(n);\r\n            var t1 = performance.now();\r\n            console.log(\"CreateSudoku took \" + (t1 - t0) + \" milliseconds.\");\r\n            //console.log(t1 - t0);\r\n        } else {\r\n            this.RestoreBoard(cacheboard);\r\n        }\r\n    }\r\n    RandomNumbers = (number) => {\r\n        const t = this;\r\n        if (number > 81 || number < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        const emptyspaces = [...t.emptyspaces];\r\n        for (let index = 0; index < number; index++) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.SetValue(Math.floor(1 + Math.random() * 8));\r\n            t.CleanDuplicated();\r\n            const duplicated = t.CheckDuplicates();\r\n            if (duplicated > 0) {\r\n                field.number = \"\";\r\n                index--;\r\n                continue;\r\n            }\r\n            field.options.clear();\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n    }\r\n\r\n    CreateBoard = (n, deep = 0) => {\r\n        const t = this;\r\n        if (n > 81 || n < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        t.RandomNumbers(27);\r\n\r\n        try {\r\n            t.Resolve();\r\n        } catch (error) {\r\n            t.errorcount += 1;\r\n            //console.log(error.message, t.errorcount, \"deep:\", deep);\r\n            t.CreateEmptyBoard();\r\n            t.CreateBoard(n, deep + 1);\r\n        }\r\n        if (deep === 0) {\r\n            t.CleanBoard(n);\r\n        }\r\n    }\r\n    CleanBoard = (n) => {\r\n        const t = this;\r\n        if (n > 81 || n < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        const emptyspaces = [...t.emptyspaces];\r\n        let removed = 0;\r\n\r\n        while (removed < 81 - n && emptyspaces.length > 0) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            const tmp = field.number;\r\n            field.number = \"\";\r\n            const clonelist = t.CloneBoard();\r\n            const solutions = t.ResolveUnique();\r\n            t.RestoreBoard(clonelist);\r\n            if(solutions===0){\r\n                console.log(solutions,\"solutions\");\r\n            }\r\n            if (solutions===1) {\r\n                removed++;\r\n            } else {\r\n                field.number = tmp;\r\n            }\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n        for (let index = 0; index < t.emptyspaces.length; index++) {\r\n            const current = t.emptyspaces[index];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            if(field.number!==\"\"){\r\n                field.locked=true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    ResolveUnique = (deep = 0,solutions=0) => {\r\n        if (solutions>1){\r\n            return solutions;\r\n        }\r\n        const t = this;\r\n        let changes = 1;\r\n        while (changes > 0) {\r\n            changes = 0;\r\n            changes += t.FillSingleOption(); // check if there are any field with only one option and use it\r\n            if (changes === 0) {\r\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\r\n            }\r\n        }\r\n\r\n        if (!t.CheckCompleteBoard()) {\r\n            const clonelist = t.CloneBoard();\r\n            const randomtry = t.Random();\r\n            let randomoptions = [...randomtry.options];\r\n            randomtry.number = randomoptions[0];\r\n            let last = 0;\r\n            let i = 0;\r\n            //let solutions = 0;\r\n            while (randomtry.number !== last && randomtry.number !== undefined) {\r\n                last = randomtry.number;\r\n                t.RestoreBoard(clonelist);\r\n                randomtry.number = last;\r\n                try {\r\n                    let sol=solutions;\r\n                    solutions=t.ResolveUnique(deep + 1,solutions);\r\n                    if(solutions>sol){\r\n                        solutions++;\r\n                    }\r\n                } catch (error) {\r\n                    //console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\r\n                } finally {\r\n                    if(!t.arrayEquals(randomoptions,[...randomtry.options])){\r\n                        randomoptions = [...randomtry.options];\r\n                        i=0;\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                    randomtry.number = randomoptions[i];\r\n                }\r\n            }\r\n            randomtry.number = \"\";\r\n\r\n            if (solutions > 1) {\r\n                return solutions;\r\n            }\r\n\r\n            if (!t.CheckCompleteBoard()) {\r\n                return t.ResolveUnique(deep + 1,solutions);\r\n            } else {\r\n                solutions++;\r\n                return solutions;\r\n            }\r\n        } else {\r\n            solutions++;\r\n            return solutions;\r\n        }\r\n    }\r\n\r\n\r\n    Resolve = (deep = 0) => {\r\n        const t = this;\r\n        let changes = 1;\r\n        while (changes > 0) {\r\n            changes = 0;\r\n            changes += t.FillSingleOption(); // check if there are any field with only one option and use it\r\n            if (changes === 0) {\r\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\r\n            }\r\n        }\r\n\r\n        if (!t.CheckCompleteBoard()) {\r\n            const clonelist = t.CloneBoard();\r\n            const randomtry = t.Random();\r\n            let randomoptions = [...randomtry.options];\r\n            randomtry.number = randomoptions[0];\r\n            let last = 0;\r\n            let i = 0;\r\n            while (!t.CheckCompleteBoard() && randomtry.number !== last && randomtry.number !== undefined) {\r\n                last = randomtry.number;\r\n                t.RestoreBoard(clonelist);\r\n                randomtry.number = last;\r\n                try {\r\n                    t.Resolve(deep + 1);\r\n                } catch (error) {\r\n                    //console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\r\n                } finally {\r\n                    if(!t.arrayEquals(randomoptions,[...randomtry.options])){\r\n                        randomoptions = [...randomtry.options];\r\n                        i=0;\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                    randomtry.number = randomoptions[i];\r\n                }\r\n            }\r\n            randomtry.number=\"\";\r\n\r\n\r\n            if (!t.CheckCompleteBoard()) {\r\n                t.Resolve();\r\n            } else {\r\n                randomtry.SetValue(randomtry.number);\r\n                randomtry.options.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    CloneBoard = () => {\r\n        const t = this;\r\n        let clonelist = [];\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const e = t.list[i];\r\n            clonelist.push({\r\n                x: e.x,\r\n                y: e.y,\r\n                i: e.i,\r\n                j: e.j,\r\n                number: e.number,\r\n                options: [...e.options],\r\n                locked: e.locked,\r\n                error: e.error\r\n            });\r\n        }\r\n        return clonelist;\r\n    }\r\n    RestoreBoard = (clonelist) => {\r\n        const t = this;\r\n        for (let index = 0; index < clonelist.length; index++) {\r\n            const e = clonelist[index];\r\n            const element = t.matrix[e.x][e.y].submatrix[e.i][e.j];\r\n            element.SetValue(e.number);\r\n            element.SetValueOptions(new Set(e.options));\r\n            element.locked = e.locked;\r\n            element.SetValueError(e.error);\r\n        }\r\n        this.CheckSuccess();\r\n    }\r\n\r\n    CheckCompleteBoard = () => {\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    Random = (min = 3) => { //returns a cell with less options than MIN\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                t.CheckOptions(element);\r\n                if (element.options.size < min) {\r\n                    return element;\r\n                }\r\n            }\r\n        }\r\n        return t.Random(min + 1);\r\n    }\r\n\r\n\r\n    FillSingleOption = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                t.CheckOptions(element);\r\n                if (element.options.size === 1) {\r\n                    element.SetValue(element.options.values().next().value);\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    FillByLine = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                if (t.CheckUnique(element)) {\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    CheckUnique = (number) => {\r\n        const t = this;\r\n        let unique = 0;\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        unique = t.UniqueList(t.matrix[x][y].checklist, number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.verticallines[x][i], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.horizontallines[y][j], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    UniqueList = (arr, number) => {\r\n        const t = this;\r\n        let options = new Set();\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number === \"\" && element !== number) {\r\n                t.CheckOptions(element);\r\n                options = new Set([...options, ...element.options]);\r\n            }\r\n        }\r\n        t.CheckOptions(number);\r\n        let difference = new Set([...number.options].filter(x => !options.has(x)));\r\n        if (difference.size === 1) {\r\n            return difference.values().next().value;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    CheckOptions = (number) => {\r\n        const t = this;\r\n        let list = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        t.DuplicatesList(t.matrix[x][y].checklist, list);\r\n        t.DuplicatesList(t.verticallines[x][i], list);\r\n        t.DuplicatesList(t.horizontallines[y][j], list);\r\n        number.options = list;\r\n    }\r\n\r\n    DuplicatesList = (arr, list) => {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number !== \"\") {\r\n                list.delete(element.number);\r\n            }\r\n        }\r\n        if (list.size === 0) {\r\n            throw Error(\"Empty options\");\r\n        }\r\n    }\r\n\r\n    arrayEquals=(a, b)=> {\r\n        return Array.isArray(a) &&\r\n          Array.isArray(b) &&\r\n          a.length === b.length &&\r\n          a.every((val, index) => val === b[index]);\r\n      }\r\n\r\n}\r\n\r\nexport default SudokuResolver;","import SudokuNumber from './SudokuNumber';\r\n\r\n\r\n\r\nclass Sudoku {\r\n    constructor() { //creates an empty sudoku board\r\n        this.CreateEmptyBoard();\r\n    }\r\n\r\n    CreateEmptyBoard = () => {\r\n        this.success = false;\r\n        this.matrix = [];\r\n        this.emptyspaces = [];\r\n        this.verticallines = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ]; //3x3 vertical lines\r\n        this.horizontallines = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ]; //3x3 horizontal lines\r\n        this.list = []; //complete list\r\n        for (let x = 0; x < 3; x++) {\r\n            let rows = [];\r\n            for (let y = 0; y < 3; y++) {\r\n                rows[y] = new SudokuNumber(x, y, this);\r\n                this.EmptySpaces(x, y);\r\n            }\r\n            this.matrix[x] = rows;\r\n        }\r\n    }\r\n    \r\n    SetSuccessValue=(value)=>{\r\n        if (this.setSuccess !== undefined) {\r\n            this.setSuccess(value);\r\n        }\r\n        this.success = value;\r\n    }\r\n\r\n    CheckSuccess = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            if (element.number === \"\" || element.error) {\r\n                this.SetSuccessValue(false);\r\n                return;\r\n            }\r\n        }\r\n        this.SetSuccessValue(true);\r\n    }\r\n\r\n\r\n    CleanDuplicated = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            element.SetValueError(false);\r\n        }\r\n    }\r\n\r\n\r\n    CheckDuplicates = () => {\r\n        let count = 0;\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                const square = this.matrix[i][j].checklist;\r\n                count += this.MarkDuplicates(square);\r\n\r\n                const vertical = this.verticallines[i][j];\r\n                count += this.MarkDuplicates(vertical);\r\n\r\n                const horizontal = this.horizontallines[i][j];\r\n                count += this.MarkDuplicates(horizontal);\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n\r\n    MarkDuplicates = (arr) => {\r\n        let count = 0;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (this.duplicated(arr, element.number)) {\r\n                element.SetValueError(true);\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    duplicated = (arr, search) => {\r\n        let count = arr.reduce(function(n, element) {\r\n            return n + (search !== \"\" && element.number === search);\r\n        }, 0);\r\n        return (count > 1);\r\n    }\r\n\r\n    EmptySpaces = (x, y) => {\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                this.emptyspaces.push([x, y, i, j]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sudoku;","import React, { lazy, Suspense } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\n// import { DifficultyButtons, DarkModeButton } from './Buttons';\r\nconst DifficultyButtons = lazy(() => import('./buttons/DifficultyButtons'));\r\nconst DarkModeButton = lazy(() => import('./buttons/DarkModeButton'));\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: { flexGrow: 1, },\r\n    menuButton: { marginRight: theme.spacing(2), },\r\n    title: { flexGrow: 1, }\r\n}));\r\n\r\nconst renderLoader = () => null;\r\n\r\nexport default function ButtonAppBar(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton> */}\r\n                    <Typography variant=\"h6\" className={classes.title}> Sudoku </Typography>\r\n                    <Suspense fallback={renderLoader()}>\r\n                        <DarkModeButton {...props} />\r\n                    </Suspense>\r\n                    <Suspense fallback={renderLoader()}>\r\n                        <DifficultyButtons {...props} />\r\n                    </Suspense>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container>\r\n                {props.children}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","// import React from 'react';\r\nimport Header from './components/Header';\r\n// import Home from './pages/Home';\r\n\r\nimport SudokuResolver from \"./logic/SudokuResolver\";\r\nimport LocalStorage from \"./logic/LocalStorage\";\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport blueGrey from '@material-ui/core/colors/blueGrey';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\n\r\n\r\nimport React, { lazy, Suspense } from 'react';\r\nconst Home = lazy(() => import('./pages/Home'));\r\nconst renderLoader = () => null;\r\n\r\n\r\nconst cacheboard = LocalStorage.get(\"sudoku_board\", null);\r\nconst baseboard = new SudokuResolver(45, cacheboard);\r\n\r\nfunction App() {\r\n    const [Difficulty, setDifficulty] = React.useState(LocalStorage.get(\"difficulty\", 45));\r\n    const [DarkMode,SetDarkMode]=React.useState(LocalStorage.get(\"dark_mode\", useMediaQuery('(prefers-color-scheme: dark)')));\r\n    const theme = React.useMemo(\r\n        () =>\r\n            createMuiTheme({\r\n                palette: {\r\n                    primary: {\r\n                        main: DarkMode?blueGrey[800]:indigo[800],\r\n                    },\r\n                    secondary:{\r\n                        main:purple[500]\r\n                    },\r\n                    type: DarkMode ? 'dark' : 'light',\r\n                },\r\n            }),\r\n        [DarkMode],\r\n    );\r\n\r\n    const Save = () => {\r\n        LocalStorage.set(\"difficulty\", Difficulty);\r\n        LocalStorage.set(\"dark_mode\", DarkMode);\r\n    }\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"beforeunload\", Save);\r\n        return () => window.removeEventListener(\"beforeunload\", Save);\r\n    });\r\n\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <Header board={baseboard} Difficulty={Difficulty} setDifficulty={setDifficulty} DarkMode={DarkMode} SetDarkMode={SetDarkMode}>\r\n                <Suspense fallback={renderLoader()}>\r\n                    <Home board={baseboard} Difficulty={Difficulty} setDifficulty={setDifficulty} />\r\n                </Suspense>\r\n            </Header>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n\r\nserviceWorker.register();"],"sourceRoot":""}