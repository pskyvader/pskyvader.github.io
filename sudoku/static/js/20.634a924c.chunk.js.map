{"version":3,"sources":["components/buttons/LanguageSelector.jsx"],"names":["useStyles","makeStyles","theme","select","color","palette","primary","contrastText","padding","spacing","icon","margin","nested","paddingLeft","LanguageSelector","mode","classes","useContext","LanguageContext","userLanguage","userLanguageChange","useState","anchorEl","setAnchorEl","handleMenuItemClick","e","id","setOpen","React","open","title","Text","aria-controls","aria-haspopup","onClick","event","currentTarget","className","smDown","languageOptions","mdUp","Boolean","onClose","Object","entries","map","name","key","selected","Fragment","button","in","timeout","unmountOnExit","component","disablePadding"],"mappings":"8UAyBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,OAAQ,CACJC,MAAOF,EAAMG,QAAQC,QAAQC,aAC7BC,QAASN,EAAMO,QAAQ,EAAG,IAE9BC,KAAM,CACFC,OAAQT,EAAMO,QAAQ,IAE1BG,OAAQ,CACJC,YAAaX,EAAMO,QAAQ,QAMpB,SAASK,EAAT,GAAgD,IAAD,IAAnBC,YAAmB,MAAZ,SAAY,EACpDC,EAAUhB,IAD0C,EAEbiB,qBAAWC,KAAhDC,EAFkD,EAElDA,aAAcC,EAFoC,EAEpCA,mBAFoC,EAG1BC,mBAAS,MAHiB,mBAGnDC,EAHmD,KAGzCC,EAHyC,KAYpDC,EAAsB,SAACC,EAAGC,GAC5BN,EAAmBM,GACnBH,EAAY,MACZI,GAAQ,IAf8C,EAkBlCC,IAAMP,UAAS,GAlBmB,mBAkBnDQ,EAlBmD,KAkB7CF,EAlB6C,KAgC1D,MAAa,WAATZ,EAEI,6BACI,kBAAC,IAAD,CAASe,MAAOC,YAAK,aACjB,kBAAC,IAAD,CAAQC,gBAAc,cAAcC,gBAAc,OAAOC,QAhCrD,SAACC,GACjBZ,EAAYY,EAAMC,gBA+ByEC,UAAWrB,EAAQb,QAC9F,kBAAC,IAAD,CAAckC,UAAWrB,EAAQN,OACjC,kBAAC,IAAD,CAAQ4B,QAAM,GACTC,IAAgBpB,IAErB,kBAAC,IAAD,CAAQqB,MAAI,GACPrB,KAIb,kBAAC,IAAD,CACIO,GAAG,cACHJ,SAAUA,EACVO,KAAMY,QAAQnB,GACdoB,QA3CI,WAChBnB,EAAY,QA2CCoB,OAAOC,QAAQL,KAAiBM,KAAI,mCAAEnB,EAAF,KAAMoB,EAAN,YACjC,kBAAC,IAAD,CAAUC,IAAKrB,EAAIsB,SAAUtB,IAAOP,EAAce,QAAS,SAACC,GAAD,OAAWX,EAAoBW,EAAOT,KAAMoB,QAOnH,kBAAC,IAAMG,SAAP,KACI,kBAAC,IAAD,CAAUC,QAAM,EAAChB,QAxCL,WACpBP,GAASE,KAwCG,kBAAC,IAAD,KACI,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CAAcvB,QAASyB,YAAK,cAC3BF,EAAO,kBAAC,IAAD,MAAiB,kBAAC,IAAD,OAE7B,kBAAC,IAAD,CAAUsB,GAAItB,EAAMuB,QAAQ,OAAOC,eAAa,GAC5C,kBAAC,IAAD,CAAMC,UAAU,MAAMC,gBAAc,GAC/BZ,OAAOC,QAAQL,KAAiBM,KAAI,mCAAEnB,EAAF,KAAMoB,EAAN,YACjC,kBAAC,IAAD,CAAUC,IAAKrB,EAAIsB,SAAUtB,IAAOP,EAAc+B,QAAM,EAACb,UAAWrB,EAAQJ,OAAQsB,QAAS,SAACC,GAAD,OAAWX,EAAoBW,EAAOT,KAC/H,kBAAC,IAAD,KACKA,GAEL,kBAAC,IAAD,CAAcpB,QAASwC","file":"static/js/20.634a924c.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\n\r\n\r\n// import LocalStorage from '../../logic/LocalStorage';\r\nimport Text, { LanguageContext, languageOptions } from '../../languages/Language';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    select: {\r\n        color: theme.palette.primary.contrastText,\r\n        padding: theme.spacing(1, 0)\r\n    },\r\n    icon: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function LanguageSelector({ mode = \"button\" }) {\r\n    const classes = useStyles();\r\n    const { userLanguage, userLanguageChange } = useContext(LanguageContext);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    // set selected language by calling context method\r\n    const handleMenuItemClick = (e, id) => {\r\n        userLanguageChange(id);\r\n        setAnchorEl(null);\r\n        setOpen(false);\r\n    }\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickList = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n\r\n    // useEffect(() => {\r\n    //     let defaultLanguage = LocalStorage.get(\"rcml-lang\", navigator.language.substring(0, 2) || navigator.userLanguage.substring(0, 2));\r\n    //     if(userLanguage!==defaultLanguage){\r\n    //         userLanguageChange(defaultLanguage);\r\n    //     }\r\n    // }, [userLanguage,userLanguageChange]);\r\n\r\n    if (mode === \"button\") {\r\n        return (\r\n            <div>\r\n                <Tooltip title={Text('language')}>\r\n                    <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} className={classes.select}>\r\n                        <LanguageIcon className={classes.icon} />\r\n                        <Hidden smDown>\r\n                            {languageOptions[userLanguage]}\r\n                        </Hidden>\r\n                        <Hidden mdUp>\r\n                            {userLanguage}\r\n                        </Hidden>\r\n                    </Button>\r\n                </Tooltip>\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorEl}\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}>\r\n                    {Object.entries(languageOptions).map(([id, name]) => (\r\n                        <MenuItem key={id} selected={id === userLanguage} onClick={(event) => handleMenuItemClick(event, id)}>{name}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <ListItem button onClick={handleClickList}>\r\n                    <ListItemIcon>\r\n                        <LanguageIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={Text(\"language\")} />\r\n                    {open ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                    <List component=\"div\" disablePadding>\r\n                        {Object.entries(languageOptions).map(([id, name]) => (\r\n                            <ListItem key={id} selected={id === userLanguage} button className={classes.nested} onClick={(event) => handleMenuItemClick(event, id)}>\r\n                                <ListItemIcon>\r\n                                    {id}\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={name} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Collapse>\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n\r\n}"],"sourceRoot":""}