{"version":3,"sources":["components/buttons/DifficultyButtons.jsx"],"names":["buttoncolor","pallete","getContrastText","backgroundColor","main","color","border","dark","useStyles","makeStyles","theme","palette","info","success","warning","error","buttonstar","position","bottom","spacing","right","fontSize","borderRadius","light","button1","button2","button3","button4","DifficultyButtons","props","board","setDifficulty","Difficulty","classes","ResetBoard","n","newboard","SudokuResolver","LocalStorage","set","newmatrix","CloneBoard","RestoreBoard","size","title","Text","className","onClick"],"mappings":"sGAAA,iLAgBMA,EAAc,SAACC,EAASC,GAC1B,MAAO,CACHC,gBAAiBF,EAAQG,KACzBC,MAAOH,EAAgBD,EAAQG,MAC/BE,OAAQ,OACR,UAAW,CACPH,gBAAiBF,EAAQM,KACzBF,MAAOH,EAAgBD,EAAQM,MAC/BD,OAAQ,UAIdE,EAAYC,aAAW,SAACC,GAAW,IAAD,EACuBA,EAAMC,QAAzDC,EAD4B,EAC5BA,KAAMC,EADsB,EACtBA,QAASC,EADa,EACbA,QAASC,EADI,EACJA,MAAOb,EADH,EACGA,gBACvC,MAAO,CACHc,WAAY,CACRC,SAAU,WACVC,OAAQR,EAAMS,QAAQ,KACtBC,MAAOV,EAAMS,QAAQ,KACrBE,SAAU,UACVC,aAAc,OACdnB,gBAAiB,QACjBE,MAAOS,EAAQS,OAEnBC,QAASxB,EAAYY,EAAMV,GAC3BuB,QAASzB,EAAYa,EAASX,GAC9BwB,QAAS1B,EAAYc,EAASZ,GAC9ByB,QAAS3B,EAAYe,EAAOb,OAgDrB0B,UA5CW,SAACC,GAAW,IAC1BC,EAAqCD,EAArCC,MAAOC,EAA8BF,EAA9BE,cAAeC,EAAeH,EAAfG,WAExBC,EAAUzB,IAEhB,SAAS0B,EAAWC,GAChB,IAAMC,EAAW,IAAIC,IAAeF,GACpCJ,EAAcI,GACdG,IAAaC,IAAI,aAAcJ,GAC/B,IAAMK,EAAUJ,EAASK,aACzBX,EAAMY,aAAaF,GACnBF,IAAaC,IAAI,eAAgBC,GAIrC,OAAO,kBAAC,IAAD,CAAaG,KAAK,SACrB,kBAAC,IAAD,CAASC,MAAOC,YAAK,iBACjB,kBAAC,IAAD,CAAQC,UAAWb,EAAQT,QAASuB,QAAS,kBAAMb,EAAW,MAC1D,kBAAC,IAAD,MACgB,KAAfF,EAAoB,kBAAC,IAAD,CAAWc,UAAWb,EAAQjB,aAAiB,KAG5E,kBAAC,IAAD,CAAS4B,MAAOC,YAAK,aACjB,kBAAC,IAAD,CAAQC,UAAWb,EAAQR,QAASsB,QAAS,kBAAMb,EAAW,MAC1D,kBAAC,IAAD,MACgB,KAAfF,EAAoB,kBAAC,IAAD,CAAWc,UAAWb,EAAQjB,aAAiB,KAG5E,kBAAC,IAAD,CAAS4B,MAAOC,YAAK,eACjB,kBAAC,IAAD,CAAQC,UAAWb,EAAQP,QAASqB,QAAS,kBAAMb,EAAW,MAC1D,kBAAC,IAAD,MACgB,KAAfF,EAAoB,kBAAC,IAAD,CAAWc,UAAWb,EAAQjB,aAAiB,KAG5E,kBAAC,IAAD,CAAS4B,MAAOC,YAAK,aACjB,kBAAC,IAAD,CAAQC,UAAWb,EAAQN,QAASoB,QAAS,kBAAMb,EAAW,MAC1D,kBAAC,IAAD,MACgB,KAAfF,EAAoB,kBAAC,IAAD,CAAWc,UAAWb,EAAQjB,aAAiB","file":"static/js/12.603a19a7.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport FaceIcon from '@material-ui/icons/Face';\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\nimport StarsIcon from '@material-ui/icons/Stars';\n\nimport SudokuResolver from \"../../logic/SudokuResolver\";\nimport LocalStorage from \"../../logic/LocalStorage\";\nimport Text from '../../languages/Language';\n\nconst buttoncolor = (pallete, getContrastText) => {\n    return {\n        backgroundColor: pallete.main,\n        color: getContrastText(pallete.main),\n        border: \"none\",\n        '&:hover': {\n            backgroundColor: pallete.dark,\n            color: getContrastText(pallete.dark),\n            border: \"none\",\n        },\n    }\n}\nconst useStyles = makeStyles((theme) => {\n    const { info, success, warning, error, getContrastText } = theme.palette;\n    return {\n        buttonstar: {\n            position: \"absolute\",\n            bottom: theme.spacing(0.25),\n            right: theme.spacing(0.25),\n            fontSize: \"0.75rem\",\n            borderRadius: \"100%\",\n            backgroundColor: \"white\",\n            color: warning.light\n        },\n        button1: buttoncolor(info, getContrastText),\n        button2: buttoncolor(success, getContrastText),\n        button3: buttoncolor(warning, getContrastText),\n        button4: buttoncolor(error, getContrastText)\n    }\n});\n\nconst DifficultyButtons = (props) => {\n    const { board, setDifficulty, Difficulty } = props;\n\n    const classes = useStyles();\n\n    function ResetBoard(n) {\n        const newboard = new SudokuResolver(n);\n        setDifficulty(n);\n        LocalStorage.set(\"difficulty\", n);\n        const newmatrix=newboard.CloneBoard();\n        board.RestoreBoard(newmatrix);\n        LocalStorage.set(\"sudoku_board\", newmatrix);\n    }\n\n\n    return <ButtonGroup size=\"small\">\n        <Tooltip title={Text('veryeasymode')}>\n            <Button className={classes.button1} onClick={() => ResetBoard(63)}>\n                <EmojiEmotionsIcon />\n                {Difficulty === 63 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\n            </Button>\n        </Tooltip>\n        <Tooltip title={Text('easymode')}>\n            <Button className={classes.button2} onClick={() => ResetBoard(45)}>\n                <InsertEmoticonIcon />\n                {Difficulty === 45 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\n            </Button>\n        </Tooltip>\n        <Tooltip title={Text('mediummode')}>\n            <Button className={classes.button3} onClick={() => ResetBoard(36)}>\n                <FaceIcon />\n                {Difficulty === 36 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\n            </Button>\n        </Tooltip>\n        <Tooltip title={Text('hardmode')}>\n            <Button className={classes.button4} onClick={() => ResetBoard(27)}>\n                <MoodBadIcon />\n                {Difficulty === 27 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\n            </Button>\n        </Tooltip>\n    </ButtonGroup>\n}\n\n\nexport default DifficultyButtons;"],"sourceRoot":""}