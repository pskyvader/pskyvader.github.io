{"version":3,"sources":["../node_modules/@material-ui/core/Container/Container.js"],"names":["Container","React","props","ref","classes","className","component","Component","disableGutters","fixed","maxWidth","other","_objectWithoutPropertiesLoose","_extends","clsx","root","capitalize","String","withStyles","theme","width","marginLeft","boxSizing","marginRight","paddingLeft","spacing","paddingRight","display","breakpoints","up","Object","keys","values","reduce","acc","breakpoint","value","unit","maxWidthXs","Math","max","xs","maxWidthSm","sm","maxWidthMd","md","maxWidthLg","lg","maxWidthXl","xl","name"],"mappings":"+MA8EMA,EAAyBC,cAAiB,SAAmBC,EAAOC,GAAK,IAE3EC,EAMEF,EANFE,QACAC,EAKEH,EALFG,UAH2E,EAQzEH,EAJFI,UAAWC,OAJgE,MAIpD,MAJoD,IAQzEL,EAHFM,sBAL2E,WAQzEN,EAFFO,aAN2E,WAQzEP,EADFQ,gBAP2E,MAOhE,KAPgE,EASvEC,EAAQC,YAA8BV,EAAO,CAAC,UAAW,YAAa,YAAa,iBAAkB,QAAS,aAEpH,OAAoBD,gBAAoBM,EAAWM,YAAS,CAC1DR,UAAWS,YAAKV,EAAQW,KAAMV,EAAWI,GAASL,EAAQK,MAAOD,GAAkBJ,EAAQI,gBAA6B,IAAbE,GAAsBN,EAAQ,WAAD,OAAYY,YAAWC,OAAOP,OACtKP,IAAKA,GACJQ,OAoDUO,eAzIO,SAAAC,GAAK,MAAK,CAE9BJ,KAAM,aACJK,MAAO,OACPC,WAAY,OACZC,UAAW,aACXC,YAAa,OACbC,YAAaL,EAAMM,QAAQ,GAC3BC,aAAcP,EAAMM,QAAQ,GAC5BE,QAAS,SAERR,EAAMS,YAAYC,GAAG,MAAQ,CAC5BL,YAAaL,EAAMM,QAAQ,GAC3BC,aAAcP,EAAMM,QAAQ,KAKhCjB,eAAgB,CACdgB,YAAa,EACbE,aAAc,GAIhBjB,MAAOqB,OAAOC,KAAKZ,EAAMS,YAAYI,QAAQC,QAAO,SAACC,EAAKC,GACxD,IAAMC,EAAQjB,EAAMS,YAAYI,OAAOG,GAQvC,OANc,IAAVC,IACFF,EAAIf,EAAMS,YAAYC,GAAGM,IAAe,CACtCzB,SAAU,GAAF,OAAK0B,GAAL,OAAajB,EAAMS,YAAYS,QAIpCH,IACN,IAGHI,WAAY,eACTnB,EAAMS,YAAYC,GAAG,MAAQ,CAC5BnB,SAAU6B,KAAKC,IAAIrB,EAAMS,YAAYI,OAAOS,GAAI,OAKpDC,WAAY,eACTvB,EAAMS,YAAYC,GAAG,MAAQ,CAC5BnB,SAAU,GAAF,OAAKS,EAAMS,YAAYI,OAAOW,IAA9B,OAAmCxB,EAAMS,YAAYS,QAKjEO,WAAY,eACTzB,EAAMS,YAAYC,GAAG,MAAQ,CAC5BnB,SAAU,GAAF,OAAKS,EAAMS,YAAYI,OAAOa,IAA9B,OAAmC1B,EAAMS,YAAYS,QAKjES,WAAY,eACT3B,EAAMS,YAAYC,GAAG,MAAQ,CAC5BnB,SAAU,GAAF,OAAKS,EAAMS,YAAYI,OAAOe,IAA9B,OAAmC5B,EAAMS,YAAYS,QAKjEW,WAAY,eACT7B,EAAMS,YAAYC,GAAG,MAAQ,CAC5BnB,SAAU,GAAF,OAAKS,EAAMS,YAAYI,OAAOiB,IAA9B,OAAmC9B,EAAMS,YAAYS,WAsEjC,CAChCa,KAAM,gBADOhC,CAEZlB","file":"static/js/24.99d35eef.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    marginLeft: 'auto',\n    boxSizing: 'border-box',\n    marginRight: 'auto',\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    display: 'block',\n    // Fix IE11 layout when used with main.\n    [theme.breakpoints.up('sm')]: {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }\n  },\n\n  /* Styles applied to the root element if `disableGutters={true}`. */\n  disableGutters: {\n    paddingLeft: 0,\n    paddingRight: 0\n  },\n\n  /* Styles applied to the root element if `fixed={true}`. */\n  fixed: Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {\n    const value = theme.breakpoints.values[breakpoint];\n\n    if (value !== 0) {\n      acc[theme.breakpoints.up(breakpoint)] = {\n        maxWidth: `${value}${theme.breakpoints.unit}`\n      };\n    }\n\n    return acc;\n  }, {}),\n\n  /* Styles applied to the root element if `maxWidth=\"xs\"`. */\n  maxWidthXs: {\n    [theme.breakpoints.up('xs')]: {\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }\n  },\n\n  /* Styles applied to the root element if `maxWidth=\"sm\"`. */\n  maxWidthSm: {\n    [theme.breakpoints.up('sm')]: {\n      maxWidth: `${theme.breakpoints.values.sm}${theme.breakpoints.unit}`\n    }\n  },\n\n  /* Styles applied to the root element if `maxWidth=\"md\"`. */\n  maxWidthMd: {\n    [theme.breakpoints.up('md')]: {\n      maxWidth: `${theme.breakpoints.values.md}${theme.breakpoints.unit}`\n    }\n  },\n\n  /* Styles applied to the root element if `maxWidth=\"lg\"`. */\n  maxWidthLg: {\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: `${theme.breakpoints.values.lg}${theme.breakpoints.unit}`\n    }\n  },\n\n  /* Styles applied to the root element if `maxWidth=\"xl\"`. */\n  maxWidthXl: {\n    [theme.breakpoints.up('xl')]: {\n      maxWidth: `${theme.breakpoints.values.xl}${theme.breakpoints.unit}`\n    }\n  }\n});\nconst Container = /*#__PURE__*/React.forwardRef(function Container(props, ref) {\n  const {\n    classes,\n    className,\n    component: Component = 'div',\n    disableGutters = false,\n    fixed = false,\n    maxWidth = 'lg'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes[`maxWidth${capitalize(String(maxWidth))}`]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiContainer'\n})(Container);"],"sourceRoot":""}