{"version":3,"sources":["logic/LocalStorage.js","components/Header.jsx","App.jsx","index.js","languages/Language.jsx","logic/SudokuValue.js","logic/SudokuNumber.js","logic/SudokuResolver.js","logic/Sudoku.js","ContextProviders/BoardContext.jsx","ContextProviders/ThemeContext.jsx","serviceWorker.js","ContextProviders/ServiceWorkerContext.jsx","languages lazy /^/.*/.json$/ groupOptions: {} namespace object"],"names":["LocalStorage","key","default_value","expiration_time","value","JSON","parse","localStorage","getItem","this","set","Date","now","data","setItem","stringify","DifficultyButtons","lazy","DarkModeButton","Drawer","Container","useStyles","makeStyles","theme","root","flexGrow","margin","marginRight","spacing","breakpoints","down","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","up","width","marginLeft","easeOut","enteringScreen","ButtonAppBar","props","classes","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","desktopOpen","setdesktopOpen","handleDesktopDrawerToggle","setTimeout","window","dispatchEvent","Event","className","AppBar","position","clsx","Toolbar","Hidden","smUp","IconButton","edge","color","aria-label","onClick","xsDown","mdUp","smDown","Typography","variant","fallback","children","Home","ServiceWorker","renderLoader","Text","App","Language","ReactDOM","render","StrictMode","document","getElementById","languageOptions","en","es","dictionaryList","browserlanguage","navigator","language","userLanguage","substring","userLang","get","defaultlanguage","loadlanguage","lang","a","then","l","default","LanguageContext","createContext","dictionary","LanguageProvider","setUserLanguage","dictionaryloaded","setdictionaryloaded","selectedLanguage","useEffect","provider","userLanguageChange","selected","newLanguage","Provider","tid","useContext","SudokuValue","x","y","i","j","callback","SetNumber","number","SetValue","Duplicates","undefined","SetFinalNumber","SetValueError","error","SetError","SetValueOptions","options","SetOptions","Set","locked","SudokuNumber","CleanDuplicated","CheckDuplicates","CheckEmpty","CheckSuccess","submatrix","checklist","rows","push","verticallines","horizontallines","list","SudokuResolver","n","cacheboard","newboard","RandomNumbers","t","Error","emptyspaces","index","pos","Math","floor","random","length","current","field","matrix","clear","splice","CreateBoard","t1","performance","q","qqwing","setRecordHistory","setPrintStyle","PrintStyle","READABLE","tries","best","closer","difficulty","puzzle","difficultytarget","getDifficulty","generatePuzzle","solve","abs","getPuzzleString","t2","console","log","FromString","boardstring","board","split","join","trim","y1","i1","forEach","row","r","x1","column","c","element","CreateBoard2","deep","t0","Resolve","errorcount","CreateEmptyBoard","fullboard","CloneBoard","CleanBoard","difficultycount","removed","maxdiff","tmp","tmpdifficultycount","clonelist","solutions","ResolveUnique","RestoreBoard","depth","changes","FillSingleOption","FillByLine","CheckCompleteBoard","randomtry","Random","randomoptions","last","sol","arrayEquals","min","CheckOptions","size","values","next","CheckUnique","unique","UniqueList","arr","difference","filter","has","success","EmptySpaces","SetSuccessValue","setSuccess","count","square","MarkDuplicates","vertical","horizontal","isDuplicated","search","reduce","b","Array","isArray","every","val","e","DuplicatesList","delete","BoardContext","BoardContextProvider","Difficulty","setDifficulty","OptionsActive","setOptionsActive","Success","Save","SaveBoard","fn","ms","timer","clearTimeout","apply","arguments","debounce","ResetBoard","ThemeContext","DefaultColor","primary","light","indigo","dark","secondary","purple","ThemeContextProvider","useMediaQuery","DarkMode","SetDarkMode","SelectedColor","SetSelectedColor","useMemo","createMuiTheme","palette","main","type","components","MuiListItem","styleOverrides","button","backgroundColor","Grey","SwitchDarkMode","SetColor","newcolor","ResetColor","isLocalhost","Boolean","location","hostname","match","register","config","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ServiceWorkerContext","ServiceWorkerProvider","Message","setMessage","waitingServiceWorker","setWaitingServiceWorker","installPrompt","setinstallPrompt","onOpen","waiting","preventDefault","event","target","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","code","ids","id","keys","Object","module","exports"],"mappings":"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","file":"static/js/main.ec512815.chunk.js","sourcesContent":["class LocalStorage {\r\n    // 1 day default \r\n    static get(key, default_value = null, expiration_time = 1) {\r\n        var value = JSON.parse(localStorage.getItem(key));\r\n        if (value == null) {\r\n            this.set(key, default_value, expiration_time);\r\n        } else {\r\n            if (value.expiration_time < Date.now()) {\r\n                this.set(key, default_value, expiration_time);\r\n            } else {\r\n                return value.data;\r\n            }\r\n        }\r\n\r\n        return default_value;\r\n    }\r\n    static set(key, value, expiration_time = 1) {\r\n        if (value != null) {\r\n            expiration_time = Date.now() + expiration_time * 24 * 60 * 60 * 1000;\r\n            localStorage.setItem(key, JSON.stringify({\r\n                data: value,\r\n                expiration_time: expiration_time\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default LocalStorage;","import React, { lazy, Suspense } from 'react';\r\nimport clsx from 'clsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nconst DifficultyButtons = lazy(() => import('./buttons/DifficultyButtons'));\r\nconst DarkModeButton = lazy(() => import('./buttons/DarkModeButton'));\r\n// const LanguageSelector = lazy(() => import('./buttons/LanguageSelector'));\r\nconst Drawer = lazy(() => import('./Drawer'));\r\n\r\nconst Container = lazy(() => import('@material-ui/core/Container'));\r\n\r\n// import Container from '@material-ui/core/Container';\r\n\r\n\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: { flexGrow: 1, },\r\n    margin: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.down('xs')]: {\r\n            marginRight: theme.spacing(0.5),\r\n        },\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n            transition: theme.transitions.create(['margin', 'width'], {\r\n                easing: theme.transitions.easing.easeOut,\r\n                duration: theme.transitions.duration.enteringScreen,\r\n            }),\r\n        },\r\n    },\r\n}));\r\n\r\nconst renderLoader = () => null;\r\n\r\nexport default function ButtonAppBar(props) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n        if (desktopOpen) {\r\n            setdesktopOpen(!desktopOpen);\r\n        }\r\n    };\r\n    const [desktopOpen, setdesktopOpen] = React.useState(false);\r\n    const handleDesktopDrawerToggle = () => {\r\n        setdesktopOpen(!desktopOpen);\r\n        setTimeout( ()=> { window.dispatchEvent(new Event('resize')) }, theme.transitions.duration.enteringScreen);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\" className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: desktopOpen,\r\n            })}>\r\n                <Toolbar>\r\n                    <Hidden smUp >\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleDrawerToggle}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Hidden>\r\n                    <Hidden xsDown>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleDesktopDrawerToggle}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    </Hidden>\r\n                    <Hidden mdUp>\r\n                        <div className={classes.root}></div>\r\n                    </Hidden>\r\n                    <Hidden smDown>\r\n                        <Typography variant=\"h6\" className={classes.root}> Sudoku </Typography>\r\n                    </Hidden>\r\n                    {/* <Suspense fallback={renderLoader()}>\r\n                        <div className={classes.margin}>\r\n                            <LanguageSelector />\r\n                        </div>\r\n                    </Suspense> */}\r\n                    <Suspense fallback={renderLoader()}>\r\n                        <div className={classes.margin}>\r\n                            <DarkModeButton/>\r\n                        </div>\r\n                    </Suspense>\r\n                    <div className={classes.margin}>\r\n                        <Suspense fallback={renderLoader()}>\r\n                            <DifficultyButtons />\r\n                        </Suspense>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Suspense fallback={renderLoader()}>\r\n                <Drawer handleDrawerToggle={handleDrawerToggle} mobileOpen={mobileOpen} handleDesktopDrawerToggle={handleDesktopDrawerToggle} desktopOpen={desktopOpen}  {...props}>\r\n                    <Container>\r\n                        {props.children}\r\n                    </Container>\r\n                </Drawer>\r\n            </Suspense>\r\n        </div>\r\n    );\r\n}\r\n","import React, { lazy, Suspense } from 'react';\r\nimport Header from './components/Header';\r\nimport Text, { LanguageProvider } from './languages/Language';\r\nimport ServiceWorkerProvider from './ContextProviders/ServiceWorkerContext';\r\nimport ThemeProvider from './ContextProviders/ThemeContext';\r\nimport BoardProvider from './ContextProviders/BoardContext';\r\n\r\n\r\nconst Home = lazy(() => import('./pages/Home'));\r\nconst ServiceWorker = lazy(() => import('./components/buttons/ServiceWorker'));\r\n\r\nconst renderLoader = () => Text(\"loading\");\r\nfunction App() {\r\n    return (\r\n        <ThemeProvider>\r\n            <LanguageProvider>\r\n                <ServiceWorkerProvider>\r\n                    <BoardProvider>\r\n                        <Header>\r\n                            <Suspense fallback={renderLoader()}>\r\n                                <Home />\r\n                            </Suspense>\r\n                        </Header>\r\n                    </BoardProvider>\r\n                    <Suspense fallback={renderLoader()}>\r\n                        <ServiceWorker />\r\n                    </Suspense>\r\n                </ServiceWorkerProvider>\r\n            </LanguageProvider>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n//serviceWorker.unregister();\r\n","import React, { createContext, useContext, useState } from 'react';\r\nimport LocalStorage from '../logic/LocalStorage';\r\n\r\nexport const languageOptions = {\r\n    en: 'English',\r\n    es: 'Español',\r\n};\r\nlet dictionaryList = {};\r\n\r\n// create the language context with default selected language\r\nconst browserlanguage = (navigator.language || navigator.userLanguage).substring(0, 2);\r\nconst userLang = LocalStorage.get(\"rcml-lang\", browserlanguage);\r\nconst defaultlanguage = languageOptions[userLang] ? userLang : 'en';\r\n\r\nasync function loadlanguage(lang) {\r\n    if (!dictionaryList[lang]) {\r\n        return import('./' + lang + '.json').then(({ default: l }) => {\r\n            dictionaryList[lang] = l;\r\n        });\r\n    }\r\n}\r\n\r\nexport const LanguageContext = createContext({\r\n    userLanguage: defaultlanguage,\r\n    dictionary: {}\r\n});\r\n\r\n\r\nexport function LanguageProvider({ children }) {\r\n    const [userLanguage, setUserLanguage] = useState(defaultlanguage);\r\n    const [dictionaryloaded, setdictionaryloaded] = useState(false);\r\n    const selectedLanguage = dictionaryList[userLanguage] ? dictionaryList[userLanguage] : {};\r\n\r\n    React.useEffect(() => {\r\n        if (!dictionaryList[userLanguage]) {\r\n            loadlanguage(userLanguage).then(() => {\r\n                setdictionaryloaded(!dictionaryloaded);\r\n            });\r\n        }\r\n    });\r\n\r\n    const ChangeLanguage = async (selected) => {\r\n        const newLanguage = languageOptions[selected] ? selected : defaultlanguage;\r\n        LocalStorage.set(\"rcml-lang\", newLanguage);\r\n        if (!dictionaryList[newLanguage]) {\r\n            await loadlanguage(newLanguage).then(() => {\r\n                setUserLanguage(newLanguage);\r\n            });\r\n        } else {\r\n            setUserLanguage(newLanguage);\r\n        }\r\n    }\r\n\r\n    const provider = {\r\n        userLanguage,\r\n        dictionary: selectedLanguage,\r\n        userLanguageChange: ChangeLanguage\r\n    };\r\n\r\n    return (\r\n        <LanguageContext.Provider value={provider}>\r\n            {children}\r\n        </LanguageContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n// get text according to id & current language\r\nexport default function Text(tid) {\r\n    const languageContext = useContext(LanguageContext);\r\n    return languageContext.dictionary[tid] || tid + \"-TEXT\";\r\n}","class SudokuValue {\r\n    constructor(x, y, i, j, callback) {\r\n        this.number = \"\";\r\n        this.options = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        this.x = x;\r\n        this.y = y;\r\n        this.i = i;\r\n        this.j = j;\r\n        this.locked = false;\r\n        this.callback = callback;\r\n        this.error = false;\r\n    }\r\n\r\n    SetNumber = (number) => {\r\n        this.SetValue(number);\r\n        this.callback.Duplicates();\r\n    }\r\n    SetValue = (number) => {\r\n        if (this.SetFinalNumber !== undefined) {\r\n            this.SetFinalNumber(number);\r\n        }\r\n        this.number = number;\r\n    }\r\n    SetValueError = (error) => {\r\n        if (this.SetError !== undefined) {\r\n            this.SetError(error);\r\n        }\r\n        this.error = error;\r\n    }\r\n    SetValueOptions = (options) => {\r\n        if (this.SetOptions !== undefined) {\r\n            this.SetOptions(options);\r\n        }\r\n        this.options = options;\r\n    }\r\n}\r\n\r\nexport default SudokuValue;","import SudokuValue from './SudokuValue';\r\n\r\nclass SudokuNumber {\r\n    constructor(x, y, callback) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.callback = callback;\r\n        this.submatrix = [];\r\n        this.checklist = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            let rows = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                rows[j] = new SudokuValue(x, y, i, j, this);\r\n                this.checklist.push(rows[j]);\r\n                this.callback.verticallines[x][i].push(rows[j]);\r\n                this.callback.horizontallines[y][j].push(rows[j]);\r\n                this.callback.list.push(rows[j]);\r\n            }\r\n            this.submatrix[i] = rows;\r\n        }\r\n    }\r\n    Duplicates = () => {\r\n        this.callback.CleanDuplicated();\r\n        this.callback.CheckDuplicates();\r\n        this.callback.CheckEmpty();\r\n        this.callback.CheckSuccess();\r\n    }\r\n}\r\n\r\nexport default SudokuNumber;","import qqwing from 'qqwing';\r\nimport Sudoku from './Sudoku';\r\n\r\nclass SudokuResolver extends Sudoku {\r\n    constructor(n, cacheboard = null, newboard = false) {\r\n        super();\r\n        this.errorcount = 0;\r\n        this.difficultycount = 0;\r\n        if (cacheboard !== null) {\r\n            this.RestoreBoard(cacheboard);\r\n        } else if (!newboard) {\r\n            this.CreateBoard(n);\r\n        }\r\n    }\r\n    RandomNumbers = (number) => {\r\n        const t = this;\r\n        if (number > 81 || number < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        const emptyspaces = [...t.emptyspaces];\r\n        for (let index = 0; index < number; index++) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.SetValue(Math.floor(1 + Math.random() * 8));\r\n            t.CleanDuplicated();\r\n            const duplicated = t.CheckDuplicates();\r\n            if (duplicated > 0) {\r\n                field.number = \"\";\r\n                index--;\r\n                continue;\r\n            }\r\n            field.options.clear();\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n    }\r\n\r\n    CreateBoard = (n) => {\r\n        const t = this;\r\n        var t1 = performance.now();\r\n        var q = new qqwing();\r\n        q.setRecordHistory(true);\r\n        q.setPrintStyle(qqwing.PrintStyle.READABLE);\r\n        var tries = 0;\r\n        var best = {\r\n            closer: 10,\r\n            difficulty: 0,\r\n            puzzle: \"\"\r\n        }\r\n        var difficultytarget = n;\r\n\r\n        while (q.getDifficulty() !== difficultytarget && tries < 10) {\r\n            q.generatePuzzle();\r\n            q.solve();\r\n            tries++;\r\n            const closer = Math.abs(difficultytarget - q.getDifficulty());\r\n            if (best.closer > closer) {\r\n                best = {\r\n                    closer: closer,\r\n                    difficulty: q.getDifficulty(),\r\n                    puzzle: q.getPuzzleString()\r\n                }\r\n            }\r\n        }\r\n        var t2 = performance.now();\r\n        console.log(t2 - t1, tries);\r\n        t.FromString(best.puzzle);\r\n    }\r\n\r\n    FromString = (boardstring) => {\r\n        const t = this;\r\n        var board = boardstring.split(\"-\").join(\"\").trim().split(\"\\n\");\r\n        var newboard = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ];\r\n        var y1 = 0;\r\n        var i1 = 0;\r\n        board.forEach((row, i) => {\r\n            var r = row.split(\"|\");\r\n            var x1 = 0;\r\n            r.forEach((column, j) => {\r\n                if (column !== \"\") {\r\n                    var c = column.trim().split(\" \");\r\n                    newboard[x1][y1][i1] = c;\r\n                    x1++;\r\n                    if (x1 > 2) {\r\n                        x1 = 0;\r\n                    }\r\n                } else {\r\n                    r=null;\r\n                    return;\r\n                }\r\n            });\r\n            if(r!==null){\r\n                i1++;\r\n                if (i1 > 2) {\r\n                    i1 = 0;\r\n                    y1++;\r\n                }\r\n                if (y1 > 2) {\r\n                    y1 = 0;\r\n                }\r\n            }\r\n        });\r\n        for (let x = 0; x < 3; x++) {\r\n            for (let y = 0; y < 3; y++) {\r\n                for (let i = 0; i < 3; i++) {\r\n                    for (let j = 0; j < 3; j++) {\r\n                        // console.log(x,y,i,j,newboard[x][y][i][j]  );\r\n                        const number = newboard[x][y][j][i];\r\n                        const element = t.matrix[x][y].submatrix[i][j];\r\n                        if (number !== \".\") {\r\n                            element.SetValue(number);\r\n                            element.locked = true;\r\n                        } else {\r\n                            element.SetValue(\"\");\r\n                            element.locked = false;\r\n                        }\r\n                        element.SetValueOptions(new Set());\r\n                        element.SetValueError(false);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    CreateBoard2 = (n, deep = 0) => {\r\n        var t0 = performance.now();\r\n        const t = this;\r\n        if (n > 81 || n < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        t.RandomNumbers(27);\r\n\r\n        try {\r\n            t.Resolve();\r\n        } catch (error) {\r\n            t.errorcount += 1;\r\n            //console.log(error.message, t.errorcount, \"deep:\", deep);\r\n            t.CreateEmptyBoard();\r\n            t.CreateBoard(n, deep + 1);\r\n        }\r\n        t.fullboard = t.CloneBoard();\r\n        if (deep === 0) {\r\n            t.CleanBoard(n);\r\n        }\r\n        var t1 = performance.now();\r\n        if (deep === 0) {\r\n            console.log(\"CreateSudoku took \" + (t1 - t0) + \" milliseconds.\");\r\n        }\r\n    }\r\n    CleanBoard = (n) => {\r\n        const t = this;\r\n        t.difficultycount = 0;\r\n        if (n > 81 || n < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        const emptyspaces = [...t.emptyspaces];\r\n        t.removed = 0;\r\n\r\n        let maxdiff = 0;\r\n        while (t.removed < 81 - n && emptyspaces.length > 0) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            const tmp = field.number;\r\n            field.SetValue(\"\");\r\n            const tmpdifficultycount = t.difficultycount;\r\n            const clonelist = t.CloneBoard();\r\n            const solutions = t.ResolveUnique();\r\n            t.RestoreBoard(clonelist);\r\n            if (solutions === 0) {\r\n                console.log(solutions, \"solutions\");\r\n            }\r\n            if (solutions === 1) {\r\n                t.difficultycount++;\r\n                if (t.difficultycount - tmpdifficultycount > maxdiff) {\r\n                    maxdiff = t.difficultycount - tmpdifficultycount;\r\n                }\r\n                t.removed++;\r\n            } else {\r\n                t.difficultycount = tmpdifficultycount;\r\n                field.SetValue(tmp);\r\n            }\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n\r\n        t.difficultycount = maxdiff;\r\n        for (let index = 0; index < t.emptyspaces.length; index++) {\r\n            const current = t.emptyspaces[index];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            if (field.number !== \"\") {\r\n                field.locked = true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    ResolveUnique = (depth = 0, solutions = 0) => {\r\n        const t = this;\r\n        if (solutions > 1) {\r\n            return solutions;\r\n        }\r\n        let changes = 1;\r\n        while (changes > 0) {\r\n            changes = 0;\r\n            try {\r\n                changes += t.FillSingleOption(); // check if there are any field with only one option and use it\r\n            } catch (error) { //if 0 options, no solution\r\n                return 0;\r\n            }\r\n\r\n            if (changes === 0) {\r\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\r\n            }\r\n            if (changes > 0) {\r\n                t.difficultycount += (changes + (depth * 100));\r\n                // t.difficultycount += (changes * (depth+1));\r\n                // console.log(\"depth\",depth,t.difficultycount);\r\n            }\r\n        }\r\n\r\n        if (!t.CheckCompleteBoard()) {\r\n            const clonelist = t.CloneBoard();\r\n            const randomtry = t.Random();\r\n            let randomoptions = [...randomtry.options];\r\n            randomtry.number = randomoptions[0];\r\n            let last = 0;\r\n            let i = 0;\r\n            //let solutions = 0;\r\n            while (randomtry.number !== last && randomtry.number !== undefined) {\r\n                last = randomtry.number;\r\n                t.RestoreBoard(clonelist);\r\n                randomtry.number = last;\r\n                try {\r\n                    let sol = solutions;\r\n                    const tmpdifficultycount = t.difficultycount;\r\n                    solutions = t.ResolveUnique(depth + 1, solutions);\r\n                    // console.log(sol,solutions);\r\n\r\n                    if (solutions === 0) {\r\n                        t.difficultycount = tmpdifficultycount;\r\n                    }\r\n                    solutions += sol;\r\n\r\n                    if (solutions > 1) {\r\n                        return solutions;\r\n                    }\r\n                } catch (error) {\r\n                    // console.log(error.message, t.errorcount, \"Submatrix\", \"depth:\", depth);\r\n                    return 0;\r\n                } finally {\r\n                    if (!t.arrayEquals(randomoptions, [...randomtry.options])) {\r\n                        randomoptions = [...randomtry.options];\r\n                        i = 0;\r\n                        console.log(\"restart\", solutions);\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                    randomtry.number = randomoptions[i];\r\n                }\r\n            }\r\n            randomtry.number = \"\";\r\n            if (solutions > 1) {\r\n                return solutions;\r\n            }\r\n\r\n            if (!t.CheckCompleteBoard()) {\r\n                return t.ResolveUnique(depth + 1, solutions);\r\n            } else {\r\n                if (solutions === 0) {\r\n                    solutions = 1;\r\n                }\r\n                // solutions++;\r\n                //solutions=1;\r\n                return solutions;\r\n            }\r\n        } else {\r\n            // console.log(solutions);\r\n\r\n            // if(solutions===0){\r\n            //     solutions=1;\r\n            // }\r\n            solutions++;\r\n            // solutions=1;\r\n            return solutions;\r\n        }\r\n    }\r\n\r\n\r\n    Resolve = (deep = 0) => {\r\n        const t = this;\r\n        let changes = 1;\r\n        while (changes > 0) {\r\n            changes = 0;\r\n            changes += t.FillSingleOption(); // check if there are any field with only one option and use it\r\n            if (changes === 0) {\r\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\r\n            }\r\n        }\r\n\r\n        if (!t.CheckCompleteBoard()) {\r\n            const clonelist = t.CloneBoard();\r\n            const randomtry = t.Random();\r\n            let randomoptions = [...randomtry.options];\r\n            randomtry.number = randomoptions[0];\r\n            let last = 0;\r\n            let i = 0;\r\n            while (!t.CheckCompleteBoard() && randomtry.number !== last && randomtry.number !== undefined) {\r\n                last = randomtry.number;\r\n                t.RestoreBoard(clonelist);\r\n                randomtry.number = last;\r\n                try {\r\n                    t.Resolve(deep + 1);\r\n                } catch (error) {\r\n                    //console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\r\n                } finally {\r\n                    if (!t.arrayEquals(randomoptions, [...randomtry.options])) {\r\n                        randomoptions = [...randomtry.options];\r\n                        i = 0;\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                    randomtry.number = randomoptions[i];\r\n                }\r\n            }\r\n            randomtry.number = \"\";\r\n\r\n\r\n            if (!t.CheckCompleteBoard()) {\r\n                t.Resolve();\r\n            } else {\r\n                randomtry.SetValue(randomtry.number);\r\n                randomtry.options.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    CheckCompleteBoard = () => {\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    Random = (min = 3) => { //returns a cell with less options than MIN\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                element.SetValueOptions(t.CheckOptions(element));\r\n                if (element.options.size < min) {\r\n                    return element;\r\n                }\r\n            }\r\n        }\r\n        return t.Random(min + 1);\r\n    }\r\n\r\n    // check if there are any field with only one option and use it\r\n    FillSingleOption = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                element.SetValueOptions(t.CheckOptions(element));\r\n                if (element.options.size === 1) {\r\n                    element.SetValue(element.options.values().next().value);\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    // check if there are any line or square with a unique number in its options and use it\r\n    FillByLine = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                if (t.CheckUnique(element)) {\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    //Check if this element has an unique solution\r\n    CheckUnique = (number) => {\r\n        const t = this;\r\n        let unique = 0;\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        unique = t.UniqueList(t.matrix[x][y].checklist, number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.verticallines[x][i], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.horizontallines[y][j], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    // Check if this array has an unique solution\r\n    UniqueList = (arr, number) => {\r\n        const t = this;\r\n        let options = new Set();\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number === \"\" && element !== number) {\r\n                element.SetValueOptions(t.CheckOptions(element));\r\n                options = new Set([...options, ...element.options]);\r\n            }\r\n        }\r\n        number.SetValueOptions(t.CheckOptions(number));\r\n        let difference = new Set([...number.options].filter(x => !options.has(x)));\r\n        if (difference.size === 1) {\r\n            return difference.values().next().value;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default SudokuResolver;","import SudokuNumber from './SudokuNumber';\r\n\r\n\r\nclass HelperSudoku {\r\n\r\n    arrayEquals = (a, b) => {\r\n        return Array.isArray(a) &&\r\n            Array.isArray(b) &&\r\n            a.length === b.length &&\r\n            a.every((val, index) => val === b[index]);\r\n    }\r\n\r\n    CloneBoard = () => {\r\n        const t = this;\r\n        let clonelist = [];\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const e = t.list[i];\r\n            clonelist.push({\r\n                x: e.x,\r\n                y: e.y,\r\n                i: e.i,\r\n                j: e.j,\r\n                number: e.number,\r\n                options: [...e.options],\r\n                locked: e.locked,\r\n                error: e.error\r\n            });\r\n        }\r\n        return clonelist;\r\n    }\r\n\r\n    RestoreBoard = (clonelist) => {\r\n        const t = this;\r\n        for (let index = 0; index < clonelist.length; index++) {\r\n            const e = clonelist[index];\r\n            const element = t.matrix[e.x][e.y].submatrix[e.i][e.j];\r\n            element.SetValue(e.number);\r\n            element.SetValueOptions(new Set(e.options));\r\n            element.locked = e.locked;\r\n            element.SetValueError(e.error);\r\n        }\r\n        this.CheckSuccess();\r\n    }\r\n\r\n    // Add available options to the list\r\n    CheckOptions = (number) => {\r\n        const t = this;\r\n        let list = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        t.DuplicatesList(t.matrix[x][y].checklist, list);\r\n        t.DuplicatesList(t.verticallines[x][i], list);\r\n        t.DuplicatesList(t.horizontallines[y][j], list);\r\n        return list;\r\n    }\r\n\r\n    // Delete from list if element in arr\r\n    DuplicatesList = (arr, list) => {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number !== \"\") {\r\n                list.delete(element.number);\r\n            }\r\n        }\r\n        if (list.size === 0) {\r\n            throw Error(\"Empty options\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Sudoku extends HelperSudoku {\r\n    constructor() { //creates an empty sudoku board\r\n        super();\r\n        this.CreateEmptyBoard();\r\n    }\r\n\r\n    CreateEmptyBoard = () => {\r\n        this.success = false;\r\n        this.matrix = [];\r\n        this.emptyspaces = [];\r\n        this.verticallines = [\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ],\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ],\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ]\r\n        ]; //3x3 vertical lines\r\n        this.horizontallines = [\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ],\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ],\r\n            [\r\n                [],\r\n                [],\r\n                []\r\n            ]\r\n        ]; //3x3 horizontal lines\r\n        this.list = []; //complete list\r\n        for (let x = 0; x < 3; x++) {\r\n            let rows = [];\r\n            for (let y = 0; y < 3; y++) {\r\n                rows[y] = new SudokuNumber(x, y, this);\r\n                this.EmptySpaces(x, y);\r\n            }\r\n            this.matrix[x] = rows;\r\n        }\r\n    }\r\n\r\n\r\n    EmptySpaces = (x, y) => {\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                this.emptyspaces.push([x, y, i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    SetSuccessValue = (value) => {\r\n        if (this.setSuccess !== undefined) {\r\n            this.setSuccess(value);\r\n        }\r\n        this.success = value;\r\n    }\r\n\r\n    CheckSuccess = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            if (element.number === \"\" || element.error) {\r\n                this.SetSuccessValue(false);\r\n                return;\r\n            }\r\n        }\r\n        this.SetSuccessValue(true);\r\n    }\r\n\r\n\r\n    CleanDuplicated = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            element.SetValueError(false);\r\n            if (element.number === \"X\") {\r\n                element.SetValue(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    CheckDuplicates = () => {\r\n        let count = 0;\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                const square = this.matrix[i][j].checklist;\r\n                count += this.MarkDuplicates(square);\r\n\r\n                const vertical = this.verticallines[i][j];\r\n                count += this.MarkDuplicates(vertical);\r\n\r\n                const horizontal = this.horizontallines[i][j];\r\n                count += this.MarkDuplicates(horizontal);\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n\r\n    MarkDuplicates = (arr) => {\r\n        let count = 0;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (this.isDuplicated(arr, element.number)) {\r\n                element.SetValueError(true);\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    isDuplicated = (arr, search) => {\r\n        let count = arr.reduce(function(n, element) {\r\n            return n + (search !== \"\" && element.number === search);\r\n        }, 0);\r\n        return (count > 1);\r\n    }\r\n\r\n    CheckEmpty = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            if (element.number === \"\") {\r\n                try {\r\n                    this.CheckOptions(element);\r\n                } catch (error) {\r\n                    element.SetValue(\"X\");\r\n                    element.SetValueError(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sudoku;","import React, { createContext } from 'react';\r\nimport SudokuResolver from '../logic/SudokuResolver';\r\nimport LocalStorage from '../logic/LocalStorage';\r\n\r\nexport const BoardContext = createContext({});\r\n\r\n\r\nfunction debounce(fn, ms) {\r\n    let timer;\r\n    return () => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(() => {\r\n            timer = null\r\n            fn.apply(this, arguments)\r\n        }, ms)\r\n    };\r\n}\r\n\r\nexport default function BoardContextProvider({ children }) {\r\n    const default_difficulty=2;\r\n    const [Difficulty, setDifficulty] = React.useState(LocalStorage.get(\"difficulty\", default_difficulty));\r\n    const [OptionsActive, setOptionsActive] = React.useState(LocalStorage.get(\"options_active\", false));\r\n\r\n    const cacheboard = LocalStorage.get(\"sudoku_board\", null);\r\n    const board = new SudokuResolver(default_difficulty, cacheboard, true);\r\n    const [Success, setSuccess] = React.useState(board.success);\r\n    board.setSuccess = setSuccess;\r\n    board.success = Success;\r\n\r\n    \r\n\r\n    React.useEffect(() => {\r\n        if (cacheboard === null) {\r\n            board.CreateBoard(default_difficulty);\r\n            LocalStorage.set(\"sudoku_board\", board.CloneBoard());\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    const ResetBoard = (n) => {\r\n            const newboard = new SudokuResolver(n);\r\n            board.RestoreBoard(newboard.CloneBoard());\r\n            Save();\r\n            LocalStorage.set(\"difficulty\", n);\r\n            setDifficulty(n);\r\n            return;\r\n    }\r\n\r\n    const Save = () => {\r\n        LocalStorage.set(\"sudoku_board\", board.CloneBoard());\r\n    }\r\n    const SaveBoard = debounce(Save, 3000);\r\n\r\n    const provider = {\r\n        board,\r\n        Difficulty,\r\n        setDifficulty,\r\n        ResetBoard,\r\n        SaveBoard,\r\n        Success,\r\n        setSuccess,\r\n        OptionsActive,\r\n        setOptionsActive,\r\n    };\r\n\r\n    return (\r\n        <BoardContext.Provider value={provider}>\r\n            {children}\r\n        </BoardContext.Provider>\r\n    );\r\n}\r\n\r\n","import React, { createContext } from 'react';\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport indigo from '@material-ui/core/colors/indigo';\r\nimport Grey from '@material-ui/core/colors/grey';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\n\r\nimport LocalStorage from \"../logic/LocalStorage\";\r\n\r\n\r\nexport const ThemeContext = createContext({});\r\n\r\nconst DefaultColor = {\r\n    primary: { light: indigo[600], dark: indigo[800] },\r\n    secondary: { light: purple[600], dark: purple[900] },\r\n};\r\n\r\nexport default function ThemeContextProvider({ children }) {\r\n    const [DarkMode, SetDarkMode] = React.useState(LocalStorage.get(\"dark_mode\", useMediaQuery('(prefers-color-scheme: dark)')));\r\n    const [SelectedColor, SetSelectedColor] = React.useState(LocalStorage.get(\"selected_color\", DefaultColor));\r\n\r\n    const theme = React.useMemo(\r\n        () =>\r\n            createMuiTheme({\r\n                palette: {\r\n                    primary: {\r\n                        // main: DarkMode ? blueGrey[800] : indigo[800],\r\n                        main: DarkMode ? SelectedColor['primary']['dark'] : SelectedColor['primary']['light'],\r\n                    },\r\n                    secondary: {\r\n                        main: DarkMode ? SelectedColor['secondary']['dark'] : SelectedColor['secondary']['light'],\r\n                    },\r\n                    type: DarkMode ? 'dark' : 'light',\r\n                },\r\n                components: {\r\n                    MuiListItem: {\r\n                        styleOverrides: {\r\n                            button: {\r\n                                '&:hover': {\r\n                                    backgroundColor: DarkMode ? Grey[700] : Grey[200]\r\n                                },\r\n                                '&$selected': {\r\n                                    backgroundColor: DarkMode ? Grey[600] : Grey[300],\r\n                                    '&:hover': {\r\n                                        backgroundColor: DarkMode ? Grey[500] : Grey[400]\r\n                                    },\r\n                                },\r\n                            },\r\n                        }\r\n                    },\r\n                },\r\n            }),\r\n        [DarkMode, SelectedColor],\r\n    );\r\n\r\n\r\n    const SwitchDarkMode = () => {\r\n        SetDarkMode(!DarkMode);\r\n        LocalStorage.set(\"dark_mode\", !DarkMode);\r\n    }\r\n    const SetColor = (color, primary = true) => {\r\n        const newcolor = {};\r\n        if (primary) {\r\n            newcolor['primary'] = color;\r\n            newcolor['secondary'] = SelectedColor['secondary'];\r\n        } else {\r\n            newcolor['secondary'] = color;\r\n            newcolor['primary'] = SelectedColor['primary'];\r\n        }\r\n        SetSelectedColor(newcolor);\r\n        LocalStorage.set(\"selected_color\", newcolor);\r\n    }\r\n\r\n    const ResetColor=(primary = true)=>{\r\n        const newcolor = {};\r\n        if (primary) {\r\n            newcolor['secondary'] = SelectedColor['secondary'];\r\n            newcolor['primary'] = DefaultColor['primary'];\r\n        } else {\r\n            newcolor['primary'] = SelectedColor['primary'];\r\n            newcolor['secondary'] = DefaultColor['secondary'];\r\n        }\r\n        SetSelectedColor(newcolor);\r\n        LocalStorage.set(\"selected_color\", newcolor);\r\n    }\r\n\r\n\r\n    const provider = {\r\n        SetDarkMode,\r\n        DarkMode,\r\n        SwitchDarkMode,\r\n        SetColor,\r\n        ResetColor\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={provider}>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline />\r\n                {children}\r\n            </ThemeProvider>\r\n        </ThemeContext.Provider>\r\n    );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React, { createContext } from 'react';\r\nimport * as serviceWorker from '../serviceWorker';\r\n\r\n\r\nexport const ServiceWorkerContext = createContext({});\r\n\r\n\r\nexport default function ServiceWorkerProvider({ children }) {\r\n    const [Message, setMessage] = React.useState(\"\");\r\n    const [waitingServiceWorker, setWaitingServiceWorker] = React.useState(null);\r\n    const [installPrompt, setinstallPrompt] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        serviceWorker.register({\r\n            onOpen: () => {\r\n                if (Message === \"\") {\r\n                    setMessage(\"OFFLINE\");\r\n                }\r\n            },\r\n            onUpdate: registration => {\r\n                setWaitingServiceWorker(registration.waiting);\r\n                setMessage(\"UPDATE\");\r\n            },\r\n        });\r\n\r\n        window.addEventListener('beforeinstallprompt', (e) => {\r\n            if (localStorage) {\r\n                // Prevent the mini-infobar from appearing on mobile\r\n                e.preventDefault();\r\n                // Stash the event so it can be triggered later.\r\n                setinstallPrompt(e);\r\n                if (Message !== \"UPDATE\") {\r\n                    setMessage(\"INSTALL\");\r\n                }\r\n            }\r\n        });\r\n        // We setup an event listener to automatically reload the page\r\n        // after the Service Worker has been updated, this will trigger\r\n        // on all the open tabs of our application, so that we don't leave\r\n        // any tab in an incosistent state\r\n        if (waitingServiceWorker) {\r\n            waitingServiceWorker.addEventListener('statechange', event => {\r\n                if (event.target.state === 'activated') {\r\n                    window.location.reload();\r\n                }\r\n            });\r\n        }\r\n    }, [Message,setMessage,waitingServiceWorker]);\r\n\r\n\r\n    const provider = {\r\n        Message,\r\n        setMessage,\r\n        installPrompt,\r\n        waitingServiceWorker\r\n    };\r\n\r\n    return (\r\n        <ServiceWorkerContext.Provider value={provider}>\r\n            {children}\r\n        </ServiceWorkerContext.Provider>\r\n    );\r\n}","var map = {\n\t\"./en.json\": [\n\t\t119,\n\t\t25\n\t],\n\t\"./es.json\": [\n\t\t120,\n\t\t26\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 99;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}