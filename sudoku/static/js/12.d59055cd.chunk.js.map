{"version":3,"sources":["../node_modules/@material-ui/core/esm/List/ListContext.js","../node_modules/@material-ui/core/esm/List/List.js","components/buttons/DifficultyButtons.jsx"],"names":["ListContext","React","List","props","ref","children","classes","className","_props$component","component","Component","_props$dense","dense","_props$disablePadding","disablePadding","subheader","other","_objectWithoutProperties","context","Provider","value","_extends","clsx","root","padding","withStyles","listStyle","margin","position","paddingTop","paddingBottom","name","buttoncolor","pallete","getContrastText","backgroundColor","main","color","border","dark","useStyles","makeStyles","theme","palette","info","success","warning","error","buttonstar","bottom","spacing","right","fontSize","borderRadius","light","button1","button2","button3","button4","DifficultyButtons","board","setDifficulty","Difficulty","mode","ResetBoard","n","newboard","SudokuResolver","LocalStorage","set","newmatrix","CloneBoard","RestoreBoard","difficultylist","number","text","Text","class","icon","EmojiEmotionsIcon","InsertEmoticonIcon","FaceIcon","MoodBadIcon","size","map","e","key","title","onClick","button","selected","primary","edge","disableRipple","checked"],"mappings":"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","file":"static/js/12.d59055cd.chunk.js","sourcesContent":["import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar ListContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  ListContext.displayName = 'ListContext';\n}\n\nexport default ListContext;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from './ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative'\n  },\n\n  /* Styles applied to the root element if `disablePadding={false}`. */\n  padding: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n\n  /* Styles applied to the root element if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if a `subheader` is provided. */\n  subheader: {\n    paddingTop: 0\n  }\n};\nvar List = /*#__PURE__*/React.forwardRef(function List(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'ul' : _props$component,\n      _props$dense = props.dense,\n      dense = _props$dense === void 0 ? false : _props$dense,\n      _props$disablePadding = props.disablePadding,\n      disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,\n      subheader = props.subheader,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"dense\", \"disablePadding\", \"subheader\"]);\n\n  var context = React.useMemo(function () {\n    return {\n      dense: dense\n    };\n  }, [dense]);\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),\n    ref: ref\n  }, other), subheader, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, vertical padding will be removed from the list.\n   * @default false\n   */\n  disablePadding: PropTypes.bool,\n\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiList'\n})(List);","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\n\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n\r\n\r\nimport SudokuResolver from \"../../logic/SudokuResolver\";\r\nimport LocalStorage from \"../../logic/LocalStorage\";\r\nimport Text from '../../languages/Language';\r\n\r\nconst buttoncolor = (pallete, getContrastText) => {\r\n    return {\r\n        backgroundColor: pallete.main,\r\n        color: getContrastText(pallete.main),\r\n        border: \"none\",\r\n        '&:hover': {\r\n            backgroundColor: pallete.dark,\r\n            color: getContrastText(pallete.dark),\r\n            border: \"none\",\r\n        },\r\n    }\r\n}\r\nconst useStyles = makeStyles((theme) => {\r\n    const { info, success, warning, error, getContrastText } = theme.palette;\r\n    return {\r\n        buttonstar: {\r\n            position: \"absolute\",\r\n            bottom: theme.spacing(0.25),\r\n            right: theme.spacing(0.25),\r\n            fontSize: \"0.75rem\",\r\n            borderRadius: \"100%\",\r\n            backgroundColor: \"white\",\r\n            color: warning.light\r\n        },\r\n        button1: buttoncolor(info, getContrastText),\r\n        button2: buttoncolor(success, getContrastText),\r\n        button3: buttoncolor(warning, getContrastText),\r\n        button4: buttoncolor(error, getContrastText)\r\n    }\r\n});\r\n\r\nconst DifficultyButtons = (props) => {\r\n    const { board, setDifficulty, Difficulty, mode = \"button\" } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    function ResetBoard(n) {\r\n        const newboard = new SudokuResolver(n);\r\n        setDifficulty(n);\r\n        LocalStorage.set(\"difficulty\", n);\r\n        const newmatrix = newboard.CloneBoard();\r\n        board.RestoreBoard(newmatrix);\r\n        LocalStorage.set(\"sudoku_board\", newmatrix);\r\n    }\r\n\r\n    const difficultylist = [\r\n        { number: 63, text: Text('veryeasymode'), class: classes.button1, icon: EmojiEmotionsIcon },\r\n        { number: 45, text: Text('easymode'), class: classes.button2, icon: InsertEmoticonIcon },\r\n        { number: 36, text: Text('mediummode'), class: classes.button3, icon: FaceIcon },\r\n        { number: 20, text: Text('hardmode'), class: classes.button4, icon: MoodBadIcon },\r\n    ]\r\n\r\n\r\n\r\n    if (mode === \"button\") {\r\n        return <ButtonGroup size=\"small\">\r\n            {difficultylist.map((e) => (\r\n                <Tooltip key={e.text} title={e.text}>\r\n                    <Button className={e.class} onClick={() => ResetBoard(e.number)}>\r\n                        <e.icon />\r\n                        {Difficulty === e.number ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                    </Button>\r\n                </Tooltip>\r\n            ))}\r\n        </ButtonGroup>\r\n    } else {\r\n        return <List>\r\n            {difficultylist.map((e) => (\r\n                <ListItem button key={e.text} onClick={() => ResetBoard(e.number)} selected={Difficulty === e.number}>\r\n                    <ListItemIcon> <e.icon /></ListItemIcon>\r\n                    <ListItemText primary={e.text} />\r\n                    <Switch\r\n                        edge=\"end\"\r\n                        disableRipple\r\n                        checked={Difficulty === e.number}\r\n                    />\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default DifficultyButtons;"],"sourceRoot":""}