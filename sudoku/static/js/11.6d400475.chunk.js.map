{"version":3,"sources":["components/SudokuPopover.jsx"],"names":["useStyles","makeStyles","theme","palette","primary","secondary","getContrastText","background","light","type","button","height","width","fontSize","fontWeight","minWidth","borderRadius","padding","spacing","breakpoints","up","backgroundColor","default","paper","options","margin","color","checkbox","paddingRight","main","label","optioncolor","optionbackground","OptionsActiveoption","SudokuPopover","props","handleClose","field","OptionsActive","setOptionsActive","parentOptions","React","useState","ChangeOption","SetChangeOption","handleChange","classes","container","justify","className","clsx","map","row","valuex","keyx","key","item","xs","number","valuey","keyy","classname","has","onClick","delete","add","changeOptions","clear","SetNumber","setNumber","checked","onChange","inputProps","disableRipple","SudokuPopoverContainer","TransitionProps","placement","style","transformOrigin","onClickAway"],"mappings":"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","file":"static/js/11.6d400475.chunk.js","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const { primary, secondary, getContrastText, background } = theme.palette;\r\n    const light = theme.palette.type === \"light\";\r\n\r\n    return {\r\n        button: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontSize: \"1em\",\r\n            fontWeight: \"normal\",\r\n            minWidth: 0,\r\n            borderRadius: 0,\r\n            padding: theme.spacing(1),\r\n            [theme.breakpoints.up('md')]: {\r\n                padding: theme.spacing(1.5)\r\n            },\r\n            \"&:hover\": {\r\n                backgroundColor: background.default,\r\n            },\r\n            color: light ? \"\" : getContrastText(background.paper)\r\n        },\r\n        options: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontWeight: \"normal\",\r\n            margin: 0,\r\n            borderRadius: 0,\r\n            color: light ? \"\" : getContrastText(background.paper)\r\n        },\r\n        checkbox: {\r\n            padding: 0,\r\n            paddingRight: theme.spacing(1),\r\n            color: light ? primary.main : getContrastText(background.paper),\r\n        },\r\n        label: {\r\n            width: 0,\r\n        },\r\n        optioncolor: {\r\n            color: getContrastText(primary.light),\r\n            \"&:hover\": {\r\n                backgroundColor: primary.light,\r\n            }\r\n        },\r\n        optionbackground: {\r\n            backgroundColor: primary.main\r\n        },\r\n        OptionsActiveoption: {\r\n            backgroundColor: secondary.main,\r\n            \"&:hover\": {\r\n                backgroundColor: secondary.light,\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst SudokuPopover = (props) => {\r\n    const { handleClose, field, OptionsActive, setOptionsActive, parentOptions } = props;\r\n\r\n    const [ChangeOption, SetChangeOption] = React.useState(false);\r\n\r\n    const handleChange = () => {\r\n        setOptionsActive(!OptionsActive);\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const optioncolor = OptionsActive ? classes.optioncolor : \"\";\r\n    const box = [[1, 4, 7], [2, 5, 8], [3, 6, 9]];\r\n    const key = \"popover\";\r\n\r\n    const Clear = () => {\r\n        field.options.clear();\r\n        field.SetNumber(\"\");\r\n        handleClose();\r\n    }\r\n\r\n    const setNumber = (number) => {\r\n        field.options.clear();\r\n        field.SetNumber(number);\r\n        handleClose();\r\n    };\r\n\r\n    const changeOptions = (number) => {\r\n        if (field.options.has(number)) {\r\n            field.options.delete(number);\r\n        } else {\r\n            field.options.add(number);\r\n        }\r\n        parentOptions(!ChangeOption);\r\n        SetChangeOption(!ChangeOption);\r\n    };\r\n\r\n    return <Grid container justify=\"center\" className={clsx(OptionsActive ? classes.optionbackground : \"\", ChangeOption)} >\r\n        {box.map((row, valuex) => {\r\n            const keyx = key + \"-\" + valuex;\r\n            return <Grid key={keyx} item xs={4}>\r\n                {row.map((number, valuey) => {\r\n                    const keyy = keyx + \",\" + valuey;\r\n                    const classname = clsx(classes.button, optioncolor, OptionsActive && field.options.has(number) ? classes.OptionsActiveoption : \"\");\r\n                    return <Grid key={keyy} item xs={12}>\r\n                        <Button className={classname} onClick={() => OptionsActive ? changeOptions(number) : setNumber(number)}>\r\n                            {number}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        })}\r\n\r\n        <Grid item xs={12}>\r\n            <Grid item xs={12}>\r\n                <Button classes={{ label: classes.label }} className={clsx(classes.options, optioncolor)} onClick={handleChange}>\r\n                    <Checkbox color=\"default\" className={clsx(classes.checkbox, optioncolor)} checked={OptionsActive} onChange={handleChange} inputProps={{ 'aria-label': 'Option checkbox' }} disableRipple />\r\n                    Options\r\n                </Button>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Button className={clsx(classes.options, optioncolor)} onClick={() => Clear()}>Clear</Button>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    </Grid>\r\n}\r\n\r\n// export default SudokuPopover;\r\n\r\n\r\nconst SudokuPopoverContainer = (props) => {\r\n    const { TransitionProps,placement, handleClose } = props;\r\n    return (\r\n        <Grow {...TransitionProps} style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }} >\r\n            <div>\r\n                <Paper>\r\n                    <ClickAwayListener onClickAway={handleClose}>\r\n                        <div>\r\n                            <SudokuPopover {...props} />\r\n                        </div>\r\n                    </ClickAwayListener>\r\n                </Paper>\r\n            </div>\r\n        </Grow>\r\n    )\r\n}\r\nexport default SudokuPopoverContainer;\r\n"],"sourceRoot":""}