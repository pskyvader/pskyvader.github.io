{"version":3,"sources":["logic/SudokuValue.js","logic/SudokuNumber.js","logic/SudokuResolver.js","logic/Sudoku.js","logic/LocalStorage.js","components/header.jsx","components/SudokuPopover.jsx","components/SudokuOptions.jsx","components/SudokuNumberBox.jsx","components/SudokuBox.jsx","pages/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SudokuValue","x","y","i","j","callback","SetNumber","number","SetValue","Duplicates","undefined","SetFinalNumber","SetValueError","error","SetError","SetValueOptions","options","SetOptions","this","Set","locked","SudokuNumber","CleanDuplicated","CheckDuplicates","submatrix","checklist","rows","push","verticallines","horizontallines","list","SudokuResolver","n","cacheboard","RandomNumbers","t","console","emptyspaces","index","pos","Math","floor","random","length","current","field","matrix","clear","splice","CreateBoard","deep","Error","Resolve","errorcount","log","message","CreateEmptyBoard","CleanBoard","changes","FillSingleOption","FillByLine","CheckCompleteBoard","clonelist","CloneBoard","randomtry","Random","randomoptions","last","RestoreBoard","e","element","min","CheckOptions","size","values","next","value","CheckUnique","unique","UniqueList","arr","difference","filter","has","DuplicatesList","delete","t0","performance","now","t1","EmptySpaces","count","square","MarkDuplicates","vertical","horizontal","duplicated","search","reduce","LocalStorage","key","default_value","expiration_time","JSON","parse","localStorage","getItem","set","Date","data","setItem","stringify","buttoncolor","pallete","getContrastText","backgroundColor","main","color","border","dark","useStyles","makeStyles","theme","palette","info","success","warning","root","flexGrow","menuButton","marginRight","spacing","title","buttonstar","position","bottom","right","fontSize","borderRadius","light","button1","button2","button3","button4","ButtonAppBar","props","classes","React","useState","get","Difficulty","setDifficulty","board","ResetBoard","newboard","Save","useEffect","window","addEventListener","removeEventListener","className","AppBar","Toolbar","Typography","variant","ButtonGroup","Button","onClick","Container","children","primary","secondary","button","height","width","fontWeight","minWidth","padding","breakpoints","up","margin","checkbox","paddingRight","label","optioncolor","optionbackground","checkedoption","SudokuPopover","handleClose","Checked","setChecked","ChangeOption","SetChangeOption","handleChange","setNumber","changeOptions","add","Grid","container","justify","clsx","map","row","valuex","keyx","item","xs","valuey","keyy","classname","Checkbox","checked","onChange","inputProps","disableRipple","lineHeight","overflowWrap","FullWidthGrid","Array","from","sort","join","grey","contrastText","disabled","anchorEl","setAnchorEl","open","Boolean","id","FinalNumber","FinalError","Options","Fragment","aria-describedby","event","currentTarget","Popover","onClose","anchorOrigin","transformOrigin","SudokuNumberBox","fontsize","Box","display","alignItems","justifyContent","subbox","textAlign","grid","borderRight","subgrid","borderBottom","SudokuSubBox","box","column","SudokuBox","subheight","mainborder","maxWidth","mixins","toolbar","minHeight","borderLeft","borderTop","Home","canvas","useRef","setHeight","BoxHeight","clientWidth","debouncedHandleResize","fn","ms","timer","_","clearTimeout","setTimeout","apply","arguments","debounce","useLayoutEffect","ref","baseboard","App","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.381dbcc5.chunk.js","sourcesContent":["class SudokuValue {\r\n    constructor(x, y, i, j, callback) {\r\n        this.number = \"\";\r\n        this.options = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        this.x = x;\r\n        this.y = y;\r\n        this.i = i;\r\n        this.j = j;\r\n        this.locked = false;\r\n        this.callback = callback;\r\n        this.error = false;\r\n    }\r\n\r\n    SetNumber = (number) => {\r\n        this.SetValue(number);\r\n        //this.options.clear();\r\n        this.callback.Duplicates();\r\n    }\r\n    SetValue = (number) => {\r\n        if (this.SetFinalNumber !== undefined) {\r\n            this.SetFinalNumber(number);\r\n        }\r\n        this.number = number;\r\n    }\r\n    SetValueError = (error) => {\r\n        if (this.SetError !== undefined) {\r\n            this.SetError(error);\r\n        }\r\n        this.error = error;\r\n    }\r\n    SetValueOptions = (options) => {\r\n        if (this.SetOptions !== undefined) {\r\n            this.SetOptions(options);\r\n        }\r\n        this.options = options;\r\n    }\r\n}\r\n\r\nexport default SudokuValue;","import SudokuValue from './SudokuValue';\r\n\r\nclass SudokuNumber {\r\n    constructor(x, y, callback) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.callback = callback;\r\n        this.submatrix = [];\r\n        this.checklist = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            let rows = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                rows[j] = new SudokuValue(x, y, i, j, this);\r\n                this.checklist.push(rows[j]);\r\n                this.callback.verticallines[x][i].push(rows[j]);\r\n                this.callback.horizontallines[y][j].push(rows[j]);\r\n                this.callback.list.push(rows[j]);\r\n            }\r\n            this.submatrix[i] = rows;\r\n        }\r\n    }\r\n    Duplicates = () => {\r\n        this.callback.CleanDuplicated();\r\n        this.callback.CheckDuplicates();\r\n    }\r\n}\r\n\r\nexport default SudokuNumber;","import Sudoku from './Sudoku';\r\n\r\nclass SudokuResolver extends Sudoku {\r\n    constructor(n, cacheboard = null) {\r\n        super();\r\n        this.errorcount = 0;\r\n        if (cacheboard === null) {\r\n            var t0 = performance.now();\r\n            this.CreateBoard(n);\r\n            var t1 = performance.now();\r\n            console.log(\"Call to CreateSudoku took \" + (t1 - t0) + \" milliseconds.\");\r\n        } else {\r\n            this.RestoreBoard(cacheboard);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    RandomNumbers = (number) => {\r\n        const t = this;\r\n        if (number > 81 || number < 1) {\r\n            throw console.error(\"number out of range\");\r\n        }\r\n        const emptyspaces = [...t.emptyspaces];\r\n        for (let index = 0; index < number; index++) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.SetValue(Math.floor(1 + Math.random() * 8));\r\n            t.CleanDuplicated();\r\n            const duplicated = t.CheckDuplicates();\r\n            if (duplicated > 0) {\r\n                field.number = \"\";\r\n                index--;\r\n                continue;\r\n            }\r\n\r\n            field.locked = true;\r\n            field.options.clear();\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n    }\r\n\r\n    CreateBoard = (n, deep = 0) => {\r\n        const t = this;\r\n        if (n > 81 || n < 1) {\r\n            throw Error(\"number out of range\");\r\n        }\r\n        t.RandomNumbers(27);\r\n\r\n        try {\r\n            t.Resolve();\r\n        } catch (error) {\r\n            t.errorcount += 1;\r\n            console.log(error.message, t.errorcount, \"deep:\", deep);\r\n            t.CreateEmptyBoard();\r\n            t.CreateBoard(n, deep + 1);\r\n        }\r\n        if (deep === 0) {\r\n            t.CleanBoard(n);\r\n        }\r\n    }\r\n    CleanBoard = (n) => {\r\n        const t = this;\r\n        if (n > 81 || n < 1) {\r\n            throw console.error(\"number out of range\");\r\n        }\r\n        const emptyspaces = t.emptyspaces;\r\n        for (let index = 0; index < n; index++) {\r\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\r\n            const current = emptyspaces[pos];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.locked = true;\r\n            emptyspaces.splice(pos, 1);\r\n        }\r\n\r\n        for (let index = 0; index < emptyspaces.length; index++) {\r\n            const current = emptyspaces[index];\r\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\r\n            field.locked = false;\r\n            field.number = \"\";\r\n        }\r\n\r\n    }\r\n\r\n    Resolve = (deep = 0) => {\r\n        const t = this;\r\n        let changes = 1;\r\n        while (changes > 0) {\r\n            changes = 0;\r\n            changes += t.FillSingleOption(); // check if there are any field with only one option and use it\r\n            if (changes === 0) {\r\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\r\n            }\r\n        }\r\n\r\n        if (!t.CheckCompleteBoard()) {\r\n            const clonelist = t.CloneBoard();\r\n            const randomtry = t.Random();\r\n            let randomoptions = [...randomtry.options];\r\n            randomtry.number = randomoptions[0];\r\n            let last = 0;\r\n            let i = 0;\r\n            while (!t.CheckCompleteBoard() && randomtry.number !== last && randomtry.number !== undefined) {\r\n                last = randomtry.number;\r\n                t.RestoreBoard(clonelist);\r\n                randomtry.number = last;\r\n                try {\r\n                    t.Resolve(deep + 1);\r\n                } catch (error) {\r\n                    console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\r\n                } finally {\r\n                    if (randomoptions !== randomtry.options) {\r\n                        randomoptions = [...randomtry.options];\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                    randomtry.number = randomoptions[i];\r\n                }\r\n            }\r\n            if (!t.CheckCompleteBoard()) {\r\n                t.Resolve();\r\n            } else {\r\n                randomtry.SetValue(randomtry.number);\r\n                randomtry.options.clear();\r\n            }\r\n        }\r\n    }\r\n\r\n    CloneBoard = () => {\r\n        const t = this;\r\n        let clonelist = [];\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const e = t.list[i];\r\n            clonelist.push({ x: e.x, y: e.y, i: e.i, j: e.j, number: e.number, options: [...e.options], locked: e.locked, error: e.error });\r\n        }\r\n        return clonelist;\r\n    }\r\n    RestoreBoard = (clonelist) => {\r\n        const t = this;\r\n        for (let index = 0; index < clonelist.length; index++) {\r\n            const e = clonelist[index];\r\n            const element = t.matrix[e.x][e.y].submatrix[e.i][e.j];\r\n            element.SetValue(e.number);\r\n            element.SetValueOptions(new Set(e.options));\r\n            element.locked = e.locked;\r\n            element.SetValueError(e.error);\r\n        }\r\n    }\r\n\r\n    CheckCompleteBoard = () => {\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    Random = (min = 3) => {\r\n        const t = this;\r\n        for (let i = 0; i < t.list.length; i++) {\r\n            const element = t.list[i];\r\n            if (element.number === \"\") {\r\n                t.CheckOptions(element);\r\n                if (element.options.size < min) {\r\n                    return element;\r\n                }\r\n            }\r\n        }\r\n        return t.Random(min + 1);\r\n    }\r\n\r\n\r\n    FillSingleOption = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                t.CheckOptions(element);\r\n                if (element.options.size === 1) {\r\n                    element.SetValue(element.options.values().next().value);\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    FillByLine = () => {\r\n        const t = this;\r\n        let changes = 0;\r\n        for (let index = 0; index < t.list.length; index++) {\r\n            const element = t.list[index];\r\n            if (element.number === \"\") {\r\n                if (t.CheckUnique(element)) {\r\n                    element.options.clear();\r\n                    changes++;\r\n                }\r\n            }\r\n        }\r\n        return changes;\r\n    }\r\n\r\n    CheckUnique = (number) => {\r\n        const t = this;\r\n        let unique = 0;\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        unique = t.UniqueList(t.matrix[x][y].checklist, number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.verticallines[x][i], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        unique = t.UniqueList(t.horizontallines[y][j], number);\r\n        if (unique !== 0) {\r\n            number.SetValue(unique);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    UniqueList = (arr, number) => {\r\n        const t = this;\r\n        let options = new Set();\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number === \"\" && element !== number) {\r\n                t.CheckOptions(element);\r\n                options = new Set([...options, ...element.options]);\r\n            }\r\n        }\r\n        t.CheckOptions(number);\r\n        let difference = new Set([...number.options].filter(x => !options.has(x)));\r\n        if (difference.size === 1) {\r\n            return difference.values().next().value;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    CheckOptions = (number) => {\r\n        const t = this;\r\n        let list = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        const {\r\n            x,\r\n            y,\r\n            i,\r\n            j\r\n        } = number;\r\n        t.DuplicatesList(t.matrix[x][y].checklist, list);\r\n        t.DuplicatesList(t.verticallines[x][i], list);\r\n        t.DuplicatesList(t.horizontallines[y][j], list);\r\n        number.options = list;\r\n    }\r\n\r\n    DuplicatesList = (arr, list) => {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (element.number !== \"\") {\r\n                list.delete(element.number);\r\n            }\r\n        }\r\n        if (list.size === 0) {\r\n            throw Error(\"Empty options\");\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default SudokuResolver;","import SudokuNumber from './SudokuNumber';\r\n\r\n\r\n\r\nclass Sudoku {\r\n    constructor() { //creates an empty sudoku board\r\n        this.CreateEmptyBoard();\r\n    }\r\n\r\n    CreateEmptyBoard = () => {\r\n        this.matrix = [];\r\n        this.emptyspaces = [];\r\n        this.verticallines = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ]; //3x3 vertical lines\r\n        this.horizontallines = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ]; //3x3 horizontal lines\r\n        this.list = []; //complete list\r\n        for (let x = 0; x < 3; x++) {\r\n            let rows = [];\r\n            for (let y = 0; y < 3; y++) {\r\n                rows[y] = new SudokuNumber(x, y, this);\r\n                this.EmptySpaces(x, y);\r\n            }\r\n            this.matrix[x] = rows;\r\n        }\r\n    }\r\n\r\n\r\n    CleanDuplicated = () => {\r\n        for (let i = 0; i < this.list.length; i++) {\r\n            const element = this.list[i];\r\n            element.SetValueError(false);\r\n        }\r\n    }\r\n\r\n\r\n    CheckDuplicates = () => {\r\n        let count = 0;\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                const square = this.matrix[i][j].checklist;\r\n                count += this.MarkDuplicates(square);\r\n\r\n                const vertical = this.verticallines[i][j];\r\n                count += this.MarkDuplicates(vertical);\r\n\r\n                const horizontal = this.horizontallines[i][j];\r\n                count += this.MarkDuplicates(horizontal);\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n\r\n    MarkDuplicates = (arr) => {\r\n        let count = 0;\r\n        for (let i = 0; i < arr.length; i++) {\r\n            const element = arr[i];\r\n            if (this.duplicated(arr, element.number)) {\r\n                element.SetValueError(true);\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    duplicated = (arr, search) => {\r\n        let count = arr.reduce(function(n, element) {\r\n            return n + (search !== \"\" && element.number === search);\r\n        }, 0);\r\n        return (count > 1);\r\n    }\r\n\r\n    EmptySpaces = (x, y) => {\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                this.emptyspaces.push([x, y, i, j]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Sudoku;","class LocalStorage {\r\n    // 1 day default \r\n    static get(key, default_value = null, expiration_time = 1) {\r\n        var value = JSON.parse(localStorage.getItem(key));\r\n        if (value == null) {\r\n            this.set(key, default_value, expiration_time);\r\n        } else {\r\n            if (value.expiration_time < Date.now()) {\r\n                this.set(key, default_value, expiration_time);\r\n            } else {\r\n                return value.data;\r\n            }\r\n        }\r\n\r\n        return default_value;\r\n    }\r\n    static set(key, value, expiration_time = 1) {\r\n        if (value != null) {\r\n            expiration_time = Date.now() + expiration_time * 24 * 60 * 60 * 1000;\r\n            localStorage.setItem(key, JSON.stringify({\r\n                data: value,\r\n                expiration_time: expiration_time\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default LocalStorage;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\n\r\n\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\nimport SudokuResolver from \"../logic/SudokuResolver\";\r\nimport LocalStorage from \"../logic/LocalStorage\";\r\n\r\n\r\nconst buttoncolor = (pallete, getContrastText) => {\r\n    return {\r\n        backgroundColor: pallete.main,\r\n        color: getContrastText(pallete.main),\r\n        border: \"none\",\r\n        '&:hover': {\r\n            backgroundColor: pallete.dark,\r\n            color: getContrastText(pallete.dark),\r\n            border: \"none\",\r\n        },\r\n    }\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const { info, success, warning, error, getContrastText } = theme.palette;\r\n\r\n    return {\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n        buttonstar: {\r\n            position: \"absolute\",\r\n            bottom: theme.spacing(0.25),\r\n            right: theme.spacing(0.25),\r\n            fontSize: \"0.75rem\",\r\n            borderRadius:\"100%\",\r\n            backgroundColor:\"white\",\r\n            color:warning.light\r\n        },\r\n        button1: buttoncolor(info, getContrastText),\r\n        button2: buttoncolor(success, getContrastText),\r\n        button3: buttoncolor(warning, getContrastText),\r\n        button4: buttoncolor(error, getContrastText)\r\n    }\r\n\r\n}\r\n\r\n\r\n);\r\n\r\nexport default function ButtonAppBar(props) {\r\n    const classes = useStyles();\r\n    const [Difficulty, setDifficulty] = React.useState(LocalStorage.get(\"difficulty\", 45));\r\n    const { board } = props;\r\n\r\n    function ResetBoard(n) {\r\n        const newboard = new SudokuResolver(n);\r\n        setDifficulty(n);\r\n        board.RestoreBoard(newboard.CloneBoard());\r\n    }\r\n    const Save = () => {\r\n        LocalStorage.set(\"difficulty\", Difficulty);\r\n    }\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"beforeunload\", Save);\r\n        return () => window.removeEventListener(\"beforeunload\", Save);\r\n    });\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton> */}\r\n                    <Typography variant=\"h6\" className={classes.title}> Sudoku </Typography>\r\n\r\n                    <ButtonGroup size=\"small\">\r\n                        <Button className={classes.button1} onClick={() => ResetBoard(63)}>\r\n                            <EmojiEmotionsIcon />\r\n                            {Difficulty === 63 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                        </Button>\r\n                        <Button className={classes.button2} onClick={() => ResetBoard(45)}>\r\n                            <InsertEmoticonIcon />\r\n                            {Difficulty === 45 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                        </Button>\r\n                        <Button className={classes.button3} onClick={() => ResetBoard(36)}>\r\n                            <FaceIcon />\r\n                            {Difficulty === 36 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                        </Button>\r\n                        <Button className={classes.button4} onClick={() => ResetBoard(27)}>\r\n                            <MoodBadIcon />\r\n                            {Difficulty === 27 ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                        </Button>\r\n                    </ButtonGroup>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n            <Container>\r\n                {props.children}\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const { primary, secondary, getContrastText } = theme.palette;\r\n    return {\r\n        button: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontSize: \"1rem\",\r\n            fontWeight: \"normal\",\r\n            minWidth: 0,\r\n            borderRadius: 0,\r\n            padding: theme.spacing(1),\r\n            [theme.breakpoints.up('md')]: {\r\n                padding: theme.spacing(1.5)\r\n            }\r\n        },\r\n        options: {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            fontWeight: \"normal\",\r\n            margin: 0,\r\n            borderRadius: 0,\r\n        },\r\n        checkbox: {\r\n            padding: 0,\r\n            paddingRight: theme.spacing(1),\r\n            color: primary.main,\r\n        },\r\n        label: {\r\n            width: 0\r\n        },\r\n        optioncolor: {\r\n            color: getContrastText(primary.main),\r\n            \"&:hover\": {\r\n                backgroundColor: primary.light,\r\n            }\r\n        },\r\n        optionbackground: {\r\n            backgroundColor: primary.main\r\n        },\r\n        checkedoption: {\r\n            backgroundColor: secondary.main,\r\n            \"&:hover\": {\r\n                backgroundColor: secondary.light,\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\n\r\nconst SudokuPopover = (props) => {\r\n    const { handleClose, field, Checked, setChecked } = props;\r\n\r\n    const [ChangeOption, SetChangeOption] = React.useState(false);\r\n\r\n    const handleChange = () => {\r\n        setChecked(!Checked);\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const optioncolor = Checked ? classes.optioncolor : \"\";\r\n    const box = [[1, 4, 7], [2, 5, 8], [3, 6, 9]];\r\n    const key = \"popover\";\r\n\r\n    const setNumber = (number) => {\r\n        field.options.clear();\r\n        field.SetNumber(number);\r\n        handleClose();\r\n    };\r\n\r\n    const changeOptions = (number) => {\r\n        if (number === \"\") {\r\n            field.options.clear();\r\n        } else {\r\n            if (field.options.has(number)) {\r\n                field.options.delete(number);\r\n            } else {\r\n                field.options.add(number);\r\n            }\r\n        }\r\n        SetChangeOption(!ChangeOption);\r\n    };\r\n\r\n    return <Grid container justify=\"center\" className={clsx(Checked ? classes.optionbackground : \"\", ChangeOption)} >\r\n        {box.map((row, valuex) => {\r\n            const keyx = key + \"-\" + valuex;\r\n            return <Grid key={keyx} item xs={4}>\r\n                {row.map((number, valuey) => {\r\n                    const keyy = keyx + \",\" + valuey;\r\n                    const classname = clsx(classes.button, optioncolor, Checked && field.options.has(number) ? classes.checkedoption : \"\");\r\n                    return <Grid key={keyy} item xs={12}>\r\n                        <Button className={classname} onClick={() => Checked ? changeOptions(number) : setNumber(number)}>\r\n                            {number}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        })}\r\n\r\n        <Grid item xs={12}>\r\n            <Grid item xs={12}>\r\n                <Button classes={{ label: classes.label }} className={clsx(classes.options, optioncolor)} onClick={handleChange}>\r\n                    <Checkbox color=\"default\" className={clsx(classes.checkbox, optioncolor)} checked={Checked} onChange={handleChange} inputProps={{ 'aria-label': 'Option checkbox' }} disableRipple />\r\n                    Options\r\n                </Button>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Button className={clsx(classes.options, optioncolor)} onClick={() => Checked ? changeOptions(\"\") : setNumber(\"\")}>Clear</Button>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    </Grid>\r\n}\r\n\r\nexport default SudokuPopover;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    options: {\r\n        fontSize: \"0.3em\",\r\n        lineHeight: \"1em\",\r\n        overflowWrap:\"break-word\"\r\n    },\r\n    number: {\r\n        lineHeight: \"1em\",\r\n    }\r\n}));\r\n\r\nexport default function FullWidthGrid({ options, children }) {\r\n    const classes = useStyles();\r\n    options = Array.from(options).sort().join(\"\");\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={12} className={classes.options}>\r\n                {options}\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.number}>\r\n                {children}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport clsx from 'clsx';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport SudokuPopover from './SudokuPopover';\r\nimport SudokuOptions from './SudokuOptions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        fontSize: \"1em\",\r\n        fontWeight: \"normal\",\r\n        minWidth: 0,\r\n        borderRadius: 0,\r\n        padding:0,\r\n        '&$disabled': {\r\n            color: theme.palette.grey[500],\r\n            backgroundColor: theme.palette.grey[200],\r\n        },\r\n    },\r\n    error: {\r\n        color: theme.palette.error.main,\r\n        '&$disabled': {\r\n            color: theme.palette.error.contrastText,\r\n            backgroundColor: theme.palette.error.light\r\n        },\r\n    },\r\n    disabled: {}\r\n}));\r\n\r\n\r\n\r\n\r\nconst SudokuNumber = ({ field, Checked, setChecked }) => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    let { number, locked, error, options } = field;\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popover' : undefined;\r\n\r\n    const [FinalNumber, SetFinalNumber] = React.useState(number);\r\n    field.SetFinalNumber = SetFinalNumber;\r\n    field.number = FinalNumber;\r\n\r\n    const [FinalError, SetError] = React.useState(error);\r\n    field.SetError = SetError;\r\n    field.error = FinalError;\r\n\r\n    const [Options, SetOptions] = React.useState(options);\r\n    field.SetOptions = SetOptions;\r\n    field.options = Options;\r\n\r\n    const className = clsx(classes.button, FinalError && classes.error);\r\n\r\n    if (locked) {\r\n        return <Button disabled classes={{ root: className, disabled: classes.disabled, }}  >\r\n            <SudokuOptions options={field.options}> {FinalNumber}</SudokuOptions>\r\n        </Button>\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <Button aria-describedby={id} className={className} onClick={handleClick}>\r\n                    <SudokuOptions options={field.options}> {FinalNumber}</SudokuOptions>\r\n                </Button>\r\n                <Popover\r\n                    id={id}\r\n                    open={open}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'center', }}\r\n                    transformOrigin={{ vertical: 'top', horizontal: 'center', }} >\r\n                    <SudokuPopover handleClose={handleClose} field={field}  Checked={Checked} setChecked={setChecked}/>\r\n                </Popover>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst SudokuNumberBox = (props) => {\r\n    const { height } = props;\r\n    let fontsize = height * .75;\r\n    if (fontsize > 50) {\r\n        fontsize = 50;\r\n    }\r\n\r\n    return <Box height={height} width=\"100%\" fontSize={fontsize} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\r\n        <SudokuNumber {...props} />\r\n    </Box>\r\n}\r\n\r\nexport default SudokuNumberBox;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport SudokuNumberBox from \"./SudokuNumberBox\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    subbox: { textAlign: \"center\", height: \"100%\" },\r\n    grid: { borderRight: theme.spacing(0.125) + \"px solid \" + theme.palette.info.main, },\r\n    subgrid: { borderBottom: theme.spacing(0.125) + \"px solid \" + theme.palette.info.main, }\r\n}));\r\n\r\n\r\nconst SudokuSubBox = ({ matrix, height, Checked, setChecked }) => {\r\n    const classes = useStyles();\r\n    const box = matrix.submatrix;\r\n    const key = matrix.x + \",\" + matrix.y;\r\n\r\n    return <Grid container justify=\"center\" className={classes.subbox}>\r\n        {box.map((row, x) => {\r\n            const keyx = key + \"-\" + x;\r\n            return <Grid key={keyx} item xs={4} className={classes.grid}>\r\n                {row.map((column, y) => {\r\n                    const keyy = keyx + \",\" + y;\r\n                    return <Grid key={keyy} item xs={12} className={classes.subgrid}>\r\n                        <SudokuNumberBox field={column} height={height} Checked={Checked} setChecked={setChecked} />\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n        })}\r\n    </Grid>\r\n}\r\n\r\nconst SudokuBox = (props) => {\r\n    const { height } = props;\r\n    const subheight = height / 3 - 1; // x / 3 (3 squares) -1 (1px borders ) \r\n    return <Box height={height} width=\"100%\">\r\n        <SudokuSubBox {...props} height={subheight} />\r\n    </Box>;\r\n}\r\n\r\nexport default SudokuBox;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport SudokuBox from \"../components/SudokuBox\";\r\nimport LocalStorage from \"../logic/LocalStorage\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    const mainborder = theme.spacing(0.25 + 0.125) + \"px solid \" + theme.palette.info.main;\r\n    const border = theme.spacing(0.25) + \"px solid \" + theme.palette.info.main;\r\n    return {\r\n        box: {\r\n            maxWidth: \"calc(100vh - \" + theme.mixins.toolbar.minHeight * 2 + \"px)\",\r\n            margin: theme.spacing(1, \"auto\"),\r\n        },\r\n        root: {\r\n            flexGrow: 1,\r\n            borderLeft: mainborder,\r\n            borderTop: mainborder,\r\n        },\r\n        grid: {\r\n            borderRight: border,\r\n        },\r\n        subgrid: {\r\n            borderBottom: border,\r\n        }\r\n    }\r\n});\r\n\r\nfunction debounce(fn, ms) {\r\n    let timer;\r\n    return _ => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(_ => {\r\n            timer = null\r\n            fn.apply(this, arguments)\r\n        }, ms)\r\n    };\r\n}\r\n\r\n\r\nconst Home = ({ board }) => {\r\n    const canvas = React.useRef(null);\r\n    const [height, setHeight] = React.useState(LocalStorage.get(\"box_height\", 100));\r\n    const [Checked, setChecked] = React.useState(false);\r\n    const BoxHeight = () => {\r\n        setHeight(canvas.current.clientWidth / 3 - 3);// x / 3 (3 squares) -3 (3px borders ) \r\n    }\r\n    const Save = () => {\r\n        LocalStorage.set(\"box_height\", height);\r\n        LocalStorage.set(\"sudoku_board\", board.CloneBoard());\r\n    }\r\n\r\n    const debouncedHandleResize = debounce(BoxHeight, 100);\r\n    //React.useEffect(BoxHeight, []);\r\n    React.useLayoutEffect(BoxHeight, []);\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"resize\", debouncedHandleResize);\r\n        return () => window.removeEventListener(\"resize\", debouncedHandleResize);\r\n    });\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"beforeunload\", Save);\r\n        return () => window.removeEventListener(\"beforeunload\", Save);\r\n    });\r\n\r\n\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.box} ref={canvas}>\r\n            <Grid container justify=\"center\" className={classes.root} >\r\n                {board.matrix.map((row, x) => (\r\n                    <Grid key={x} item xs={4} className={classes.grid}>\r\n                        {row.map((column, y) => (\r\n                            <Grid key={x + \",\" + y} item xs={12} className={classes.subgrid}>\r\n                                <SudokuBox matrix={column} height={height} Checked={Checked} setChecked={setChecked} />\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Home;","import React from 'react';\nimport Header from './components/header';\nimport Home from './pages/Home';\nimport './App.css';\n\nimport SudokuResolver from \"./logic/SudokuResolver\";\nimport LocalStorage from \"./logic/LocalStorage\";\n\n\nconst cacheboard = LocalStorage.get(\"sudoku_board\", null);\nconst baseboard = new SudokuResolver(45, cacheboard);\n\n\nfunction App() {\n    return (\n        <Header board={baseboard}>\n            <Home board={baseboard} />\n        </Header>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        console.log(\"b\");\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            console.log(\"c\");\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n\n            console.log(\"d\");\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: {\n                'Service-Worker': 'script'\n            },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n\nserviceWorker.register();"],"sourceRoot":""}