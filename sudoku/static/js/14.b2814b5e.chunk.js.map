{"version":3,"sources":["components/SudokuNumberBox.jsx","components/SudokuBox.jsx","pages/Home.jsx"],"names":["SudokuPopover","lazy","SudokuOptions","useStyles","makeStyles","theme","palette","primary","getContrastText","background","grey","light","type","button","height","width","fontSize","fontWeight","minWidth","borderRadius","padding","color","paper","backgroundColor","error","main","contrastText","selected","disabled","popper","zIndex","SudokuNumber","field","OptionsActive","setOptionsActive","SaveBoard","classes","anchorRef","React","useRef","useState","open","setOpen","ChangeOption","SetChangeOption","handleClose","number","locked","options","FinalNumber","SetFinalNumber","FinalError","SetError","Options","SetOptions","className","clsx","Button","root","fallback","Fragment","ref","onClick","event","prev","Popper","anchorEl","current","role","undefined","transition","TransitionProps","placement","parentOptions","SudokuNumberBox","props","fontsize","Box","display","alignItems","justifyContent","mainbordercolor","info","dark","subbox","textAlign","grid","borderRight","spacing","subgrid","borderBottom","SudokuSubBox","matrix","box","submatrix","key","x","y","Grid","container","justify","map","row","keyx","item","xs","column","keyy","SudokuBox","subheight","Modal","Typography","DifficultyButtons","mainborder","border","maxWidth","mixins","toolbar","minHeight","margin","flexGrow","borderLeft","borderTop","top","left","position","boxShadow","shadows","transform","outline","debounce","fn","ms","timer","clearTimeout","setTimeout","apply","arguments","Home","board","canvas","LocalStorage","get","setHeight","success","Success","setSuccess","debouncedHandleResize","BoxHeight","clientWidth","finalheight","set","CloneBoard","useLayoutEffect","useEffect","window","addEventListener","removeEventListener","modal","onClose","aria-labelledby","aria-describedby","Text","id","variant","gutterBottom","Math","round","random"],"mappings":"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","file":"static/js/14.b2814b5e.chunk.js","sourcesContent":["import React, { lazy, Suspense } from 'react';\nimport clsx from 'clsx';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\n\nconst SudokuPopover = lazy(() => import('./SudokuPopover'));\nconst SudokuOptions = lazy(() => import('./SudokuOptions'));\n\nconst renderLoader = () => null;\n\n\nconst useStyles = makeStyles((theme) => {\n    const { primary, getContrastText, background, grey } = theme.palette;\n    const light = theme.palette.type === \"light\";\n    return {\n        button: {\n            height: \"100%\",\n            width: \"100%\",\n            fontSize: \"1em\",\n            fontWeight: \"normal\",\n            minWidth: 0,\n            borderRadius: 0,\n            padding: 0,\n            color: light ? \"\" : getContrastText(background.paper),\n            '&$disabled': {\n                color: light ? grey[500] : grey[300],\n                backgroundColor: light ? grey[200] : grey[800],\n            },\n        },\n        error: {\n            color: theme.palette.error.main,\n            '&$disabled': {\n                color: theme.palette.error.contrastText,\n                backgroundColor: theme.palette.error.main\n            },\n        },\n        selected: {\n            backgroundColor: primary.light,\n            color: getContrastText(primary.light),\n            \"&:hover\": {\n                backgroundColor: primary.main,\n            }\n        },\n        disabled: {},\n        popper: {\n            zIndex: 1300\n        },\n    }\n});\n\n\n\n\nconst SudokuNumber = ({ field, OptionsActive, setOptionsActive,SaveBoard }) => {\n    const classes = useStyles();\n    const anchorRef = React.useRef(null);\n\n    const [open, setOpen] = React.useState(false);\n\n    const [ChangeOption, SetChangeOption] = React.useState(false);\n\n\n    const handleClick = (event) => {\n        setOpen((prev) => !prev);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        SaveBoard();\n    };\n\n\n    let { number, locked, error, options } = field;\n\n    const [FinalNumber, SetFinalNumber] = React.useState(number);\n    field.SetFinalNumber = SetFinalNumber;\n    field.number = FinalNumber;\n\n    const [FinalError, SetError] = React.useState(error);\n    field.SetError = SetError;\n    field.error = FinalError;\n\n    const [Options, SetOptions] = React.useState(options);\n    field.SetOptions = SetOptions;\n    field.options = Options;\n\n    const className = clsx(classes.button, FinalError && classes.error, open && classes.selected, ChangeOption);\n\n    if (locked) {\n        return (\n            <Button disabled classes={{ root: className, disabled: classes.disabled, }}  >\n                <Suspense fallback={renderLoader()}>\n                    <SudokuOptions options={Options}> {FinalNumber}</SudokuOptions>\n                </Suspense>\n            </Button>\n        )\n    } else {\n        return (\n            <React.Fragment>\n                <Button ref={anchorRef} className={className} onClick={handleClick}>\n                    <Suspense fallback={renderLoader()}>\n                        <SudokuOptions options={Options}> {FinalNumber}</SudokuOptions>\n                    </Suspense>\n                </Button>\n                <Suspense fallback={renderLoader()}>\n                    <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition className={classes.popper}>\n                        {({ TransitionProps, placement }) => (\n                            <SudokuPopover\n                                TransitionProps={TransitionProps}\n                                placement={placement}\n                                handleClose={handleClose}\n                                field={field}\n                                OptionsActive={OptionsActive}\n                                setOptionsActive={setOptionsActive}\n                                parentOptions={SetChangeOption}\n                            />\n                        )}\n                    </Popper>\n\n                </Suspense>\n            </React.Fragment>\n        );\n    }\n}\n\n\n\nconst SudokuNumberBox = (props) => {\n    const { height } = props;\n    let fontsize = height * .75;\n    if (fontsize > 50) {\n        fontsize = 50;\n    }\n\n    return <Box height={height} width=\"100%\" fontSize={fontsize} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n        <SudokuNumber {...props} />\n    </Box>\n}\n\nexport default SudokuNumberBox;","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport SudokuNumberBox from \"./SudokuNumberBox\";\n\n\nconst useStyles = makeStyles((theme) => {\n    const light = theme.palette.type === \"light\";\n    const mainbordercolor = light ? theme.palette.info.dark : theme.palette.primary.light;\n    return {\n        subbox: { textAlign: \"center\", height: \"100%\" },\n        grid: { borderRight: theme.spacing(0.125) + \" solid \" + mainbordercolor },\n        subgrid: { borderBottom: theme.spacing(0.125) + \" solid \" + mainbordercolor }\n    }\n});\n\n\nconst SudokuSubBox = ({ matrix, height, OptionsActive, setOptionsActive ,SaveBoard}) => {\n    const classes = useStyles();\n    const box = matrix.submatrix;\n    const key = matrix.x + \",\" + matrix.y;\n\n    return <Grid container justify=\"center\" className={classes.subbox}>\n        {box.map((row, x) => {\n            const keyx = key + \"-\" + x;\n            return <Grid key={keyx} item xs={4} className={classes.grid}>\n                {row.map((column, y) => {\n                    const keyy = keyx + \",\" + y;\n                    return <Grid key={keyy} item xs={12} className={classes.subgrid}>\n                        <SudokuNumberBox field={column} height={height} OptionsActive={OptionsActive} setOptionsActive={setOptionsActive} SaveBoard={SaveBoard}/>\n                    </Grid>\n                })}\n            </Grid>\n        })}\n    </Grid>\n}\n\nconst SudokuBox = (props) => {\n    const { height } = props;\n    const subheight = height / 3 - 1; // x / 3 (3 squares) -1 (1px borders ) \n    return <Box height={height} width=\"100%\">\n        <SudokuSubBox {...props} height={subheight} />\n    </Box>;\n}\n\nexport default SudokuBox;","import React, { lazy, Suspense } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\n\n\nimport SudokuBox from \"../components/SudokuBox\";\nimport LocalStorage from \"../logic/LocalStorage\";\nimport Text from '../languages/Language';\n\n\n// import Modal from '@material-ui/core/Modal';\n// import Typography from '@material-ui/core/Typography';\n// import { DifficultyButtons } from \"../components/Buttons\";\n\nconst Modal = lazy(() => import('@material-ui/core/Modal'));\nconst Typography = lazy(() => import('@material-ui/core/Typography'));\nconst DifficultyButtons = lazy(() => import('../components/buttons/DifficultyButtons'));\n\n\nconst useStyles = makeStyles((theme) => {\n    const light = theme.palette.type === \"light\";\n    const mainbordercolor = light ? theme.palette.info.dark : theme.palette.primary.light;\n    const mainborder = theme.spacing(0.25 + 0.125) + \" solid \" + mainbordercolor;\n    const border = theme.spacing(0.25) + \" solid \" + mainbordercolor;\n    return {\n        box: {\n            maxWidth: \"calc(100vh - \" + theme.mixins.toolbar.minHeight * 2 + \"px)\",\n            margin: theme.spacing(1, \"auto\"),\n        },\n        root: {\n            flexGrow: 1,\n            borderLeft: mainborder,\n            borderTop: mainborder,\n        },\n        grid: {\n            borderRight: border,\n        },\n        subgrid: {\n            borderBottom: border,\n        },\n        paper: {\n            top: \"50%\",\n            left: \"50%\",\n            position: 'absolute',\n            backgroundColor: theme.palette.background.paper,\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(8),\n            transform: `translate(-50%, -50%)`,\n            outline: \"none\",\n        },\n    }\n});\n\nfunction debounce(fn, ms) {\n    let timer;\n    return () => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n            timer = null\n            fn.apply(this, arguments)\n        }, ms)\n    };\n}\n\n\nconst Home = (props) => {\n    const { board } = props;\n    const classes = useStyles();\n    const canvas = React.useRef(null);\n    const [height, setHeight] = React.useState(LocalStorage.get(\"box_height\", 100));\n    const [OptionsActive, setOptionsActive] = React.useState(LocalStorage.get(\"options_active\", false));\n\n    const [Success, setSuccess] = React.useState(board.success);\n    board.setSuccess = setSuccess;\n    board.success = Success;\n\n\n    const handleClose = () => {\n        setSuccess(false);\n    };\n\n    const BoxHeight = () => {\n        if(canvas.current.clientWidth>0){\n            const finalheight=canvas.current.clientWidth / 3 - 3;// x / 3 (3 squares) -3 (3px borders ) \n            setHeight(finalheight);\n            LocalStorage.set(\"box_height\", finalheight);\n        }else{\n            setTimeout(BoxHeight, 100);\n        }\n    }\n    const debouncedHandleResize = debounce(BoxHeight, 100);\n\n    const Save = () => {\n        LocalStorage.set(\"sudoku_board\", board.CloneBoard());\n    }\n    const SaveBoard = debounce(Save, 3000);\n\n    React.useLayoutEffect(debouncedHandleResize, []);\n    React.useEffect(() => {\n        window.addEventListener(\"resize\", debouncedHandleResize);\n        return () => window.removeEventListener(\"resize\", debouncedHandleResize);\n    });\n    // React.useEffect(() => {\n    //     window.addEventListener(\"beforeunload\", Save);\n    //     return () => window.removeEventListener(\"beforeunload\", Save);\n    // });\n\n\n    const renderLoader = () => Text(\"loading\");\n    const modal = (\n        <Modal\n            open={Success}\n            onClose={handleClose}\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n        >\n            <Suspense fallback={renderLoader()}>\n                <div className={classes.paper}>\n                    <Typography id=\"modal-title\" variant=\"h4\" gutterBottom> {Text(\"victory\"+(Math.round(Math.random()*9)+1))}</Typography>\n                    <Typography id=\"modal-description\" variant=\"h5\" gutterBottom> {Text(\"newgame\")} </Typography>\n                    <DifficultyButtons {...props} />\n                    <p> ... {Text(\"victorycomment\"+(Math.round(Math.random()*9)+1))}</p>\n                </div>\n            </Suspense>\n        </Modal>\n    );\n\n\n\n\n    return (\n        <Box className={classes.box} ref={canvas}>\n            {modal}\n            <Grid container justify=\"center\" className={classes.root} >\n                {board.matrix.map((row, x) => (\n                    <Grid key={x} item xs={4} className={classes.grid}>\n                        {row.map((column, y) => (\n                            <Grid key={x + \",\" + y} item xs={12} className={classes.subgrid}>\n                                <SudokuBox matrix={column} height={height} OptionsActive={OptionsActive} setOptionsActive={setOptionsActive} SaveBoard={SaveBoard} />\n                            </Grid>\n                        ))}\n                    </Grid>\n                ))}\n            </Grid>\n        </Box>\n    )\n}\n\nexport default Home;"],"sourceRoot":""}