{"version":3,"sources":["../node_modules/@material-ui/core/esm/List/ListContext.js","../node_modules/@material-ui/core/esm/List/List.js","components/buttons/LanguageSelector.jsx"],"names":["ListContext","React","List","props","ref","children","classes","className","_props$component","component","Component","_props$dense","dense","_props$disablePadding","disablePadding","subheader","other","_objectWithoutProperties","context","Provider","value","_extends","clsx","root","padding","withStyles","listStyle","margin","position","paddingTop","paddingBottom","name","useStyles","makeStyles","theme","select","color","palette","primary","contrastText","spacing","icon","nested","paddingLeft","LanguageSelector","mode","useContext","LanguageContext","userLanguage","userLanguageChange","useState","anchorEl","setAnchorEl","handleMenuItemClick","e","id","setOpen","open","title","Text","aria-controls","aria-haspopup","onClick","event","currentTarget","smDown","languageOptions","mdUp","Boolean","onClose","Object","entries","map","key","selected","Fragment","button","in","timeout","unmountOnExit"],"mappings":"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","file":"static/js/13.5eec833f.chunk.js","sourcesContent":["import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar ListContext = /*#__PURE__*/React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  ListContext.displayName = 'ListContext';\n}\n\nexport default ListContext;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from './ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative'\n  },\n\n  /* Styles applied to the root element if `disablePadding={false}`. */\n  padding: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n\n  /* Styles applied to the root element if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if a `subheader` is provided. */\n  subheader: {\n    paddingTop: 0\n  }\n};\nvar List = /*#__PURE__*/React.forwardRef(function List(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'ul' : _props$component,\n      _props$dense = props.dense,\n      dense = _props$dense === void 0 ? false : _props$dense,\n      _props$disablePadding = props.disablePadding,\n      disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,\n      subheader = props.subheader,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"dense\", \"disablePadding\", \"subheader\"]);\n\n  var context = React.useMemo(function () {\n    return {\n      dense: dense\n    };\n  }, [dense]);\n  return /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),\n    ref: ref\n  }, other), subheader, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * If `true`, vertical padding will be removed from the list.\n   * @default false\n   */\n  disablePadding: PropTypes.bool,\n\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiList'\n})(List);","import React, { useContext, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\n\r\n\r\n// import LocalStorage from '../../logic/LocalStorage';\r\nimport Text, { LanguageContext, languageOptions } from '../../languages/Language';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    select: {\r\n        color: theme.palette.primary.contrastText,\r\n        padding: theme.spacing(1, 0)\r\n    },\r\n    icon: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(4),\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function LanguageSelector({ mode = \"button\" }) {\r\n    const classes = useStyles();\r\n    const { userLanguage, userLanguageChange } = useContext(LanguageContext);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    // set selected language by calling context method\r\n    const handleMenuItemClick = (e, id) => {\r\n        userLanguageChange(id);\r\n        setAnchorEl(null);\r\n        setOpen(false);\r\n    }\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickList = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n\r\n    // useEffect(() => {\r\n    //     let defaultLanguage = LocalStorage.get(\"rcml-lang\", navigator.language.substring(0, 2) || navigator.userLanguage.substring(0, 2));\r\n    //     if(userLanguage!==defaultLanguage){\r\n    //         userLanguageChange(defaultLanguage);\r\n    //     }\r\n    // }, [userLanguage,userLanguageChange]);\r\n\r\n    if (mode === \"button\") {\r\n        return (\r\n            <div>\r\n                <Tooltip title={Text('language')}>\r\n                    <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} className={classes.select}>\r\n                        <LanguageIcon className={classes.icon} />\r\n                        <Hidden smDown>\r\n                            {languageOptions[userLanguage]}\r\n                        </Hidden>\r\n                        <Hidden mdUp>\r\n                            {userLanguage}\r\n                        </Hidden>\r\n                    </Button>\r\n                </Tooltip>\r\n                <Menu\r\n                    id=\"simple-menu\"\r\n                    anchorEl={anchorEl}\r\n                    open={Boolean(anchorEl)}\r\n                    onClose={handleClose}>\r\n                    {Object.entries(languageOptions).map(([id, name]) => (\r\n                        <MenuItem key={id} selected={id === userLanguage} onClick={(event) => handleMenuItemClick(event, id)}>{name}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <React.Fragment>\r\n                <ListItem button onClick={handleClickList}>\r\n                    <ListItemIcon>\r\n                        <LanguageIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary={Text(\"language\")} />\r\n                    {open ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                    <List component=\"div\" disablePadding>\r\n                        {Object.entries(languageOptions).map(([id, name]) => (\r\n                            <ListItem key={id} selected={id === userLanguage} button className={classes.nested} onClick={(event) => handleMenuItemClick(event, id)}>\r\n                                <ListItemIcon>\r\n                                    {id}\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={name} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </Collapse>\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n\r\n}"],"sourceRoot":""}