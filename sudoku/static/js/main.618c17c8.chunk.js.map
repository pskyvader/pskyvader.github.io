{"version":3,"sources":["logic/LocalStorage.js","logic/SudokuValue.js","logic/SudokuNumber.js","logic/SudokuResolver.js","logic/Sudoku.js","components/Header.jsx","serviceWorker.js","components/UseServiceWorker.jsx","App.jsx","index.js"],"names":["LocalStorage","key","default_value","expiration_time","value","JSON","parse","localStorage","getItem","this","set","Date","now","data","setItem","stringify","SudokuValue","x","y","i","j","callback","SetNumber","number","SetValue","Duplicates","undefined","SetFinalNumber","SetValueError","error","SetError","SetValueOptions","options","SetOptions","Set","locked","SudokuNumber","CleanDuplicated","CheckDuplicates","CheckSuccess","submatrix","checklist","rows","push","verticallines","horizontallines","list","SudokuResolver","n","cacheboard","RandomNumbers","t","Error","emptyspaces","index","pos","Math","floor","random","length","current","field","matrix","clear","splice","CreateBoard","deep","Resolve","errorcount","CreateEmptyBoard","CleanBoard","removed","tmp","clonelist","CloneBoard","solutions","ResolveUnique","RestoreBoard","console","log","changes","FillSingleOption","FillByLine","CheckCompleteBoard","randomtry","Random","randomoptions","last","sol","arrayEquals","e","element","min","CheckOptions","size","values","next","CheckUnique","unique","UniqueList","arr","difference","filter","has","DuplicatesList","delete","a","b","Array","isArray","every","val","t0","performance","t1","success","EmptySpaces","SetSuccessValue","setSuccess","count","square","MarkDuplicates","vertical","horizontal","duplicated","search","reduce","DifficultyButtons","lazy","DarkModeButton","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","props","classes","className","AppBar","position","Toolbar","Typography","variant","fallback","Container","children","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","Snackbaralert","Message","setMessage","waitingServiceWorker","installPrompt","setInstalled","handleClose","event","reason","alertmessage","Alert","elevation","severity","action","Fragment","Button","color","onClick","prompt","userChoice","choiceResult","outcome","IconButton","fontSize","postMessage","type","onClose","Snackbar","open","anchorOrigin","TransitionComponent","props2","Slide","direction","UseServiceWorker","React","useState","setWaitingServiceWorker","setinstallPrompt","Installed","useEffect","onOpen","waiting","preventDefault","target","Home","baseboard","App","Difficulty","setDifficulty","useMediaQuery","DarkMode","SetDarkMode","useMemo","createMuiTheme","palette","primary","main","blueGrey","indigo","secondary","purple","Save","removeEventListener","ThemeProvider","CssBaseline","board","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.618c17c8.chunk.js","sourcesContent":["class LocalStorage {\n    // 1 day default \n    static get(key, default_value = null, expiration_time = 1) {\n        var value = JSON.parse(localStorage.getItem(key));\n        if (value == null) {\n            this.set(key, default_value, expiration_time);\n        } else {\n            if (value.expiration_time < Date.now()) {\n                this.set(key, default_value, expiration_time);\n            } else {\n                return value.data;\n            }\n        }\n\n        return default_value;\n    }\n    static set(key, value, expiration_time = 1) {\n        if (value != null) {\n            expiration_time = Date.now() + expiration_time * 24 * 60 * 60 * 1000;\n            localStorage.setItem(key, JSON.stringify({\n                data: value,\n                expiration_time: expiration_time\n            }));\n        }\n    }\n\n}\n\nexport default LocalStorage;","class SudokuValue {\n    constructor(x, y, i, j, callback) {\n        this.number = \"\";\n        this.options = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n        this.x = x;\n        this.y = y;\n        this.i = i;\n        this.j = j;\n        this.locked = false;\n        this.callback = callback;\n        this.error = false;\n    }\n\n    SetNumber = (number) => {\n        this.SetValue(number);\n        this.callback.Duplicates();\n    }\n    SetValue = (number) => {\n        if (this.SetFinalNumber !== undefined) {\n            this.SetFinalNumber(number);\n        }\n        this.number = number;\n    }\n    SetValueError = (error) => {\n        if (this.SetError !== undefined) {\n            this.SetError(error);\n        }\n        this.error = error;\n    }\n    SetValueOptions = (options) => {\n        if (this.SetOptions !== undefined) {\n            this.SetOptions(options);\n        }\n        this.options = options;\n    }\n}\n\nexport default SudokuValue;","import SudokuValue from './SudokuValue';\n\nclass SudokuNumber {\n    constructor(x, y, callback) {\n        this.x = x;\n        this.y = y;\n        this.callback = callback;\n        this.submatrix = [];\n        this.checklist = [];\n        for (let i = 0; i < 3; i++) {\n            let rows = [];\n            for (let j = 0; j < 3; j++) {\n                rows[j] = new SudokuValue(x, y, i, j, this);\n                this.checklist.push(rows[j]);\n                this.callback.verticallines[x][i].push(rows[j]);\n                this.callback.horizontallines[y][j].push(rows[j]);\n                this.callback.list.push(rows[j]);\n            }\n            this.submatrix[i] = rows;\n        }\n    }\n    Duplicates = () => {\n        this.callback.CleanDuplicated();\n        this.callback.CheckDuplicates();\n        this.callback.CheckSuccess();\n    }\n}\n\nexport default SudokuNumber;","import Sudoku from './Sudoku';\n\nclass SudokuResolver extends Sudoku {\n    constructor(n, cacheboard = null) {\n        super();\n        this.errorcount = 0;\n        if (cacheboard === null) {\n            var t0 = performance.now();\n            this.CreateBoard(n);\n            var t1 = performance.now();\n            console.log(\"CreateSudoku took \" + (t1 - t0) + \" milliseconds.\");\n            //console.log(t1 - t0);\n        } else {\n            this.RestoreBoard(cacheboard);\n        }\n    }\n    RandomNumbers = (number) => {\n        const t = this;\n        if (number > 81 || number < 1) {\n            throw Error(\"number out of range\");\n        }\n        const emptyspaces = [...t.emptyspaces];\n        for (let index = 0; index < number; index++) {\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\n            const current = emptyspaces[pos];\n\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\n            field.SetValue(Math.floor(1 + Math.random() * 8));\n            t.CleanDuplicated();\n            const duplicated = t.CheckDuplicates();\n            if (duplicated > 0) {\n                field.number = \"\";\n                index--;\n                continue;\n            }\n            field.options.clear();\n            emptyspaces.splice(pos, 1);\n        }\n    }\n\n    CreateBoard = (n, deep = 0) => {\n        const t = this;\n        if (n > 81 || n < 1) {\n            throw Error(\"number out of range\");\n        }\n        t.RandomNumbers(27);\n\n        try {\n            t.Resolve();\n        } catch (error) {\n            t.errorcount += 1;\n            //console.log(error.message, t.errorcount, \"deep:\", deep);\n            t.CreateEmptyBoard();\n            t.CreateBoard(n, deep + 1);\n        }\n        if (deep === 0) {\n            t.CleanBoard(n);\n        }\n    }\n    CleanBoard = (n) => {\n        const t = this;\n        if (n > 81 || n < 1) {\n            throw Error(\"number out of range\");\n        }\n        const emptyspaces = [...t.emptyspaces];\n        let removed = 0;\n\n        while (removed < 81 - n && emptyspaces.length > 0) {\n            const pos = Math.floor(Math.random() * (emptyspaces.length - 1));\n            const current = emptyspaces[pos];\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\n            const tmp = field.number;\n            field.number = \"\";\n            const clonelist = t.CloneBoard();\n            const solutions = t.ResolveUnique();\n            t.RestoreBoard(clonelist);\n            if(solutions===0){\n                console.log(solutions,\"solutions\");\n            }\n            if (solutions===1) {\n                removed++;\n            } else {\n                field.number = tmp;\n            }\n            emptyspaces.splice(pos, 1);\n        }\n        for (let index = 0; index < t.emptyspaces.length; index++) {\n            const current = t.emptyspaces[index];\n            let field = t.matrix[current[0]][current[1]].submatrix[current[2]][current[3]];\n            if(field.number!==\"\"){\n                field.locked=true;\n            }\n        }\n    }\n\n\n    ResolveUnique = (deep = 0,solutions=0) => {\n        if (solutions>1){\n            return solutions;\n        }\n        const t = this;\n        let changes = 1;\n        while (changes > 0) {\n            changes = 0;\n            changes += t.FillSingleOption(); // check if there are any field with only one option and use it\n            if (changes === 0) {\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\n            }\n        }\n\n        if (!t.CheckCompleteBoard()) {\n            const clonelist = t.CloneBoard();\n            const randomtry = t.Random();\n            let randomoptions = [...randomtry.options];\n            randomtry.number = randomoptions[0];\n            let last = 0;\n            let i = 0;\n            //let solutions = 0;\n            while (randomtry.number !== last && randomtry.number !== undefined) {\n                last = randomtry.number;\n                t.RestoreBoard(clonelist);\n                randomtry.number = last;\n                try {\n                    let sol=solutions;\n                    solutions=t.ResolveUnique(deep + 1,solutions);\n                    if(solutions>sol){\n                        solutions++;\n                    }\n                } catch (error) {\n                    //console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\n                } finally {\n                    if(!t.arrayEquals(randomoptions,[...randomtry.options])){\n                        randomoptions = [...randomtry.options];\n                        i=0;\n                    } else {\n                        i++;\n                    }\n                    randomtry.number = randomoptions[i];\n                }\n            }\n            randomtry.number = \"\";\n\n            if (solutions > 1) {\n                return solutions;\n            }\n\n            if (!t.CheckCompleteBoard()) {\n                return t.ResolveUnique(deep + 1,solutions);\n            } else {\n                solutions++;\n                return solutions;\n            }\n        } else {\n            solutions++;\n            return solutions;\n        }\n    }\n\n\n    Resolve = (deep = 0) => {\n        const t = this;\n        let changes = 1;\n        while (changes > 0) {\n            changes = 0;\n            changes += t.FillSingleOption(); // check if there are any field with only one option and use it\n            if (changes === 0) {\n                changes += t.FillByLine(); // check if there are any line or square with a unique number in its options and use it\n            }\n        }\n\n        if (!t.CheckCompleteBoard()) {\n            const clonelist = t.CloneBoard();\n            const randomtry = t.Random();\n            let randomoptions = [...randomtry.options];\n            randomtry.number = randomoptions[0];\n            let last = 0;\n            let i = 0;\n            while (!t.CheckCompleteBoard() && randomtry.number !== last && randomtry.number !== undefined) {\n                last = randomtry.number;\n                t.RestoreBoard(clonelist);\n                randomtry.number = last;\n                try {\n                    t.Resolve(deep + 1);\n                } catch (error) {\n                    //console.log(error.message, t.errorcount, \"Submatrix\", \"deep:\", deep);\n                } finally {\n                    if(!t.arrayEquals(randomoptions,[...randomtry.options])){\n                        randomoptions = [...randomtry.options];\n                        i=0;\n                    } else {\n                        i++;\n                    }\n                    randomtry.number = randomoptions[i];\n                }\n            }\n            randomtry.number=\"\";\n\n\n            if (!t.CheckCompleteBoard()) {\n                t.Resolve();\n            } else {\n                randomtry.SetValue(randomtry.number);\n                randomtry.options.clear();\n            }\n        }\n    }\n\n    CloneBoard = () => {\n        const t = this;\n        let clonelist = [];\n        for (let i = 0; i < t.list.length; i++) {\n            const e = t.list[i];\n            clonelist.push({\n                x: e.x,\n                y: e.y,\n                i: e.i,\n                j: e.j,\n                number: e.number,\n                options: [...e.options],\n                locked: e.locked,\n                error: e.error\n            });\n        }\n        return clonelist;\n    }\n    RestoreBoard = (clonelist) => {\n        const t = this;\n        for (let index = 0; index < clonelist.length; index++) {\n            const e = clonelist[index];\n            const element = t.matrix[e.x][e.y].submatrix[e.i][e.j];\n            element.SetValue(e.number);\n            element.SetValueOptions(new Set(e.options));\n            element.locked = e.locked;\n            element.SetValueError(e.error);\n        }\n        this.CheckSuccess();\n    }\n\n    CheckCompleteBoard = () => {\n        const t = this;\n        for (let i = 0; i < t.list.length; i++) {\n            const element = t.list[i];\n            if (element.number === \"\") {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n    Random = (min = 3) => { //returns a cell with less options than MIN\n        const t = this;\n        for (let i = 0; i < t.list.length; i++) {\n            const element = t.list[i];\n            if (element.number === \"\") {\n                t.CheckOptions(element);\n                if (element.options.size < min) {\n                    return element;\n                }\n            }\n        }\n        return t.Random(min + 1);\n    }\n\n\n    FillSingleOption = () => {\n        const t = this;\n        let changes = 0;\n        for (let index = 0; index < t.list.length; index++) {\n            const element = t.list[index];\n            if (element.number === \"\") {\n                t.CheckOptions(element);\n                if (element.options.size === 1) {\n                    element.SetValue(element.options.values().next().value);\n                    element.options.clear();\n                    changes++;\n                }\n            }\n        }\n        return changes;\n    }\n\n    FillByLine = () => {\n        const t = this;\n        let changes = 0;\n        for (let index = 0; index < t.list.length; index++) {\n            const element = t.list[index];\n            if (element.number === \"\") {\n                if (t.CheckUnique(element)) {\n                    element.options.clear();\n                    changes++;\n                }\n            }\n        }\n        return changes;\n    }\n\n    CheckUnique = (number) => {\n        const t = this;\n        let unique = 0;\n        const {\n            x,\n            y,\n            i,\n            j\n        } = number;\n        unique = t.UniqueList(t.matrix[x][y].checklist, number);\n        if (unique !== 0) {\n            number.SetValue(unique);\n            return true;\n        }\n        unique = t.UniqueList(t.verticallines[x][i], number);\n        if (unique !== 0) {\n            number.SetValue(unique);\n            return true;\n        }\n        unique = t.UniqueList(t.horizontallines[y][j], number);\n        if (unique !== 0) {\n            number.SetValue(unique);\n            return true;\n        }\n        return false;\n    }\n\n    UniqueList = (arr, number) => {\n        const t = this;\n        let options = new Set();\n        for (let i = 0; i < arr.length; i++) {\n            const element = arr[i];\n            if (element.number === \"\" && element !== number) {\n                t.CheckOptions(element);\n                options = new Set([...options, ...element.options]);\n            }\n        }\n        t.CheckOptions(number);\n        let difference = new Set([...number.options].filter(x => !options.has(x)));\n        if (difference.size === 1) {\n            return difference.values().next().value;\n        }\n        return 0;\n    }\n\n    CheckOptions = (number) => {\n        const t = this;\n        let list = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n        const {\n            x,\n            y,\n            i,\n            j\n        } = number;\n        t.DuplicatesList(t.matrix[x][y].checklist, list);\n        t.DuplicatesList(t.verticallines[x][i], list);\n        t.DuplicatesList(t.horizontallines[y][j], list);\n        number.options = list;\n    }\n\n    DuplicatesList = (arr, list) => {\n        for (let i = 0; i < arr.length; i++) {\n            const element = arr[i];\n            if (element.number !== \"\") {\n                list.delete(element.number);\n            }\n        }\n        if (list.size === 0) {\n            throw Error(\"Empty options\");\n        }\n    }\n\n    arrayEquals=(a, b)=> {\n        return Array.isArray(a) &&\n          Array.isArray(b) &&\n          a.length === b.length &&\n          a.every((val, index) => val === b[index]);\n      }\n\n}\n\nexport default SudokuResolver;","import SudokuNumber from './SudokuNumber';\n\n\n\nclass Sudoku {\n    constructor() { //creates an empty sudoku board\n        this.CreateEmptyBoard();\n    }\n\n    CreateEmptyBoard = () => {\n        this.success = false;\n        this.matrix = [];\n        this.emptyspaces = [];\n        this.verticallines = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ]; //3x3 vertical lines\n        this.horizontallines = [ [ [], [], [] ], [ [], [], [] ], [ [], [], [] ] ]; //3x3 horizontal lines\n        this.list = []; //complete list\n        for (let x = 0; x < 3; x++) {\n            let rows = [];\n            for (let y = 0; y < 3; y++) {\n                rows[y] = new SudokuNumber(x, y, this);\n                this.EmptySpaces(x, y);\n            }\n            this.matrix[x] = rows;\n        }\n    }\n    \n    SetSuccessValue=(value)=>{\n        if (this.setSuccess !== undefined) {\n            this.setSuccess(value);\n        }\n        this.success = value;\n    }\n\n    CheckSuccess = () => {\n        for (let i = 0; i < this.list.length; i++) {\n            const element = this.list[i];\n            if (element.number === \"\" || element.error) {\n                this.SetSuccessValue(false);\n                return;\n            }\n        }\n        this.SetSuccessValue(true);\n    }\n\n\n    CleanDuplicated = () => {\n        for (let i = 0; i < this.list.length; i++) {\n            const element = this.list[i];\n            element.SetValueError(false);\n        }\n    }\n\n\n    CheckDuplicates = () => {\n        let count = 0;\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                const square = this.matrix[i][j].checklist;\n                count += this.MarkDuplicates(square);\n\n                const vertical = this.verticallines[i][j];\n                count += this.MarkDuplicates(vertical);\n\n                const horizontal = this.horizontallines[i][j];\n                count += this.MarkDuplicates(horizontal);\n            }\n        }\n        return count;\n    }\n\n\n\n    MarkDuplicates = (arr) => {\n        let count = 0;\n        for (let i = 0; i < arr.length; i++) {\n            const element = arr[i];\n            if (this.duplicated(arr, element.number)) {\n                element.SetValueError(true);\n                count++;\n            }\n        }\n        return count;\n    }\n\n    duplicated = (arr, search) => {\n        let count = arr.reduce(function(n, element) {\n            return n + (search !== \"\" && element.number === search);\n        }, 0);\n        return (count > 1);\n    }\n\n    EmptySpaces = (x, y) => {\n        for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n                this.emptyspaces.push([x, y, i, j]);\n            }\n        }\n    }\n}\n\nexport default Sudoku;","import React, { lazy, Suspense } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\n// import { DifficultyButtons, DarkModeButton } from './Buttons';\nconst DifficultyButtons = lazy(() => import('./buttons/DifficultyButtons'));\nconst DarkModeButton = lazy(() => import('./buttons/DarkModeButton'));\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: { flexGrow: 1, },\n    menuButton: { marginRight: theme.spacing(2), },\n    title: { flexGrow: 1, }\n}));\n\nconst renderLoader = () => null;\n\nexport default function ButtonAppBar(props) {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton> */}\n                    <Typography variant=\"h6\" className={classes.title}> Sudoku </Typography>\n                    <Suspense fallback={renderLoader()}>\n                        <DarkModeButton {...props} />\n                    </Suspense>\n                    <Suspense fallback={renderLoader()}>\n                        <DifficultyButtons {...props} />\n                    </Suspense>\n                </Toolbar>\n            </AppBar>\n            <Container>\n                {props.children}\n            </Container>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n            headers: {\n                'Service-Worker': 'script'\n            },\n        })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Slide from '@material-ui/core/Slide';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport * as serviceWorker from '../serviceWorker';\nimport LocalStorage from '../logic/LocalStorage';\n\n\n\nconst Snackbaralert = (props) => {\n    const { Message, setMessage, waitingServiceWorker, installPrompt, setInstalled } = props;\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setMessage(\"\");\n    };\n    const handleInstallClose = () => {\n        setInstalled(true);\n        LocalStorage.set(\"installed\", true);\n        setMessage(\"\");\n    };\n\n    const handleUpdate = () => {\n        if (waitingServiceWorker) {\n            // We send the SKIP_WAITING message to tell the Service Worker\n            // to update its cache and flush the old one\n            waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\n        }\n        setMessage(\"\");\n    };\n    const handleInstall = () => {\n        if (installPrompt) {\n            installPrompt.prompt();\n            // Wait for the user to respond to the prompt\n            installPrompt.userChoice.then((choiceResult) => {\n                if (choiceResult.outcome === 'accepted') {\n                    console.log('User accepted the install prompt');\n                } else {\n                    setInstalled(true);\n                    LocalStorage.set(\"installed\", true);\n                    console.log('User dismissed the install prompt');\n                }\n            });\n        }\n        setMessage(\"\");\n    };\n    let alertmessage = <div />;\n    if (Message === \"INSTALL\") {\n        alertmessage = <Alert elevation={6} variant=\"filled\" severity=\"success\"\n            action={\n                <React.Fragment>\n                    <Button color=\"inherit\" size=\"small\" onClick={handleInstall}> INSTALL </Button>\n                    <IconButton color=\"inherit\" size=\"small\" onClick={handleInstallClose}>\n                        <CloseIcon fontSize=\"small\" />\n                    </IconButton>\n                </React.Fragment>\n            }\n        >\n            App Mode Available. You can install this game as an app.\n            </Alert>\n\n    }\n\n    if (Message === \"UPDATE\") {\n        alertmessage = (\n            <Alert elevation={6} variant=\"filled\" severity=\"info\"\n                action={\n                    <React.Fragment>\n                        <Button color=\"inherit\" size=\"small\" onClick={handleUpdate}> UPDATE </Button>\n                        <IconButton color=\"inherit\" size=\"small\" onClick={handleClose}>\n                            <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                    </React.Fragment>\n                }\n            >\n                Update Available!\n            </Alert>\n        )\n    }\n    if (Message === \"OFFLINE\") {\n        alertmessage = (\n            <Alert elevation={6} variant=\"filled\" severity=\"success\" onClose={handleClose} >\n                Offline Mode Available! Now you can play even if you're offline.\n            </Alert>\n        )\n    }\n\n    const transition = (props2) => <Slide {...props2} direction=\"up\" />;\n    return <Snackbar\n        open={Message !== \"\"}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        TransitionComponent={transition}\n    >\n        {alertmessage}\n    </Snackbar>\n}\n\n\n\n\n\nconst UseServiceWorker = () => {\n    const [Message, setMessage] = React.useState(\"\");\n    const [waitingServiceWorker, setWaitingServiceWorker] = React.useState(null);\n    const [installPrompt, setinstallPrompt] = React.useState(null);\n    const [Installed, setInstalled] = React.useState(LocalStorage.get(\"installed\", false));\n\n\n\n    React.useEffect(() => {\n        serviceWorker.register({\n            onOpen: () => {\n                if (Message === \"\") {\n                    setMessage(\"OFFLINE\");\n                }\n            },\n            onUpdate: registration => {\n                setWaitingServiceWorker(registration.waiting);\n                setMessage(\"UPDATE\");\n            },\n        });\n    }, [Message]);\n\n\n    React.useEffect(() => {\n        window.addEventListener('beforeinstallprompt', (e) => {\n            if (localStorage) {\n                // Prevent the mini-infobar from appearing on mobile\n                e.preventDefault();\n                // Stash the event so it can be triggered later.\n                setinstallPrompt(e);\n                if (Message !== \"UPDATE\" && !Installed) {\n                    setMessage(\"INSTALL\");\n                }\n            }\n        });\n    }, [Message, Installed]);\n\n    React.useEffect(() => {\n        // We setup an event listener to automatically reload the page\n        // after the Service Worker has been updated, this will trigger\n        // on all the open tabs of our application, so that we don't leave\n        // any tab in an incosistent state\n        if (waitingServiceWorker) {\n            waitingServiceWorker.addEventListener('statechange', event => {\n                if (event.target.state === 'activated') {\n                    window.location.reload();\n                }\n            });\n        }\n    }, [waitingServiceWorker]);\n\n\n\n    return <Snackbaralert setInstalled={setInstalled} Message={Message} setMessage={setMessage} waitingServiceWorker={waitingServiceWorker} installPrompt={installPrompt} />\n\n};\n\nexport default UseServiceWorker;","import React, { lazy, Suspense } from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport indigo from '@material-ui/core/colors/indigo';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport purple from '@material-ui/core/colors/purple';\n\n\n\nimport Header from './components/Header';\nimport SudokuResolver from './logic/SudokuResolver';\nimport LocalStorage from './logic/LocalStorage';\nimport UseServiceWorker from './components/UseServiceWorker';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst renderLoader = () => null;\n\n\nconst cacheboard = LocalStorage.get(\"sudoku_board\", null);\nconst baseboard = new SudokuResolver(45, cacheboard);\n\nfunction App() {\n    const [Difficulty, setDifficulty] = React.useState(LocalStorage.get(\"difficulty\", 45));\n    const [DarkMode, SetDarkMode] = React.useState(LocalStorage.get(\"dark_mode\", useMediaQuery('(prefers-color-scheme: dark)')));\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    primary: {\n                        main: DarkMode ? blueGrey[800] : indigo[800],\n                    },\n                    secondary: {\n                        main: purple[500]\n                    },\n                    type: DarkMode ? 'dark' : 'light',\n                },\n            }),\n        [DarkMode],\n    );\n\n    const Save = () => {\n        LocalStorage.set(\"difficulty\", Difficulty);\n    }\n    React.useEffect(() => {\n        window.addEventListener(\"beforeunload\", Save);\n        return () => window.removeEventListener(\"beforeunload\", Save);\n    });\n\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <UseServiceWorker/>\n            <Header board={baseboard} Difficulty={Difficulty} setDifficulty={setDifficulty} DarkMode={DarkMode} SetDarkMode={SetDarkMode}>\n                <Suspense fallback={renderLoader()}>\n                    <Home board={baseboard} Difficulty={Difficulty} setDifficulty={setDifficulty} />\n                </Suspense>\n            </Header>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}