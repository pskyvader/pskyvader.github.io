{"version":3,"sources":["components/buttons/DifficultyButtons.jsx"],"names":["buttoncolor","pallete","getContrastText","backgroundColor","main","color","border","dark","useStyles","makeStyles","theme","palette","info","success","warning","error","buttonstar","position","bottom","spacing","right","fontSize","borderRadius","light","button1","button2","button3","button4","DifficultyButtons","props","board","setDifficulty","Difficulty","mode","classes","ResetBoard","n","newboard","SudokuResolver","LocalStorage","set","newmatrix","CloneBoard","RestoreBoard","difficultylist","number","text","Text","class","icon","EmojiEmotionsIcon","InsertEmoticonIcon","FaceIcon","MoodBadIcon","size","map","e","key","title","className","onClick","button","selected","primary","edge","disableRipple","checked"],"mappings":"mGAAA,8NAyBMA,EAAc,SAACC,EAASC,GAC1B,MAAO,CACHC,gBAAiBF,EAAQG,KACzBC,MAAOH,EAAgBD,EAAQG,MAC/BE,OAAQ,OACR,UAAW,CACPH,gBAAiBF,EAAQM,KACzBF,MAAOH,EAAgBD,EAAQM,MAC/BD,OAAQ,UAIdE,EAAYC,aAAW,SAACC,GAAW,IAAD,EACuBA,EAAMC,QAAzDC,EAD4B,EAC5BA,KAAMC,EADsB,EACtBA,QAASC,EADa,EACbA,QAASC,EADI,EACJA,MAAOb,EADH,EACGA,gBACvC,MAAO,CACHc,WAAY,CACRC,SAAU,WACVC,OAAQR,EAAMS,QAAQ,KACtBC,MAAOV,EAAMS,QAAQ,KACrBE,SAAU,UACVC,aAAc,OACdnB,gBAAiB,QACjBE,MAAOS,EAAQS,OAEnBC,QAASxB,EAAYY,EAAMV,GAC3BuB,QAASzB,EAAYa,EAASX,GAC9BwB,QAAS1B,EAAYc,EAASZ,GAC9ByB,QAAS3B,EAAYe,EAAOb,OA0DrB0B,UAtDW,SAACC,GAAW,IAC1BC,EAAsDD,EAAtDC,MAAOC,EAA+CF,EAA/CE,cAAeC,EAAgCH,EAAhCG,WADG,EAC6BH,EAApBI,YADT,MACgB,SADhB,EAG3BC,EAAU1B,IAEhB,SAAS2B,EAAWC,GAChB,IAAMC,EAAW,IAAIC,IAAeF,GACpCL,EAAcK,GACdG,IAAaC,IAAI,aAAcJ,GAC/B,IAAMK,EAAYJ,EAASK,aAC3BZ,EAAMa,aAAaF,GACnBF,IAAaC,IAAI,eAAgBC,GAGrC,IAAMG,EAAiB,CACnB,CAAEC,OAAQ,GAAIC,KAAMC,YAAK,gBAAiBC,MAAOd,EAAQV,QAASyB,KAAMC,KACxE,CAAEL,OAAQ,GAAIC,KAAMC,YAAK,YAAaC,MAAOd,EAAQT,QAASwB,KAAME,KACpE,CAAEN,OAAQ,GAAIC,KAAMC,YAAK,cAAeC,MAAOd,EAAQR,QAASuB,KAAMG,KACtE,CAAEP,OAAQ,GAAIC,KAAMC,YAAK,YAAaC,MAAOd,EAAQP,QAASsB,KAAMI,MAKxE,MAAa,WAATpB,EACO,kBAAC,IAAD,CAAaqB,KAAK,SACpBV,EAAeW,KAAI,SAACC,GAAD,OAChB,kBAAC,IAAD,CAASC,IAAKD,EAAEV,KAAMY,MAAOF,EAAEV,MAC3B,kBAAC,IAAD,CAAQa,UAAWH,EAAER,MAAOY,QAAS,kBAAMzB,EAAWqB,EAAEX,UACpD,kBAACW,EAAEP,KAAH,MACCjB,IAAewB,EAAEX,OAAS,kBAAC,IAAD,CAAWc,UAAWzB,EAAQlB,aAAiB,SAMnF,kBAAC,IAAD,KACF4B,EAAeW,KAAI,SAACC,GAAD,OAChB,kBAAC,IAAD,CAAUK,QAAM,EAACJ,IAAKD,EAAEV,KAAMc,QAAS,kBAAMzB,EAAWqB,EAAEX,SAASiB,SAAU9B,IAAewB,EAAEX,QAC1F,kBAAC,IAAD,SAAe,kBAACW,EAAEP,KAAH,OACf,kBAAC,IAAD,CAAcc,QAASP,EAAEV,OACzB,kBAAC,IAAD,CACIkB,KAAK,MACLC,eAAa,EACbC,QAASlC,IAAewB,EAAEX","file":"static/js/16.48c1576e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport FaceIcon from '@material-ui/icons/Face';\r\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\n\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n\r\n\r\nimport SudokuResolver from \"../../logic/SudokuResolver\";\r\nimport LocalStorage from \"../../logic/LocalStorage\";\r\nimport Text from '../../languages/Language';\r\n\r\nconst buttoncolor = (pallete, getContrastText) => {\r\n    return {\r\n        backgroundColor: pallete.main,\r\n        color: getContrastText(pallete.main),\r\n        border: \"none\",\r\n        '&:hover': {\r\n            backgroundColor: pallete.dark,\r\n            color: getContrastText(pallete.dark),\r\n            border: \"none\",\r\n        },\r\n    }\r\n}\r\nconst useStyles = makeStyles((theme) => {\r\n    const { info, success, warning, error, getContrastText } = theme.palette;\r\n    return {\r\n        buttonstar: {\r\n            position: \"absolute\",\r\n            bottom: theme.spacing(0.25),\r\n            right: theme.spacing(0.25),\r\n            fontSize: \"0.75rem\",\r\n            borderRadius: \"100%\",\r\n            backgroundColor: \"white\",\r\n            color: warning.light\r\n        },\r\n        button1: buttoncolor(info, getContrastText),\r\n        button2: buttoncolor(success, getContrastText),\r\n        button3: buttoncolor(warning, getContrastText),\r\n        button4: buttoncolor(error, getContrastText)\r\n    }\r\n});\r\n\r\nconst DifficultyButtons = (props) => {\r\n    const { board, setDifficulty, Difficulty, mode = \"button\" } = props;\r\n\r\n    const classes = useStyles();\r\n\r\n    function ResetBoard(n) {\r\n        const newboard = new SudokuResolver(n);\r\n        setDifficulty(n);\r\n        LocalStorage.set(\"difficulty\", n);\r\n        const newmatrix = newboard.CloneBoard();\r\n        board.RestoreBoard(newmatrix);\r\n        LocalStorage.set(\"sudoku_board\", newmatrix);\r\n    }\r\n\r\n    const difficultylist = [\r\n        { number: 63, text: Text('veryeasymode'), class: classes.button1, icon: EmojiEmotionsIcon },\r\n        { number: 45, text: Text('easymode'), class: classes.button2, icon: InsertEmoticonIcon },\r\n        { number: 36, text: Text('mediummode'), class: classes.button3, icon: FaceIcon },\r\n        { number: 20, text: Text('hardmode'), class: classes.button4, icon: MoodBadIcon },\r\n    ]\r\n\r\n\r\n\r\n    if (mode === \"button\") {\r\n        return <ButtonGroup size=\"small\">\r\n            {difficultylist.map((e) => (\r\n                <Tooltip key={e.text} title={e.text}>\r\n                    <Button className={e.class} onClick={() => ResetBoard(e.number)}>\r\n                        <e.icon />\r\n                        {Difficulty === e.number ? <StarsIcon className={classes.buttonstar} /> : \"\"}\r\n                    </Button>\r\n                </Tooltip>\r\n            ))}\r\n        </ButtonGroup>\r\n    } else {\r\n        return <List>\r\n            {difficultylist.map((e) => (\r\n                <ListItem button key={e.text} onClick={() => ResetBoard(e.number)} selected={Difficulty === e.number}>\r\n                    <ListItemIcon> <e.icon /></ListItemIcon>\r\n                    <ListItemText primary={e.text} />\r\n                    <Switch\r\n                        edge=\"end\"\r\n                        disableRipple\r\n                        checked={Difficulty === e.number}\r\n                    />\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default DifficultyButtons;"],"sourceRoot":""}