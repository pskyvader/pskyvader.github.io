{"version":3,"sources":["components/buttons/ServiceWorker.jsx"],"names":["useStyles","makeStyles","theme","update","backgroundColor","palette","info","main","color","contrastText","light","install","success","handleUpdate","props","setMessage","waitingServiceWorker","postMessage","type","ServiceWorkerSnackbar","context","React","useContext","ServiceWorkerContext","Message","useState","open","setOpen","handleClose","event","reason","alertmessage","severity","action","button","Text","text","onClose","anchorOrigin","vertical","horizontal","TransitionComponent","direction","elevation","variant","Fragment","size","onClick","fontSize","ServiceWorkerList","classes","installPrompt","prompt","userChoice","then","choiceResult","outcome","console","log","handleInstall","icon","GetAppIcon","RefreshIcon","key","className","primary","ServiceWorker","mode"],"mappings":"4RAsBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,OAAQ,CACJC,gBAAgBF,EAAMG,QAAQC,KAAKC,KACnCC,MAAMN,EAAMG,QAAQC,KAAKG,aACzB,UAAU,CACNL,gBAAgBF,EAAMG,QAAQC,KAAKI,QAG3CC,QAAS,CACLP,gBAAgBF,EAAMG,QAAQO,QAAQL,KACtCC,MAAMN,EAAMG,QAAQO,QAAQH,aAC5B,UAAU,CACNL,gBAAgBF,EAAMG,QAAQO,QAAQF,YAQ5CG,EAAe,SAACC,GAAW,IACrBC,EAAqCD,EAArCC,WAAYC,EAAyBF,EAAzBE,qBAChBA,GAGAA,EAAqBC,YAAY,CAAEC,KAAM,iBAE7CH,EAAW,KAoBTI,EAAwB,WAC1B,IAAMC,EAAUC,IAAMC,WAAWC,KACzBC,EAAYJ,EAAZI,QAFwB,EAGRH,IAAMI,UAAS,GAHP,mBAGzBC,EAHyB,KAGnBC,EAHmB,KAIhC,GAAa,KAAVH,GAA0B,YAAVA,EAAqB,OAAO,KAG/C,IAAMI,EAAc,SAACC,EAAOC,GACT,cAAXA,GAGJH,GAAQ,IAERI,EAAe,GASH,WAAZP,EACAO,EAAe,CACXC,SAAU,OACVC,OAAQ,kBAAMpB,EAAaO,IAC3Bc,OAAQC,YAAK,UACbC,KAAMD,YAAK,qBAEI,YAAZX,IACPO,EAAe,CACXC,SAAU,UACVC,OAAQ,KACRC,OAAQ,KACRE,KAAMD,YAAK,uBAKnB,OAAO,kBAAC,IAAD,CACHT,KAAMA,EACNW,QAAST,EACTU,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,oBALe,SAAC3B,GAAD,OAAW,kBAAC,IAAD,iBAAWA,EAAX,CAAkB4B,UAAU,UAOtD,kBAAC,IAAD,CAAOC,UAAW,EAAGC,QAAQ,SAASZ,SAAUD,EAAaC,SACzDC,OAAgC,OAAxBF,EAAaE,QACjB,kBAAC,IAAMY,SAAP,KACI,kBAAC,IAAD,CAAQrC,MAAM,UAAUsC,KAAK,QAAQC,QAAShB,EAAaE,QAA3D,KAAsEF,EAAaG,OAAnF,KACA,kBAAC,IAAD,CAAY1B,MAAM,UAAUsC,KAAK,QAAQC,QAASnB,GAC9C,kBAAC,IAAD,CAAWoB,SAAS,aAI/BjB,EAAaK,QAOpBa,EAAoB,WACtB,IAAMC,EAAUlD,IACVoB,EAAUC,IAAMC,WAAWC,KACzBC,EAAYJ,EAAZI,QACJO,EAAe,GAkBnB,MAhBgB,YAAZP,EACAO,EAAe,CACXE,OAAQ,kBAtFE,SAACnB,GAAW,IACtBC,EAA8BD,EAA9BC,WAAYoC,EAAkBrC,EAAlBqC,cAChBA,IACAA,EAAcC,SAEdD,EAAcE,WAAWC,MAAK,SAACC,GACE,aAAzBA,EAAaC,QACbC,QAAQC,IAAI,oCAEZD,QAAQC,IAAI,yCAIxB3C,EAAW,IAyEW4C,CAAcvC,IAC5BgB,KAAMD,YAAK,WACXyB,KAAMC,IACNrD,MAAO0C,EAAQvC,SAEA,WAAZa,IACPO,EAAe,CACXE,OAAQ,kBAAMpB,EAAaO,IAC3BgB,KAAMD,YAAK,UACXyB,KAAME,IACNtD,MAAO0C,EAAQ/C,SAIH,YAAZqB,GAAqC,KAAZA,EAEzB,kBAAC,IAAD,CAAUU,QAAM,EAAC6B,IAAKhC,EAAaK,KAAMW,QAAShB,EAAaE,OAAQ+B,UAAWjC,EAAavB,OAC3F,kBAAC,IAAD,SAAe,kBAACuB,EAAa6B,KAAd,MAAf,KACA,kBAAC,IAAD,CAAcK,QAASlC,EAAaK,QAG1C,MAaK8B,UARO,SAAC,GAA2B,IAAD,IAAxBC,KACrB,MAAa,mBADgC,MAAjB,WAAiB,GAElC,kBAAChD,EAAD,MAEA,kBAAC8B,EAAD","file":"static/js/21.019d5b3f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\n\r\nimport Text from '../../languages/Language';\r\nimport { ServiceWorkerContext } from '../../ContextProviders/ServiceWorkerContext';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    update: {\r\n        backgroundColor:theme.palette.info.main,\r\n        color:theme.palette.info.contrastText,\r\n        \"&:hover\":{\r\n            backgroundColor:theme.palette.info.light,\r\n        }\r\n    },\r\n    install: {\r\n        backgroundColor:theme.palette.success.main,\r\n        color:theme.palette.success.contrastText,\r\n        \"&:hover\":{\r\n            backgroundColor:theme.palette.success.light,\r\n        }\r\n    },\r\n}\r\n));\r\n\r\n\r\n\r\nconst handleUpdate = (props) => {\r\n    const { setMessage, waitingServiceWorker } = props;\r\n    if (waitingServiceWorker) {\r\n        // We send the SKIP_WAITING message to tell the Service Worker\r\n        // to update its cache and flush the old one\r\n        waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\r\n    }\r\n    setMessage(\"\");\r\n};\r\n\r\nconst handleInstall = (props) => {\r\n    const { setMessage, installPrompt } = props;\r\n    if (installPrompt) {\r\n        installPrompt.prompt();\r\n        // Wait for the user to respond to the prompt\r\n        installPrompt.userChoice.then((choiceResult) => {\r\n            if (choiceResult.outcome === 'accepted') {\r\n                console.log('User accepted the install prompt');\r\n            } else {\r\n                console.log('User dismissed the install prompt');\r\n            }\r\n        });\r\n    }\r\n    setMessage(\"\");\r\n};\r\n\r\n\r\nconst ServiceWorkerSnackbar = () => {\r\n    const context = React.useContext(ServiceWorkerContext);\r\n    const { Message } = context;\r\n    const [open, setOpen] = React.useState(true);\r\n    if(Message===\"\" || Message===\"INSTALL\") return null;\r\n\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    let alertmessage = {};\r\n    // if (Message === \"INSTALL\") {\r\n        // alertmessage = {\r\n        //     severity: \"success\",\r\n        //     action: () => handleInstall(context),\r\n        //     button: Text(\"install\"),\r\n        //     text: Text(\"app-available\")\r\n        // }\r\n    // }\r\n    if (Message === \"UPDATE\") {\r\n        alertmessage = {\r\n            severity: \"info\",\r\n            action: () => handleUpdate(context),\r\n            button: Text(\"update\"),\r\n            text: Text(\"update-available\")\r\n        }\r\n    } else if (Message === \"OFFLINE\") {\r\n        alertmessage = {\r\n            severity: \"success\",\r\n            action: null,\r\n            button: null,\r\n            text: Text(\"offline-available\")\r\n        }\r\n    }\r\n\r\n    const transition = (props) => <Slide {...props} direction=\"up\" />;\r\n    return <Snackbar\r\n        open={open}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n        TransitionComponent={transition}\r\n    >\r\n        <Alert elevation={6} variant=\"filled\" severity={alertmessage.severity}\r\n            action={alertmessage.action !== null &&\r\n                <React.Fragment>\r\n                    <Button color=\"inherit\" size=\"small\" onClick={alertmessage.action}>  {alertmessage.button} </Button>\r\n                    <IconButton color=\"inherit\" size=\"small\" onClick={handleClose}>\r\n                        <CloseIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                </React.Fragment>\r\n            } >\r\n            {alertmessage.text}\r\n        </Alert>\r\n    </Snackbar>\r\n}\r\n\r\n\r\n\r\nconst ServiceWorkerList = () => {\r\n    const classes = useStyles();\r\n    const context = React.useContext(ServiceWorkerContext);\r\n    const { Message } = context;\r\n    let alertmessage = {};\r\n\r\n    if (Message === \"INSTALL\") {\r\n        alertmessage = {\r\n            action: () => handleInstall(context),\r\n            text: Text(\"install\"),\r\n            icon: GetAppIcon,\r\n            color: classes.install\r\n        }\r\n    } else if (Message === \"UPDATE\") {\r\n        alertmessage = {\r\n            action: () => handleUpdate(context),\r\n            text: Text(\"update\"),\r\n            icon: RefreshIcon,\r\n            color: classes.update\r\n        }\r\n    }\r\n\r\n    return (Message !== \"OFFLINE\" && Message !== \"\") ?\r\n        (\r\n            <ListItem button key={alertmessage.text} onClick={alertmessage.action} className={alertmessage.color} >\r\n                <ListItemIcon> <alertmessage.icon /> </ListItemIcon>\r\n                <ListItemText primary={alertmessage.text} />\r\n            </ListItem>\r\n        )\r\n        : null\r\n}\r\n\r\n\r\n\r\nconst ServiceWorker = ({ mode = \"snackbar\" }) => {\r\n    if (mode === \"snackbar\") {\r\n        return <ServiceWorkerSnackbar />;\r\n    } else {\r\n        return <ServiceWorkerList />;\r\n    }\r\n};\r\n\r\nexport default ServiceWorker;"],"sourceRoot":""}